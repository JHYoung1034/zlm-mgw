// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mgw.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mgw_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mgw_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "device.pb.h"
#include "u727.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mgw_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mgw_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mgw_2eproto;
namespace mgw {
class MgwMsg;
class MgwMsgDefaultTypeInternal;
extern MgwMsgDefaultTypeInternal _MgwMsg_default_instance_;
}  // namespace mgw
PROTOBUF_NAMESPACE_OPEN
template<> ::mgw::MgwMsg* Arena::CreateMaybeMessage<::mgw::MgwMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mgw {

// ===================================================================

class MgwMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.MgwMsg) */ {
 public:
  inline MgwMsg() : MgwMsg(nullptr) {}
  virtual ~MgwMsg();

  MgwMsg(const MgwMsg& from);
  MgwMsg(MgwMsg&& from) noexcept
    : MgwMsg() {
    *this = ::std::move(from);
  }

  inline MgwMsg& operator=(const MgwMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MgwMsg& operator=(MgwMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MgwMsg& default_instance();

  enum MessageCase {
    kResponse = 20,
    kSessionReq = 21,
    kSessionRsp = 22,
    kStartOutput = 23,
    kStopOutput = 24,
    kOutputSta = 25,
    kStopPushing = 26,
    kSyncReq = 27,
    kSyncRsp = 28,
    kSerSessionReq = 29,
    kSerSessionRsp = 30,
    kQuerySource = 31,
    kSetPullAttr = 32,
    kPushStreamReq = 33,
    kKeepAlive = 34,
    kSetBlackList = 1000,
    kSetSvcPortReq = 1001,
    kSetSvcPortReply = 1002,
    kGetSvcPortReq = 1003,
    kGetSvcPortReply = 1004,
    kStartStreamReq = 1005,
    kStartStreamReply = 1006,
    kStopStream = 1007,
    kDevOnline = 1008,
    kDevOffline = 1009,
    kStreamStatus = 1010,
    kDevStartStreamNotify = 1011,
    kDevStopStreamNotify = 1012,
    kU727KeepAlive = 1013,
    kQueryOnlineDevReq = 1014,
    kQueryOnlineDevReply = 1015,
    MESSAGE_NOT_SET = 0,
  };

  static inline const MgwMsg* internal_default_instance() {
    return reinterpret_cast<const MgwMsg*>(
               &_MgwMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MgwMsg& a, MgwMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MgwMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MgwMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MgwMsg* New() const final {
    return CreateMaybeMessage<MgwMsg>(nullptr);
  }

  MgwMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MgwMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MgwMsg& from);
  void MergeFrom(const MgwMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MgwMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.MgwMsg";
  }
  protected:
  explicit MgwMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 20,
    kSessionReqFieldNumber = 21,
    kSessionRspFieldNumber = 22,
    kStartOutputFieldNumber = 23,
    kStopOutputFieldNumber = 24,
    kOutputStaFieldNumber = 25,
    kStopPushingFieldNumber = 26,
    kSyncReqFieldNumber = 27,
    kSyncRspFieldNumber = 28,
    kSerSessionReqFieldNumber = 29,
    kSerSessionRspFieldNumber = 30,
    kQuerySourceFieldNumber = 31,
    kSetPullAttrFieldNumber = 32,
    kPushStreamReqFieldNumber = 33,
    kKeepAliveFieldNumber = 34,
    kSetBlackListFieldNumber = 1000,
    kSetSvcPortReqFieldNumber = 1001,
    kSetSvcPortReplyFieldNumber = 1002,
    kGetSvcPortReqFieldNumber = 1003,
    kGetSvcPortReplyFieldNumber = 1004,
    kStartStreamReqFieldNumber = 1005,
    kStartStreamReplyFieldNumber = 1006,
    kStopStreamFieldNumber = 1007,
    kDevOnlineFieldNumber = 1008,
    kDevOfflineFieldNumber = 1009,
    kStreamStatusFieldNumber = 1010,
    kDevStartStreamNotifyFieldNumber = 1011,
    kDevStopStreamNotifyFieldNumber = 1012,
    kU727KeepAliveFieldNumber = 1013,
    kQueryOnlineDevReqFieldNumber = 1014,
    kQueryOnlineDevReplyFieldNumber = 1015,
  };
  // .device.CommonRsp response = 20;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::device::CommonRsp& response() const;
  ::device::CommonRsp* release_response();
  ::device::CommonRsp* mutable_response();
  void set_allocated_response(::device::CommonRsp* response);
  private:
  const ::device::CommonRsp& _internal_response() const;
  ::device::CommonRsp* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::device::CommonRsp* response);
  ::device::CommonRsp* unsafe_arena_release_response();

  // .device.SessionReq sessionReq = 21;
  bool has_sessionreq() const;
  private:
  bool _internal_has_sessionreq() const;
  public:
  void clear_sessionreq();
  const ::device::SessionReq& sessionreq() const;
  ::device::SessionReq* release_sessionreq();
  ::device::SessionReq* mutable_sessionreq();
  void set_allocated_sessionreq(::device::SessionReq* sessionreq);
  private:
  const ::device::SessionReq& _internal_sessionreq() const;
  ::device::SessionReq* _internal_mutable_sessionreq();
  public:
  void unsafe_arena_set_allocated_sessionreq(
      ::device::SessionReq* sessionreq);
  ::device::SessionReq* unsafe_arena_release_sessionreq();

  // .device.SessionRsp sessionRsp = 22;
  bool has_sessionrsp() const;
  private:
  bool _internal_has_sessionrsp() const;
  public:
  void clear_sessionrsp();
  const ::device::SessionRsp& sessionrsp() const;
  ::device::SessionRsp* release_sessionrsp();
  ::device::SessionRsp* mutable_sessionrsp();
  void set_allocated_sessionrsp(::device::SessionRsp* sessionrsp);
  private:
  const ::device::SessionRsp& _internal_sessionrsp() const;
  ::device::SessionRsp* _internal_mutable_sessionrsp();
  public:
  void unsafe_arena_set_allocated_sessionrsp(
      ::device::SessionRsp* sessionrsp);
  ::device::SessionRsp* unsafe_arena_release_sessionrsp();

  // .device.StartOutputStream startOutput = 23;
  bool has_startoutput() const;
  private:
  bool _internal_has_startoutput() const;
  public:
  void clear_startoutput();
  const ::device::StartOutputStream& startoutput() const;
  ::device::StartOutputStream* release_startoutput();
  ::device::StartOutputStream* mutable_startoutput();
  void set_allocated_startoutput(::device::StartOutputStream* startoutput);
  private:
  const ::device::StartOutputStream& _internal_startoutput() const;
  ::device::StartOutputStream* _internal_mutable_startoutput();
  public:
  void unsafe_arena_set_allocated_startoutput(
      ::device::StartOutputStream* startoutput);
  ::device::StartOutputStream* unsafe_arena_release_startoutput();

  // .device.StopOutputStream stopOutput = 24;
  bool has_stopoutput() const;
  private:
  bool _internal_has_stopoutput() const;
  public:
  void clear_stopoutput();
  const ::device::StopOutputStream& stopoutput() const;
  ::device::StopOutputStream* release_stopoutput();
  ::device::StopOutputStream* mutable_stopoutput();
  void set_allocated_stopoutput(::device::StopOutputStream* stopoutput);
  private:
  const ::device::StopOutputStream& _internal_stopoutput() const;
  ::device::StopOutputStream* _internal_mutable_stopoutput();
  public:
  void unsafe_arena_set_allocated_stopoutput(
      ::device::StopOutputStream* stopoutput);
  ::device::StopOutputStream* unsafe_arena_release_stopoutput();

  // .device.OutputStreamStatus outputSta = 25;
  bool has_outputsta() const;
  private:
  bool _internal_has_outputsta() const;
  public:
  void clear_outputsta();
  const ::device::OutputStreamStatus& outputsta() const;
  ::device::OutputStreamStatus* release_outputsta();
  ::device::OutputStreamStatus* mutable_outputsta();
  void set_allocated_outputsta(::device::OutputStreamStatus* outputsta);
  private:
  const ::device::OutputStreamStatus& _internal_outputsta() const;
  ::device::OutputStreamStatus* _internal_mutable_outputsta();
  public:
  void unsafe_arena_set_allocated_outputsta(
      ::device::OutputStreamStatus* outputsta);
  ::device::OutputStreamStatus* unsafe_arena_release_outputsta();

  // .device.StopPushingStream stopPushing = 26;
  bool has_stoppushing() const;
  private:
  bool _internal_has_stoppushing() const;
  public:
  void clear_stoppushing();
  const ::device::StopPushingStream& stoppushing() const;
  ::device::StopPushingStream* release_stoppushing();
  ::device::StopPushingStream* mutable_stoppushing();
  void set_allocated_stoppushing(::device::StopPushingStream* stoppushing);
  private:
  const ::device::StopPushingStream& _internal_stoppushing() const;
  ::device::StopPushingStream* _internal_mutable_stoppushing();
  public:
  void unsafe_arena_set_allocated_stoppushing(
      ::device::StopPushingStream* stoppushing);
  ::device::StopPushingStream* unsafe_arena_release_stoppushing();

  // .device.SyncStatusReq syncReq = 27;
  bool has_syncreq() const;
  private:
  bool _internal_has_syncreq() const;
  public:
  void clear_syncreq();
  const ::device::SyncStatusReq& syncreq() const;
  ::device::SyncStatusReq* release_syncreq();
  ::device::SyncStatusReq* mutable_syncreq();
  void set_allocated_syncreq(::device::SyncStatusReq* syncreq);
  private:
  const ::device::SyncStatusReq& _internal_syncreq() const;
  ::device::SyncStatusReq* _internal_mutable_syncreq();
  public:
  void unsafe_arena_set_allocated_syncreq(
      ::device::SyncStatusReq* syncreq);
  ::device::SyncStatusReq* unsafe_arena_release_syncreq();

  // .device.SyncStatusRsp syncRsp = 28;
  bool has_syncrsp() const;
  private:
  bool _internal_has_syncrsp() const;
  public:
  void clear_syncrsp();
  const ::device::SyncStatusRsp& syncrsp() const;
  ::device::SyncStatusRsp* release_syncrsp();
  ::device::SyncStatusRsp* mutable_syncrsp();
  void set_allocated_syncrsp(::device::SyncStatusRsp* syncrsp);
  private:
  const ::device::SyncStatusRsp& _internal_syncrsp() const;
  ::device::SyncStatusRsp* _internal_mutable_syncrsp();
  public:
  void unsafe_arena_set_allocated_syncrsp(
      ::device::SyncStatusRsp* syncrsp);
  ::device::SyncStatusRsp* unsafe_arena_release_syncrsp();

  // .device.ServerSessionReq serSessionReq = 29;
  bool has_sersessionreq() const;
  private:
  bool _internal_has_sersessionreq() const;
  public:
  void clear_sersessionreq();
  const ::device::ServerSessionReq& sersessionreq() const;
  ::device::ServerSessionReq* release_sersessionreq();
  ::device::ServerSessionReq* mutable_sersessionreq();
  void set_allocated_sersessionreq(::device::ServerSessionReq* sersessionreq);
  private:
  const ::device::ServerSessionReq& _internal_sersessionreq() const;
  ::device::ServerSessionReq* _internal_mutable_sersessionreq();
  public:
  void unsafe_arena_set_allocated_sersessionreq(
      ::device::ServerSessionReq* sersessionreq);
  ::device::ServerSessionReq* unsafe_arena_release_sersessionreq();

  // .device.ServerSessionRsp serSessionRsp = 30;
  bool has_sersessionrsp() const;
  private:
  bool _internal_has_sersessionrsp() const;
  public:
  void clear_sersessionrsp();
  const ::device::ServerSessionRsp& sersessionrsp() const;
  ::device::ServerSessionRsp* release_sersessionrsp();
  ::device::ServerSessionRsp* mutable_sersessionrsp();
  void set_allocated_sersessionrsp(::device::ServerSessionRsp* sersessionrsp);
  private:
  const ::device::ServerSessionRsp& _internal_sersessionrsp() const;
  ::device::ServerSessionRsp* _internal_mutable_sersessionrsp();
  public:
  void unsafe_arena_set_allocated_sersessionrsp(
      ::device::ServerSessionRsp* sersessionrsp);
  ::device::ServerSessionRsp* unsafe_arena_release_sersessionrsp();

  // .device.QuerySource querySource = 31;
  bool has_querysource() const;
  private:
  bool _internal_has_querysource() const;
  public:
  void clear_querysource();
  const ::device::QuerySource& querysource() const;
  ::device::QuerySource* release_querysource();
  ::device::QuerySource* mutable_querysource();
  void set_allocated_querysource(::device::QuerySource* querysource);
  private:
  const ::device::QuerySource& _internal_querysource() const;
  ::device::QuerySource* _internal_mutable_querysource();
  public:
  void unsafe_arena_set_allocated_querysource(
      ::device::QuerySource* querysource);
  ::device::QuerySource* unsafe_arena_release_querysource();

  // .device.SetPullAttr setPullAttr = 32;
  bool has_setpullattr() const;
  private:
  bool _internal_has_setpullattr() const;
  public:
  void clear_setpullattr();
  const ::device::SetPullAttr& setpullattr() const;
  ::device::SetPullAttr* release_setpullattr();
  ::device::SetPullAttr* mutable_setpullattr();
  void set_allocated_setpullattr(::device::SetPullAttr* setpullattr);
  private:
  const ::device::SetPullAttr& _internal_setpullattr() const;
  ::device::SetPullAttr* _internal_mutable_setpullattr();
  public:
  void unsafe_arena_set_allocated_setpullattr(
      ::device::SetPullAttr* setpullattr);
  ::device::SetPullAttr* unsafe_arena_release_setpullattr();

  // .device.PushStreamReq pushStreamReq = 33;
  bool has_pushstreamreq() const;
  private:
  bool _internal_has_pushstreamreq() const;
  public:
  void clear_pushstreamreq();
  const ::device::PushStreamReq& pushstreamreq() const;
  ::device::PushStreamReq* release_pushstreamreq();
  ::device::PushStreamReq* mutable_pushstreamreq();
  void set_allocated_pushstreamreq(::device::PushStreamReq* pushstreamreq);
  private:
  const ::device::PushStreamReq& _internal_pushstreamreq() const;
  ::device::PushStreamReq* _internal_mutable_pushstreamreq();
  public:
  void unsafe_arena_set_allocated_pushstreamreq(
      ::device::PushStreamReq* pushstreamreq);
  ::device::PushStreamReq* unsafe_arena_release_pushstreamreq();

  // .device.ServerKeepAlive keepAlive = 34;
  bool has_keepalive() const;
  private:
  bool _internal_has_keepalive() const;
  public:
  void clear_keepalive();
  const ::device::ServerKeepAlive& keepalive() const;
  ::device::ServerKeepAlive* release_keepalive();
  ::device::ServerKeepAlive* mutable_keepalive();
  void set_allocated_keepalive(::device::ServerKeepAlive* keepalive);
  private:
  const ::device::ServerKeepAlive& _internal_keepalive() const;
  ::device::ServerKeepAlive* _internal_mutable_keepalive();
  public:
  void unsafe_arena_set_allocated_keepalive(
      ::device::ServerKeepAlive* keepalive);
  ::device::ServerKeepAlive* unsafe_arena_release_keepalive();

  // .u727.SetDevBlacklist setBlackList = 1000;
  bool has_setblacklist() const;
  private:
  bool _internal_has_setblacklist() const;
  public:
  void clear_setblacklist();
  const ::u727::SetDevBlacklist& setblacklist() const;
  ::u727::SetDevBlacklist* release_setblacklist();
  ::u727::SetDevBlacklist* mutable_setblacklist();
  void set_allocated_setblacklist(::u727::SetDevBlacklist* setblacklist);
  private:
  const ::u727::SetDevBlacklist& _internal_setblacklist() const;
  ::u727::SetDevBlacklist* _internal_mutable_setblacklist();
  public:
  void unsafe_arena_set_allocated_setblacklist(
      ::u727::SetDevBlacklist* setblacklist);
  ::u727::SetDevBlacklist* unsafe_arena_release_setblacklist();

  // .u727.SetLocalSvcPortReq setSvcPortReq = 1001;
  bool has_setsvcportreq() const;
  private:
  bool _internal_has_setsvcportreq() const;
  public:
  void clear_setsvcportreq();
  const ::u727::SetLocalSvcPortReq& setsvcportreq() const;
  ::u727::SetLocalSvcPortReq* release_setsvcportreq();
  ::u727::SetLocalSvcPortReq* mutable_setsvcportreq();
  void set_allocated_setsvcportreq(::u727::SetLocalSvcPortReq* setsvcportreq);
  private:
  const ::u727::SetLocalSvcPortReq& _internal_setsvcportreq() const;
  ::u727::SetLocalSvcPortReq* _internal_mutable_setsvcportreq();
  public:
  void unsafe_arena_set_allocated_setsvcportreq(
      ::u727::SetLocalSvcPortReq* setsvcportreq);
  ::u727::SetLocalSvcPortReq* unsafe_arena_release_setsvcportreq();

  // .u727.SetLocalSvcPortReply setSvcPortReply = 1002;
  bool has_setsvcportreply() const;
  private:
  bool _internal_has_setsvcportreply() const;
  public:
  void clear_setsvcportreply();
  const ::u727::SetLocalSvcPortReply& setsvcportreply() const;
  ::u727::SetLocalSvcPortReply* release_setsvcportreply();
  ::u727::SetLocalSvcPortReply* mutable_setsvcportreply();
  void set_allocated_setsvcportreply(::u727::SetLocalSvcPortReply* setsvcportreply);
  private:
  const ::u727::SetLocalSvcPortReply& _internal_setsvcportreply() const;
  ::u727::SetLocalSvcPortReply* _internal_mutable_setsvcportreply();
  public:
  void unsafe_arena_set_allocated_setsvcportreply(
      ::u727::SetLocalSvcPortReply* setsvcportreply);
  ::u727::SetLocalSvcPortReply* unsafe_arena_release_setsvcportreply();

  // .u727.GetLocalSvcPortReq getSvcPortReq = 1003;
  bool has_getsvcportreq() const;
  private:
  bool _internal_has_getsvcportreq() const;
  public:
  void clear_getsvcportreq();
  const ::u727::GetLocalSvcPortReq& getsvcportreq() const;
  ::u727::GetLocalSvcPortReq* release_getsvcportreq();
  ::u727::GetLocalSvcPortReq* mutable_getsvcportreq();
  void set_allocated_getsvcportreq(::u727::GetLocalSvcPortReq* getsvcportreq);
  private:
  const ::u727::GetLocalSvcPortReq& _internal_getsvcportreq() const;
  ::u727::GetLocalSvcPortReq* _internal_mutable_getsvcportreq();
  public:
  void unsafe_arena_set_allocated_getsvcportreq(
      ::u727::GetLocalSvcPortReq* getsvcportreq);
  ::u727::GetLocalSvcPortReq* unsafe_arena_release_getsvcportreq();

  // .u727.GetLocalSvcPortReply getSvcPortReply = 1004;
  bool has_getsvcportreply() const;
  private:
  bool _internal_has_getsvcportreply() const;
  public:
  void clear_getsvcportreply();
  const ::u727::GetLocalSvcPortReply& getsvcportreply() const;
  ::u727::GetLocalSvcPortReply* release_getsvcportreply();
  ::u727::GetLocalSvcPortReply* mutable_getsvcportreply();
  void set_allocated_getsvcportreply(::u727::GetLocalSvcPortReply* getsvcportreply);
  private:
  const ::u727::GetLocalSvcPortReply& _internal_getsvcportreply() const;
  ::u727::GetLocalSvcPortReply* _internal_mutable_getsvcportreply();
  public:
  void unsafe_arena_set_allocated_getsvcportreply(
      ::u727::GetLocalSvcPortReply* getsvcportreply);
  ::u727::GetLocalSvcPortReply* unsafe_arena_release_getsvcportreply();

  // .u727.StartStreamReq startStreamReq = 1005;
  bool has_startstreamreq() const;
  private:
  bool _internal_has_startstreamreq() const;
  public:
  void clear_startstreamreq();
  const ::u727::StartStreamReq& startstreamreq() const;
  ::u727::StartStreamReq* release_startstreamreq();
  ::u727::StartStreamReq* mutable_startstreamreq();
  void set_allocated_startstreamreq(::u727::StartStreamReq* startstreamreq);
  private:
  const ::u727::StartStreamReq& _internal_startstreamreq() const;
  ::u727::StartStreamReq* _internal_mutable_startstreamreq();
  public:
  void unsafe_arena_set_allocated_startstreamreq(
      ::u727::StartStreamReq* startstreamreq);
  ::u727::StartStreamReq* unsafe_arena_release_startstreamreq();

  // .u727.StartStreamReply startStreamReply = 1006;
  bool has_startstreamreply() const;
  private:
  bool _internal_has_startstreamreply() const;
  public:
  void clear_startstreamreply();
  const ::u727::StartStreamReply& startstreamreply() const;
  ::u727::StartStreamReply* release_startstreamreply();
  ::u727::StartStreamReply* mutable_startstreamreply();
  void set_allocated_startstreamreply(::u727::StartStreamReply* startstreamreply);
  private:
  const ::u727::StartStreamReply& _internal_startstreamreply() const;
  ::u727::StartStreamReply* _internal_mutable_startstreamreply();
  public:
  void unsafe_arena_set_allocated_startstreamreply(
      ::u727::StartStreamReply* startstreamreply);
  ::u727::StartStreamReply* unsafe_arena_release_startstreamreply();

  // .u727.StopStreamReq stopStream = 1007;
  bool has_stopstream() const;
  private:
  bool _internal_has_stopstream() const;
  public:
  void clear_stopstream();
  const ::u727::StopStreamReq& stopstream() const;
  ::u727::StopStreamReq* release_stopstream();
  ::u727::StopStreamReq* mutable_stopstream();
  void set_allocated_stopstream(::u727::StopStreamReq* stopstream);
  private:
  const ::u727::StopStreamReq& _internal_stopstream() const;
  ::u727::StopStreamReq* _internal_mutable_stopstream();
  public:
  void unsafe_arena_set_allocated_stopstream(
      ::u727::StopStreamReq* stopstream);
  ::u727::StopStreamReq* unsafe_arena_release_stopstream();

  // .u727.MgwDevOnlineNotify devOnline = 1008;
  bool has_devonline() const;
  private:
  bool _internal_has_devonline() const;
  public:
  void clear_devonline();
  const ::u727::MgwDevOnlineNotify& devonline() const;
  ::u727::MgwDevOnlineNotify* release_devonline();
  ::u727::MgwDevOnlineNotify* mutable_devonline();
  void set_allocated_devonline(::u727::MgwDevOnlineNotify* devonline);
  private:
  const ::u727::MgwDevOnlineNotify& _internal_devonline() const;
  ::u727::MgwDevOnlineNotify* _internal_mutable_devonline();
  public:
  void unsafe_arena_set_allocated_devonline(
      ::u727::MgwDevOnlineNotify* devonline);
  ::u727::MgwDevOnlineNotify* unsafe_arena_release_devonline();

  // .u727.MgwDevOfflineNotify devOffline = 1009;
  bool has_devoffline() const;
  private:
  bool _internal_has_devoffline() const;
  public:
  void clear_devoffline();
  const ::u727::MgwDevOfflineNotify& devoffline() const;
  ::u727::MgwDevOfflineNotify* release_devoffline();
  ::u727::MgwDevOfflineNotify* mutable_devoffline();
  void set_allocated_devoffline(::u727::MgwDevOfflineNotify* devoffline);
  private:
  const ::u727::MgwDevOfflineNotify& _internal_devoffline() const;
  ::u727::MgwDevOfflineNotify* _internal_mutable_devoffline();
  public:
  void unsafe_arena_set_allocated_devoffline(
      ::u727::MgwDevOfflineNotify* devoffline);
  ::u727::MgwDevOfflineNotify* unsafe_arena_release_devoffline();

  // .u727.StreamStatusNotify streamStatus = 1010;
  bool has_streamstatus() const;
  private:
  bool _internal_has_streamstatus() const;
  public:
  void clear_streamstatus();
  const ::u727::StreamStatusNotify& streamstatus() const;
  ::u727::StreamStatusNotify* release_streamstatus();
  ::u727::StreamStatusNotify* mutable_streamstatus();
  void set_allocated_streamstatus(::u727::StreamStatusNotify* streamstatus);
  private:
  const ::u727::StreamStatusNotify& _internal_streamstatus() const;
  ::u727::StreamStatusNotify* _internal_mutable_streamstatus();
  public:
  void unsafe_arena_set_allocated_streamstatus(
      ::u727::StreamStatusNotify* streamstatus);
  ::u727::StreamStatusNotify* unsafe_arena_release_streamstatus();

  // .u727.DevStartStreamNotify devStartStreamNotify = 1011;
  bool has_devstartstreamnotify() const;
  private:
  bool _internal_has_devstartstreamnotify() const;
  public:
  void clear_devstartstreamnotify();
  const ::u727::DevStartStreamNotify& devstartstreamnotify() const;
  ::u727::DevStartStreamNotify* release_devstartstreamnotify();
  ::u727::DevStartStreamNotify* mutable_devstartstreamnotify();
  void set_allocated_devstartstreamnotify(::u727::DevStartStreamNotify* devstartstreamnotify);
  private:
  const ::u727::DevStartStreamNotify& _internal_devstartstreamnotify() const;
  ::u727::DevStartStreamNotify* _internal_mutable_devstartstreamnotify();
  public:
  void unsafe_arena_set_allocated_devstartstreamnotify(
      ::u727::DevStartStreamNotify* devstartstreamnotify);
  ::u727::DevStartStreamNotify* unsafe_arena_release_devstartstreamnotify();

  // .u727.DevStopStreamNotify devStopStreamNotify = 1012;
  bool has_devstopstreamnotify() const;
  private:
  bool _internal_has_devstopstreamnotify() const;
  public:
  void clear_devstopstreamnotify();
  const ::u727::DevStopStreamNotify& devstopstreamnotify() const;
  ::u727::DevStopStreamNotify* release_devstopstreamnotify();
  ::u727::DevStopStreamNotify* mutable_devstopstreamnotify();
  void set_allocated_devstopstreamnotify(::u727::DevStopStreamNotify* devstopstreamnotify);
  private:
  const ::u727::DevStopStreamNotify& _internal_devstopstreamnotify() const;
  ::u727::DevStopStreamNotify* _internal_mutable_devstopstreamnotify();
  public:
  void unsafe_arena_set_allocated_devstopstreamnotify(
      ::u727::DevStopStreamNotify* devstopstreamnotify);
  ::u727::DevStopStreamNotify* unsafe_arena_release_devstopstreamnotify();

  // .u727.KeepAlive u727keepAlive = 1013;
  bool has_u727keepalive() const;
  private:
  bool _internal_has_u727keepalive() const;
  public:
  void clear_u727keepalive();
  const ::u727::KeepAlive& u727keepalive() const;
  ::u727::KeepAlive* release_u727keepalive();
  ::u727::KeepAlive* mutable_u727keepalive();
  void set_allocated_u727keepalive(::u727::KeepAlive* u727keepalive);
  private:
  const ::u727::KeepAlive& _internal_u727keepalive() const;
  ::u727::KeepAlive* _internal_mutable_u727keepalive();
  public:
  void unsafe_arena_set_allocated_u727keepalive(
      ::u727::KeepAlive* u727keepalive);
  ::u727::KeepAlive* unsafe_arena_release_u727keepalive();

  // .u727.QueryOnlineDevReq queryOnlineDevReq = 1014;
  bool has_queryonlinedevreq() const;
  private:
  bool _internal_has_queryonlinedevreq() const;
  public:
  void clear_queryonlinedevreq();
  const ::u727::QueryOnlineDevReq& queryonlinedevreq() const;
  ::u727::QueryOnlineDevReq* release_queryonlinedevreq();
  ::u727::QueryOnlineDevReq* mutable_queryonlinedevreq();
  void set_allocated_queryonlinedevreq(::u727::QueryOnlineDevReq* queryonlinedevreq);
  private:
  const ::u727::QueryOnlineDevReq& _internal_queryonlinedevreq() const;
  ::u727::QueryOnlineDevReq* _internal_mutable_queryonlinedevreq();
  public:
  void unsafe_arena_set_allocated_queryonlinedevreq(
      ::u727::QueryOnlineDevReq* queryonlinedevreq);
  ::u727::QueryOnlineDevReq* unsafe_arena_release_queryonlinedevreq();

  // .u727.QueryOnlineDevReply queryOnlineDevReply = 1015;
  bool has_queryonlinedevreply() const;
  private:
  bool _internal_has_queryonlinedevreply() const;
  public:
  void clear_queryonlinedevreply();
  const ::u727::QueryOnlineDevReply& queryonlinedevreply() const;
  ::u727::QueryOnlineDevReply* release_queryonlinedevreply();
  ::u727::QueryOnlineDevReply* mutable_queryonlinedevreply();
  void set_allocated_queryonlinedevreply(::u727::QueryOnlineDevReply* queryonlinedevreply);
  private:
  const ::u727::QueryOnlineDevReply& _internal_queryonlinedevreply() const;
  ::u727::QueryOnlineDevReply* _internal_mutable_queryonlinedevreply();
  public:
  void unsafe_arena_set_allocated_queryonlinedevreply(
      ::u727::QueryOnlineDevReply* queryonlinedevreply);
  ::u727::QueryOnlineDevReply* unsafe_arena_release_queryonlinedevreply();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:mgw.MgwMsg)
 private:
  class _Internal;
  void set_has_response();
  void set_has_sessionreq();
  void set_has_sessionrsp();
  void set_has_startoutput();
  void set_has_stopoutput();
  void set_has_outputsta();
  void set_has_stoppushing();
  void set_has_syncreq();
  void set_has_syncrsp();
  void set_has_sersessionreq();
  void set_has_sersessionrsp();
  void set_has_querysource();
  void set_has_setpullattr();
  void set_has_pushstreamreq();
  void set_has_keepalive();
  void set_has_setblacklist();
  void set_has_setsvcportreq();
  void set_has_setsvcportreply();
  void set_has_getsvcportreq();
  void set_has_getsvcportreply();
  void set_has_startstreamreq();
  void set_has_startstreamreply();
  void set_has_stopstream();
  void set_has_devonline();
  void set_has_devoffline();
  void set_has_streamstatus();
  void set_has_devstartstreamnotify();
  void set_has_devstopstreamnotify();
  void set_has_u727keepalive();
  void set_has_queryonlinedevreq();
  void set_has_queryonlinedevreply();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::device::CommonRsp* response_;
    ::device::SessionReq* sessionreq_;
    ::device::SessionRsp* sessionrsp_;
    ::device::StartOutputStream* startoutput_;
    ::device::StopOutputStream* stopoutput_;
    ::device::OutputStreamStatus* outputsta_;
    ::device::StopPushingStream* stoppushing_;
    ::device::SyncStatusReq* syncreq_;
    ::device::SyncStatusRsp* syncrsp_;
    ::device::ServerSessionReq* sersessionreq_;
    ::device::ServerSessionRsp* sersessionrsp_;
    ::device::QuerySource* querysource_;
    ::device::SetPullAttr* setpullattr_;
    ::device::PushStreamReq* pushstreamreq_;
    ::device::ServerKeepAlive* keepalive_;
    ::u727::SetDevBlacklist* setblacklist_;
    ::u727::SetLocalSvcPortReq* setsvcportreq_;
    ::u727::SetLocalSvcPortReply* setsvcportreply_;
    ::u727::GetLocalSvcPortReq* getsvcportreq_;
    ::u727::GetLocalSvcPortReply* getsvcportreply_;
    ::u727::StartStreamReq* startstreamreq_;
    ::u727::StartStreamReply* startstreamreply_;
    ::u727::StopStreamReq* stopstream_;
    ::u727::MgwDevOnlineNotify* devonline_;
    ::u727::MgwDevOfflineNotify* devoffline_;
    ::u727::StreamStatusNotify* streamstatus_;
    ::u727::DevStartStreamNotify* devstartstreamnotify_;
    ::u727::DevStopStreamNotify* devstopstreamnotify_;
    ::u727::KeepAlive* u727keepalive_;
    ::u727::QueryOnlineDevReq* queryonlinedevreq_;
    ::u727::QueryOnlineDevReply* queryonlinedevreply_;
  } Message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mgw_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MgwMsg

// .device.CommonRsp response = 20;
inline bool MgwMsg::_internal_has_response() const {
  return Message_case() == kResponse;
}
inline bool MgwMsg::has_response() const {
  return _internal_has_response();
}
inline void MgwMsg::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline ::device::CommonRsp* MgwMsg::release_response() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.response)
  if (_internal_has_response()) {
    clear_has_Message();
      ::device::CommonRsp* temp = Message_.response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::CommonRsp& MgwMsg::_internal_response() const {
  return _internal_has_response()
      ? *Message_.response_
      : reinterpret_cast< ::device::CommonRsp&>(::device::_CommonRsp_default_instance_);
}
inline const ::device::CommonRsp& MgwMsg::response() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.response)
  return _internal_response();
}
inline ::device::CommonRsp* MgwMsg::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.response)
  if (_internal_has_response()) {
    clear_has_Message();
    ::device::CommonRsp* temp = Message_.response_;
    Message_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_response(::device::CommonRsp* response) {
  clear_Message();
  if (response) {
    set_has_response();
    Message_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.response)
}
inline ::device::CommonRsp* MgwMsg::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_Message();
    set_has_response();
    Message_.response_ = CreateMaybeMessage< ::device::CommonRsp >(GetArena());
  }
  return Message_.response_;
}
inline ::device::CommonRsp* MgwMsg::mutable_response() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.response)
  return _internal_mutable_response();
}

// .device.SessionReq sessionReq = 21;
inline bool MgwMsg::_internal_has_sessionreq() const {
  return Message_case() == kSessionReq;
}
inline bool MgwMsg::has_sessionreq() const {
  return _internal_has_sessionreq();
}
inline void MgwMsg::set_has_sessionreq() {
  _oneof_case_[0] = kSessionReq;
}
inline ::device::SessionReq* MgwMsg::release_sessionreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.sessionReq)
  if (_internal_has_sessionreq()) {
    clear_has_Message();
      ::device::SessionReq* temp = Message_.sessionreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.sessionreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::SessionReq& MgwMsg::_internal_sessionreq() const {
  return _internal_has_sessionreq()
      ? *Message_.sessionreq_
      : reinterpret_cast< ::device::SessionReq&>(::device::_SessionReq_default_instance_);
}
inline const ::device::SessionReq& MgwMsg::sessionreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.sessionReq)
  return _internal_sessionreq();
}
inline ::device::SessionReq* MgwMsg::unsafe_arena_release_sessionreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.sessionReq)
  if (_internal_has_sessionreq()) {
    clear_has_Message();
    ::device::SessionReq* temp = Message_.sessionreq_;
    Message_.sessionreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_sessionreq(::device::SessionReq* sessionreq) {
  clear_Message();
  if (sessionreq) {
    set_has_sessionreq();
    Message_.sessionreq_ = sessionreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.sessionReq)
}
inline ::device::SessionReq* MgwMsg::_internal_mutable_sessionreq() {
  if (!_internal_has_sessionreq()) {
    clear_Message();
    set_has_sessionreq();
    Message_.sessionreq_ = CreateMaybeMessage< ::device::SessionReq >(GetArena());
  }
  return Message_.sessionreq_;
}
inline ::device::SessionReq* MgwMsg::mutable_sessionreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.sessionReq)
  return _internal_mutable_sessionreq();
}

// .device.SessionRsp sessionRsp = 22;
inline bool MgwMsg::_internal_has_sessionrsp() const {
  return Message_case() == kSessionRsp;
}
inline bool MgwMsg::has_sessionrsp() const {
  return _internal_has_sessionrsp();
}
inline void MgwMsg::set_has_sessionrsp() {
  _oneof_case_[0] = kSessionRsp;
}
inline ::device::SessionRsp* MgwMsg::release_sessionrsp() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.sessionRsp)
  if (_internal_has_sessionrsp()) {
    clear_has_Message();
      ::device::SessionRsp* temp = Message_.sessionrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.sessionrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::SessionRsp& MgwMsg::_internal_sessionrsp() const {
  return _internal_has_sessionrsp()
      ? *Message_.sessionrsp_
      : reinterpret_cast< ::device::SessionRsp&>(::device::_SessionRsp_default_instance_);
}
inline const ::device::SessionRsp& MgwMsg::sessionrsp() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.sessionRsp)
  return _internal_sessionrsp();
}
inline ::device::SessionRsp* MgwMsg::unsafe_arena_release_sessionrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.sessionRsp)
  if (_internal_has_sessionrsp()) {
    clear_has_Message();
    ::device::SessionRsp* temp = Message_.sessionrsp_;
    Message_.sessionrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_sessionrsp(::device::SessionRsp* sessionrsp) {
  clear_Message();
  if (sessionrsp) {
    set_has_sessionrsp();
    Message_.sessionrsp_ = sessionrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.sessionRsp)
}
inline ::device::SessionRsp* MgwMsg::_internal_mutable_sessionrsp() {
  if (!_internal_has_sessionrsp()) {
    clear_Message();
    set_has_sessionrsp();
    Message_.sessionrsp_ = CreateMaybeMessage< ::device::SessionRsp >(GetArena());
  }
  return Message_.sessionrsp_;
}
inline ::device::SessionRsp* MgwMsg::mutable_sessionrsp() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.sessionRsp)
  return _internal_mutable_sessionrsp();
}

// .device.StartOutputStream startOutput = 23;
inline bool MgwMsg::_internal_has_startoutput() const {
  return Message_case() == kStartOutput;
}
inline bool MgwMsg::has_startoutput() const {
  return _internal_has_startoutput();
}
inline void MgwMsg::set_has_startoutput() {
  _oneof_case_[0] = kStartOutput;
}
inline ::device::StartOutputStream* MgwMsg::release_startoutput() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.startOutput)
  if (_internal_has_startoutput()) {
    clear_has_Message();
      ::device::StartOutputStream* temp = Message_.startoutput_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.startoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::StartOutputStream& MgwMsg::_internal_startoutput() const {
  return _internal_has_startoutput()
      ? *Message_.startoutput_
      : reinterpret_cast< ::device::StartOutputStream&>(::device::_StartOutputStream_default_instance_);
}
inline const ::device::StartOutputStream& MgwMsg::startoutput() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.startOutput)
  return _internal_startoutput();
}
inline ::device::StartOutputStream* MgwMsg::unsafe_arena_release_startoutput() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.startOutput)
  if (_internal_has_startoutput()) {
    clear_has_Message();
    ::device::StartOutputStream* temp = Message_.startoutput_;
    Message_.startoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_startoutput(::device::StartOutputStream* startoutput) {
  clear_Message();
  if (startoutput) {
    set_has_startoutput();
    Message_.startoutput_ = startoutput;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.startOutput)
}
inline ::device::StartOutputStream* MgwMsg::_internal_mutable_startoutput() {
  if (!_internal_has_startoutput()) {
    clear_Message();
    set_has_startoutput();
    Message_.startoutput_ = CreateMaybeMessage< ::device::StartOutputStream >(GetArena());
  }
  return Message_.startoutput_;
}
inline ::device::StartOutputStream* MgwMsg::mutable_startoutput() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.startOutput)
  return _internal_mutable_startoutput();
}

// .device.StopOutputStream stopOutput = 24;
inline bool MgwMsg::_internal_has_stopoutput() const {
  return Message_case() == kStopOutput;
}
inline bool MgwMsg::has_stopoutput() const {
  return _internal_has_stopoutput();
}
inline void MgwMsg::set_has_stopoutput() {
  _oneof_case_[0] = kStopOutput;
}
inline ::device::StopOutputStream* MgwMsg::release_stopoutput() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.stopOutput)
  if (_internal_has_stopoutput()) {
    clear_has_Message();
      ::device::StopOutputStream* temp = Message_.stopoutput_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.stopoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::StopOutputStream& MgwMsg::_internal_stopoutput() const {
  return _internal_has_stopoutput()
      ? *Message_.stopoutput_
      : reinterpret_cast< ::device::StopOutputStream&>(::device::_StopOutputStream_default_instance_);
}
inline const ::device::StopOutputStream& MgwMsg::stopoutput() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.stopOutput)
  return _internal_stopoutput();
}
inline ::device::StopOutputStream* MgwMsg::unsafe_arena_release_stopoutput() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.stopOutput)
  if (_internal_has_stopoutput()) {
    clear_has_Message();
    ::device::StopOutputStream* temp = Message_.stopoutput_;
    Message_.stopoutput_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_stopoutput(::device::StopOutputStream* stopoutput) {
  clear_Message();
  if (stopoutput) {
    set_has_stopoutput();
    Message_.stopoutput_ = stopoutput;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.stopOutput)
}
inline ::device::StopOutputStream* MgwMsg::_internal_mutable_stopoutput() {
  if (!_internal_has_stopoutput()) {
    clear_Message();
    set_has_stopoutput();
    Message_.stopoutput_ = CreateMaybeMessage< ::device::StopOutputStream >(GetArena());
  }
  return Message_.stopoutput_;
}
inline ::device::StopOutputStream* MgwMsg::mutable_stopoutput() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.stopOutput)
  return _internal_mutable_stopoutput();
}

// .device.OutputStreamStatus outputSta = 25;
inline bool MgwMsg::_internal_has_outputsta() const {
  return Message_case() == kOutputSta;
}
inline bool MgwMsg::has_outputsta() const {
  return _internal_has_outputsta();
}
inline void MgwMsg::set_has_outputsta() {
  _oneof_case_[0] = kOutputSta;
}
inline ::device::OutputStreamStatus* MgwMsg::release_outputsta() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.outputSta)
  if (_internal_has_outputsta()) {
    clear_has_Message();
      ::device::OutputStreamStatus* temp = Message_.outputsta_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.outputsta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::OutputStreamStatus& MgwMsg::_internal_outputsta() const {
  return _internal_has_outputsta()
      ? *Message_.outputsta_
      : reinterpret_cast< ::device::OutputStreamStatus&>(::device::_OutputStreamStatus_default_instance_);
}
inline const ::device::OutputStreamStatus& MgwMsg::outputsta() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.outputSta)
  return _internal_outputsta();
}
inline ::device::OutputStreamStatus* MgwMsg::unsafe_arena_release_outputsta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.outputSta)
  if (_internal_has_outputsta()) {
    clear_has_Message();
    ::device::OutputStreamStatus* temp = Message_.outputsta_;
    Message_.outputsta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_outputsta(::device::OutputStreamStatus* outputsta) {
  clear_Message();
  if (outputsta) {
    set_has_outputsta();
    Message_.outputsta_ = outputsta;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.outputSta)
}
inline ::device::OutputStreamStatus* MgwMsg::_internal_mutable_outputsta() {
  if (!_internal_has_outputsta()) {
    clear_Message();
    set_has_outputsta();
    Message_.outputsta_ = CreateMaybeMessage< ::device::OutputStreamStatus >(GetArena());
  }
  return Message_.outputsta_;
}
inline ::device::OutputStreamStatus* MgwMsg::mutable_outputsta() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.outputSta)
  return _internal_mutable_outputsta();
}

// .device.StopPushingStream stopPushing = 26;
inline bool MgwMsg::_internal_has_stoppushing() const {
  return Message_case() == kStopPushing;
}
inline bool MgwMsg::has_stoppushing() const {
  return _internal_has_stoppushing();
}
inline void MgwMsg::set_has_stoppushing() {
  _oneof_case_[0] = kStopPushing;
}
inline ::device::StopPushingStream* MgwMsg::release_stoppushing() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.stopPushing)
  if (_internal_has_stoppushing()) {
    clear_has_Message();
      ::device::StopPushingStream* temp = Message_.stoppushing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.stoppushing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::StopPushingStream& MgwMsg::_internal_stoppushing() const {
  return _internal_has_stoppushing()
      ? *Message_.stoppushing_
      : reinterpret_cast< ::device::StopPushingStream&>(::device::_StopPushingStream_default_instance_);
}
inline const ::device::StopPushingStream& MgwMsg::stoppushing() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.stopPushing)
  return _internal_stoppushing();
}
inline ::device::StopPushingStream* MgwMsg::unsafe_arena_release_stoppushing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.stopPushing)
  if (_internal_has_stoppushing()) {
    clear_has_Message();
    ::device::StopPushingStream* temp = Message_.stoppushing_;
    Message_.stoppushing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_stoppushing(::device::StopPushingStream* stoppushing) {
  clear_Message();
  if (stoppushing) {
    set_has_stoppushing();
    Message_.stoppushing_ = stoppushing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.stopPushing)
}
inline ::device::StopPushingStream* MgwMsg::_internal_mutable_stoppushing() {
  if (!_internal_has_stoppushing()) {
    clear_Message();
    set_has_stoppushing();
    Message_.stoppushing_ = CreateMaybeMessage< ::device::StopPushingStream >(GetArena());
  }
  return Message_.stoppushing_;
}
inline ::device::StopPushingStream* MgwMsg::mutable_stoppushing() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.stopPushing)
  return _internal_mutable_stoppushing();
}

// .device.SyncStatusReq syncReq = 27;
inline bool MgwMsg::_internal_has_syncreq() const {
  return Message_case() == kSyncReq;
}
inline bool MgwMsg::has_syncreq() const {
  return _internal_has_syncreq();
}
inline void MgwMsg::set_has_syncreq() {
  _oneof_case_[0] = kSyncReq;
}
inline ::device::SyncStatusReq* MgwMsg::release_syncreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.syncReq)
  if (_internal_has_syncreq()) {
    clear_has_Message();
      ::device::SyncStatusReq* temp = Message_.syncreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.syncreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::SyncStatusReq& MgwMsg::_internal_syncreq() const {
  return _internal_has_syncreq()
      ? *Message_.syncreq_
      : reinterpret_cast< ::device::SyncStatusReq&>(::device::_SyncStatusReq_default_instance_);
}
inline const ::device::SyncStatusReq& MgwMsg::syncreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.syncReq)
  return _internal_syncreq();
}
inline ::device::SyncStatusReq* MgwMsg::unsafe_arena_release_syncreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.syncReq)
  if (_internal_has_syncreq()) {
    clear_has_Message();
    ::device::SyncStatusReq* temp = Message_.syncreq_;
    Message_.syncreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_syncreq(::device::SyncStatusReq* syncreq) {
  clear_Message();
  if (syncreq) {
    set_has_syncreq();
    Message_.syncreq_ = syncreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.syncReq)
}
inline ::device::SyncStatusReq* MgwMsg::_internal_mutable_syncreq() {
  if (!_internal_has_syncreq()) {
    clear_Message();
    set_has_syncreq();
    Message_.syncreq_ = CreateMaybeMessage< ::device::SyncStatusReq >(GetArena());
  }
  return Message_.syncreq_;
}
inline ::device::SyncStatusReq* MgwMsg::mutable_syncreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.syncReq)
  return _internal_mutable_syncreq();
}

// .device.SyncStatusRsp syncRsp = 28;
inline bool MgwMsg::_internal_has_syncrsp() const {
  return Message_case() == kSyncRsp;
}
inline bool MgwMsg::has_syncrsp() const {
  return _internal_has_syncrsp();
}
inline void MgwMsg::set_has_syncrsp() {
  _oneof_case_[0] = kSyncRsp;
}
inline ::device::SyncStatusRsp* MgwMsg::release_syncrsp() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.syncRsp)
  if (_internal_has_syncrsp()) {
    clear_has_Message();
      ::device::SyncStatusRsp* temp = Message_.syncrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.syncrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::SyncStatusRsp& MgwMsg::_internal_syncrsp() const {
  return _internal_has_syncrsp()
      ? *Message_.syncrsp_
      : reinterpret_cast< ::device::SyncStatusRsp&>(::device::_SyncStatusRsp_default_instance_);
}
inline const ::device::SyncStatusRsp& MgwMsg::syncrsp() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.syncRsp)
  return _internal_syncrsp();
}
inline ::device::SyncStatusRsp* MgwMsg::unsafe_arena_release_syncrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.syncRsp)
  if (_internal_has_syncrsp()) {
    clear_has_Message();
    ::device::SyncStatusRsp* temp = Message_.syncrsp_;
    Message_.syncrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_syncrsp(::device::SyncStatusRsp* syncrsp) {
  clear_Message();
  if (syncrsp) {
    set_has_syncrsp();
    Message_.syncrsp_ = syncrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.syncRsp)
}
inline ::device::SyncStatusRsp* MgwMsg::_internal_mutable_syncrsp() {
  if (!_internal_has_syncrsp()) {
    clear_Message();
    set_has_syncrsp();
    Message_.syncrsp_ = CreateMaybeMessage< ::device::SyncStatusRsp >(GetArena());
  }
  return Message_.syncrsp_;
}
inline ::device::SyncStatusRsp* MgwMsg::mutable_syncrsp() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.syncRsp)
  return _internal_mutable_syncrsp();
}

// .device.ServerSessionReq serSessionReq = 29;
inline bool MgwMsg::_internal_has_sersessionreq() const {
  return Message_case() == kSerSessionReq;
}
inline bool MgwMsg::has_sersessionreq() const {
  return _internal_has_sersessionreq();
}
inline void MgwMsg::set_has_sersessionreq() {
  _oneof_case_[0] = kSerSessionReq;
}
inline ::device::ServerSessionReq* MgwMsg::release_sersessionreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.serSessionReq)
  if (_internal_has_sersessionreq()) {
    clear_has_Message();
      ::device::ServerSessionReq* temp = Message_.sersessionreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.sersessionreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::ServerSessionReq& MgwMsg::_internal_sersessionreq() const {
  return _internal_has_sersessionreq()
      ? *Message_.sersessionreq_
      : reinterpret_cast< ::device::ServerSessionReq&>(::device::_ServerSessionReq_default_instance_);
}
inline const ::device::ServerSessionReq& MgwMsg::sersessionreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.serSessionReq)
  return _internal_sersessionreq();
}
inline ::device::ServerSessionReq* MgwMsg::unsafe_arena_release_sersessionreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.serSessionReq)
  if (_internal_has_sersessionreq()) {
    clear_has_Message();
    ::device::ServerSessionReq* temp = Message_.sersessionreq_;
    Message_.sersessionreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_sersessionreq(::device::ServerSessionReq* sersessionreq) {
  clear_Message();
  if (sersessionreq) {
    set_has_sersessionreq();
    Message_.sersessionreq_ = sersessionreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.serSessionReq)
}
inline ::device::ServerSessionReq* MgwMsg::_internal_mutable_sersessionreq() {
  if (!_internal_has_sersessionreq()) {
    clear_Message();
    set_has_sersessionreq();
    Message_.sersessionreq_ = CreateMaybeMessage< ::device::ServerSessionReq >(GetArena());
  }
  return Message_.sersessionreq_;
}
inline ::device::ServerSessionReq* MgwMsg::mutable_sersessionreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.serSessionReq)
  return _internal_mutable_sersessionreq();
}

// .device.ServerSessionRsp serSessionRsp = 30;
inline bool MgwMsg::_internal_has_sersessionrsp() const {
  return Message_case() == kSerSessionRsp;
}
inline bool MgwMsg::has_sersessionrsp() const {
  return _internal_has_sersessionrsp();
}
inline void MgwMsg::set_has_sersessionrsp() {
  _oneof_case_[0] = kSerSessionRsp;
}
inline ::device::ServerSessionRsp* MgwMsg::release_sersessionrsp() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.serSessionRsp)
  if (_internal_has_sersessionrsp()) {
    clear_has_Message();
      ::device::ServerSessionRsp* temp = Message_.sersessionrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.sersessionrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::ServerSessionRsp& MgwMsg::_internal_sersessionrsp() const {
  return _internal_has_sersessionrsp()
      ? *Message_.sersessionrsp_
      : reinterpret_cast< ::device::ServerSessionRsp&>(::device::_ServerSessionRsp_default_instance_);
}
inline const ::device::ServerSessionRsp& MgwMsg::sersessionrsp() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.serSessionRsp)
  return _internal_sersessionrsp();
}
inline ::device::ServerSessionRsp* MgwMsg::unsafe_arena_release_sersessionrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.serSessionRsp)
  if (_internal_has_sersessionrsp()) {
    clear_has_Message();
    ::device::ServerSessionRsp* temp = Message_.sersessionrsp_;
    Message_.sersessionrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_sersessionrsp(::device::ServerSessionRsp* sersessionrsp) {
  clear_Message();
  if (sersessionrsp) {
    set_has_sersessionrsp();
    Message_.sersessionrsp_ = sersessionrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.serSessionRsp)
}
inline ::device::ServerSessionRsp* MgwMsg::_internal_mutable_sersessionrsp() {
  if (!_internal_has_sersessionrsp()) {
    clear_Message();
    set_has_sersessionrsp();
    Message_.sersessionrsp_ = CreateMaybeMessage< ::device::ServerSessionRsp >(GetArena());
  }
  return Message_.sersessionrsp_;
}
inline ::device::ServerSessionRsp* MgwMsg::mutable_sersessionrsp() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.serSessionRsp)
  return _internal_mutable_sersessionrsp();
}

// .device.QuerySource querySource = 31;
inline bool MgwMsg::_internal_has_querysource() const {
  return Message_case() == kQuerySource;
}
inline bool MgwMsg::has_querysource() const {
  return _internal_has_querysource();
}
inline void MgwMsg::set_has_querysource() {
  _oneof_case_[0] = kQuerySource;
}
inline ::device::QuerySource* MgwMsg::release_querysource() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.querySource)
  if (_internal_has_querysource()) {
    clear_has_Message();
      ::device::QuerySource* temp = Message_.querysource_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.querysource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::QuerySource& MgwMsg::_internal_querysource() const {
  return _internal_has_querysource()
      ? *Message_.querysource_
      : reinterpret_cast< ::device::QuerySource&>(::device::_QuerySource_default_instance_);
}
inline const ::device::QuerySource& MgwMsg::querysource() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.querySource)
  return _internal_querysource();
}
inline ::device::QuerySource* MgwMsg::unsafe_arena_release_querysource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.querySource)
  if (_internal_has_querysource()) {
    clear_has_Message();
    ::device::QuerySource* temp = Message_.querysource_;
    Message_.querysource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_querysource(::device::QuerySource* querysource) {
  clear_Message();
  if (querysource) {
    set_has_querysource();
    Message_.querysource_ = querysource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.querySource)
}
inline ::device::QuerySource* MgwMsg::_internal_mutable_querysource() {
  if (!_internal_has_querysource()) {
    clear_Message();
    set_has_querysource();
    Message_.querysource_ = CreateMaybeMessage< ::device::QuerySource >(GetArena());
  }
  return Message_.querysource_;
}
inline ::device::QuerySource* MgwMsg::mutable_querysource() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.querySource)
  return _internal_mutable_querysource();
}

// .device.SetPullAttr setPullAttr = 32;
inline bool MgwMsg::_internal_has_setpullattr() const {
  return Message_case() == kSetPullAttr;
}
inline bool MgwMsg::has_setpullattr() const {
  return _internal_has_setpullattr();
}
inline void MgwMsg::set_has_setpullattr() {
  _oneof_case_[0] = kSetPullAttr;
}
inline ::device::SetPullAttr* MgwMsg::release_setpullattr() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.setPullAttr)
  if (_internal_has_setpullattr()) {
    clear_has_Message();
      ::device::SetPullAttr* temp = Message_.setpullattr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.setpullattr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::SetPullAttr& MgwMsg::_internal_setpullattr() const {
  return _internal_has_setpullattr()
      ? *Message_.setpullattr_
      : reinterpret_cast< ::device::SetPullAttr&>(::device::_SetPullAttr_default_instance_);
}
inline const ::device::SetPullAttr& MgwMsg::setpullattr() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.setPullAttr)
  return _internal_setpullattr();
}
inline ::device::SetPullAttr* MgwMsg::unsafe_arena_release_setpullattr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.setPullAttr)
  if (_internal_has_setpullattr()) {
    clear_has_Message();
    ::device::SetPullAttr* temp = Message_.setpullattr_;
    Message_.setpullattr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_setpullattr(::device::SetPullAttr* setpullattr) {
  clear_Message();
  if (setpullattr) {
    set_has_setpullattr();
    Message_.setpullattr_ = setpullattr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.setPullAttr)
}
inline ::device::SetPullAttr* MgwMsg::_internal_mutable_setpullattr() {
  if (!_internal_has_setpullattr()) {
    clear_Message();
    set_has_setpullattr();
    Message_.setpullattr_ = CreateMaybeMessage< ::device::SetPullAttr >(GetArena());
  }
  return Message_.setpullattr_;
}
inline ::device::SetPullAttr* MgwMsg::mutable_setpullattr() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.setPullAttr)
  return _internal_mutable_setpullattr();
}

// .device.PushStreamReq pushStreamReq = 33;
inline bool MgwMsg::_internal_has_pushstreamreq() const {
  return Message_case() == kPushStreamReq;
}
inline bool MgwMsg::has_pushstreamreq() const {
  return _internal_has_pushstreamreq();
}
inline void MgwMsg::set_has_pushstreamreq() {
  _oneof_case_[0] = kPushStreamReq;
}
inline ::device::PushStreamReq* MgwMsg::release_pushstreamreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.pushStreamReq)
  if (_internal_has_pushstreamreq()) {
    clear_has_Message();
      ::device::PushStreamReq* temp = Message_.pushstreamreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.pushstreamreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::PushStreamReq& MgwMsg::_internal_pushstreamreq() const {
  return _internal_has_pushstreamreq()
      ? *Message_.pushstreamreq_
      : reinterpret_cast< ::device::PushStreamReq&>(::device::_PushStreamReq_default_instance_);
}
inline const ::device::PushStreamReq& MgwMsg::pushstreamreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.pushStreamReq)
  return _internal_pushstreamreq();
}
inline ::device::PushStreamReq* MgwMsg::unsafe_arena_release_pushstreamreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.pushStreamReq)
  if (_internal_has_pushstreamreq()) {
    clear_has_Message();
    ::device::PushStreamReq* temp = Message_.pushstreamreq_;
    Message_.pushstreamreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_pushstreamreq(::device::PushStreamReq* pushstreamreq) {
  clear_Message();
  if (pushstreamreq) {
    set_has_pushstreamreq();
    Message_.pushstreamreq_ = pushstreamreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.pushStreamReq)
}
inline ::device::PushStreamReq* MgwMsg::_internal_mutable_pushstreamreq() {
  if (!_internal_has_pushstreamreq()) {
    clear_Message();
    set_has_pushstreamreq();
    Message_.pushstreamreq_ = CreateMaybeMessage< ::device::PushStreamReq >(GetArena());
  }
  return Message_.pushstreamreq_;
}
inline ::device::PushStreamReq* MgwMsg::mutable_pushstreamreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.pushStreamReq)
  return _internal_mutable_pushstreamreq();
}

// .device.ServerKeepAlive keepAlive = 34;
inline bool MgwMsg::_internal_has_keepalive() const {
  return Message_case() == kKeepAlive;
}
inline bool MgwMsg::has_keepalive() const {
  return _internal_has_keepalive();
}
inline void MgwMsg::set_has_keepalive() {
  _oneof_case_[0] = kKeepAlive;
}
inline ::device::ServerKeepAlive* MgwMsg::release_keepalive() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.keepAlive)
  if (_internal_has_keepalive()) {
    clear_has_Message();
      ::device::ServerKeepAlive* temp = Message_.keepalive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.keepalive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::device::ServerKeepAlive& MgwMsg::_internal_keepalive() const {
  return _internal_has_keepalive()
      ? *Message_.keepalive_
      : reinterpret_cast< ::device::ServerKeepAlive&>(::device::_ServerKeepAlive_default_instance_);
}
inline const ::device::ServerKeepAlive& MgwMsg::keepalive() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.keepAlive)
  return _internal_keepalive();
}
inline ::device::ServerKeepAlive* MgwMsg::unsafe_arena_release_keepalive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.keepAlive)
  if (_internal_has_keepalive()) {
    clear_has_Message();
    ::device::ServerKeepAlive* temp = Message_.keepalive_;
    Message_.keepalive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_keepalive(::device::ServerKeepAlive* keepalive) {
  clear_Message();
  if (keepalive) {
    set_has_keepalive();
    Message_.keepalive_ = keepalive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.keepAlive)
}
inline ::device::ServerKeepAlive* MgwMsg::_internal_mutable_keepalive() {
  if (!_internal_has_keepalive()) {
    clear_Message();
    set_has_keepalive();
    Message_.keepalive_ = CreateMaybeMessage< ::device::ServerKeepAlive >(GetArena());
  }
  return Message_.keepalive_;
}
inline ::device::ServerKeepAlive* MgwMsg::mutable_keepalive() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.keepAlive)
  return _internal_mutable_keepalive();
}

// .u727.SetDevBlacklist setBlackList = 1000;
inline bool MgwMsg::_internal_has_setblacklist() const {
  return Message_case() == kSetBlackList;
}
inline bool MgwMsg::has_setblacklist() const {
  return _internal_has_setblacklist();
}
inline void MgwMsg::set_has_setblacklist() {
  _oneof_case_[0] = kSetBlackList;
}
inline ::u727::SetDevBlacklist* MgwMsg::release_setblacklist() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.setBlackList)
  if (_internal_has_setblacklist()) {
    clear_has_Message();
      ::u727::SetDevBlacklist* temp = Message_.setblacklist_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.setblacklist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::SetDevBlacklist& MgwMsg::_internal_setblacklist() const {
  return _internal_has_setblacklist()
      ? *Message_.setblacklist_
      : reinterpret_cast< ::u727::SetDevBlacklist&>(::u727::_SetDevBlacklist_default_instance_);
}
inline const ::u727::SetDevBlacklist& MgwMsg::setblacklist() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.setBlackList)
  return _internal_setblacklist();
}
inline ::u727::SetDevBlacklist* MgwMsg::unsafe_arena_release_setblacklist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.setBlackList)
  if (_internal_has_setblacklist()) {
    clear_has_Message();
    ::u727::SetDevBlacklist* temp = Message_.setblacklist_;
    Message_.setblacklist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_setblacklist(::u727::SetDevBlacklist* setblacklist) {
  clear_Message();
  if (setblacklist) {
    set_has_setblacklist();
    Message_.setblacklist_ = setblacklist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.setBlackList)
}
inline ::u727::SetDevBlacklist* MgwMsg::_internal_mutable_setblacklist() {
  if (!_internal_has_setblacklist()) {
    clear_Message();
    set_has_setblacklist();
    Message_.setblacklist_ = CreateMaybeMessage< ::u727::SetDevBlacklist >(GetArena());
  }
  return Message_.setblacklist_;
}
inline ::u727::SetDevBlacklist* MgwMsg::mutable_setblacklist() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.setBlackList)
  return _internal_mutable_setblacklist();
}

// .u727.SetLocalSvcPortReq setSvcPortReq = 1001;
inline bool MgwMsg::_internal_has_setsvcportreq() const {
  return Message_case() == kSetSvcPortReq;
}
inline bool MgwMsg::has_setsvcportreq() const {
  return _internal_has_setsvcportreq();
}
inline void MgwMsg::set_has_setsvcportreq() {
  _oneof_case_[0] = kSetSvcPortReq;
}
inline ::u727::SetLocalSvcPortReq* MgwMsg::release_setsvcportreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.setSvcPortReq)
  if (_internal_has_setsvcportreq()) {
    clear_has_Message();
      ::u727::SetLocalSvcPortReq* temp = Message_.setsvcportreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.setsvcportreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::SetLocalSvcPortReq& MgwMsg::_internal_setsvcportreq() const {
  return _internal_has_setsvcportreq()
      ? *Message_.setsvcportreq_
      : reinterpret_cast< ::u727::SetLocalSvcPortReq&>(::u727::_SetLocalSvcPortReq_default_instance_);
}
inline const ::u727::SetLocalSvcPortReq& MgwMsg::setsvcportreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.setSvcPortReq)
  return _internal_setsvcportreq();
}
inline ::u727::SetLocalSvcPortReq* MgwMsg::unsafe_arena_release_setsvcportreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.setSvcPortReq)
  if (_internal_has_setsvcportreq()) {
    clear_has_Message();
    ::u727::SetLocalSvcPortReq* temp = Message_.setsvcportreq_;
    Message_.setsvcportreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_setsvcportreq(::u727::SetLocalSvcPortReq* setsvcportreq) {
  clear_Message();
  if (setsvcportreq) {
    set_has_setsvcportreq();
    Message_.setsvcportreq_ = setsvcportreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.setSvcPortReq)
}
inline ::u727::SetLocalSvcPortReq* MgwMsg::_internal_mutable_setsvcportreq() {
  if (!_internal_has_setsvcportreq()) {
    clear_Message();
    set_has_setsvcportreq();
    Message_.setsvcportreq_ = CreateMaybeMessage< ::u727::SetLocalSvcPortReq >(GetArena());
  }
  return Message_.setsvcportreq_;
}
inline ::u727::SetLocalSvcPortReq* MgwMsg::mutable_setsvcportreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.setSvcPortReq)
  return _internal_mutable_setsvcportreq();
}

// .u727.SetLocalSvcPortReply setSvcPortReply = 1002;
inline bool MgwMsg::_internal_has_setsvcportreply() const {
  return Message_case() == kSetSvcPortReply;
}
inline bool MgwMsg::has_setsvcportreply() const {
  return _internal_has_setsvcportreply();
}
inline void MgwMsg::set_has_setsvcportreply() {
  _oneof_case_[0] = kSetSvcPortReply;
}
inline ::u727::SetLocalSvcPortReply* MgwMsg::release_setsvcportreply() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.setSvcPortReply)
  if (_internal_has_setsvcportreply()) {
    clear_has_Message();
      ::u727::SetLocalSvcPortReply* temp = Message_.setsvcportreply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.setsvcportreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::SetLocalSvcPortReply& MgwMsg::_internal_setsvcportreply() const {
  return _internal_has_setsvcportreply()
      ? *Message_.setsvcportreply_
      : reinterpret_cast< ::u727::SetLocalSvcPortReply&>(::u727::_SetLocalSvcPortReply_default_instance_);
}
inline const ::u727::SetLocalSvcPortReply& MgwMsg::setsvcportreply() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.setSvcPortReply)
  return _internal_setsvcportreply();
}
inline ::u727::SetLocalSvcPortReply* MgwMsg::unsafe_arena_release_setsvcportreply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.setSvcPortReply)
  if (_internal_has_setsvcportreply()) {
    clear_has_Message();
    ::u727::SetLocalSvcPortReply* temp = Message_.setsvcportreply_;
    Message_.setsvcportreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_setsvcportreply(::u727::SetLocalSvcPortReply* setsvcportreply) {
  clear_Message();
  if (setsvcportreply) {
    set_has_setsvcportreply();
    Message_.setsvcportreply_ = setsvcportreply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.setSvcPortReply)
}
inline ::u727::SetLocalSvcPortReply* MgwMsg::_internal_mutable_setsvcportreply() {
  if (!_internal_has_setsvcportreply()) {
    clear_Message();
    set_has_setsvcportreply();
    Message_.setsvcportreply_ = CreateMaybeMessage< ::u727::SetLocalSvcPortReply >(GetArena());
  }
  return Message_.setsvcportreply_;
}
inline ::u727::SetLocalSvcPortReply* MgwMsg::mutable_setsvcportreply() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.setSvcPortReply)
  return _internal_mutable_setsvcportreply();
}

// .u727.GetLocalSvcPortReq getSvcPortReq = 1003;
inline bool MgwMsg::_internal_has_getsvcportreq() const {
  return Message_case() == kGetSvcPortReq;
}
inline bool MgwMsg::has_getsvcportreq() const {
  return _internal_has_getsvcportreq();
}
inline void MgwMsg::set_has_getsvcportreq() {
  _oneof_case_[0] = kGetSvcPortReq;
}
inline ::u727::GetLocalSvcPortReq* MgwMsg::release_getsvcportreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.getSvcPortReq)
  if (_internal_has_getsvcportreq()) {
    clear_has_Message();
      ::u727::GetLocalSvcPortReq* temp = Message_.getsvcportreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.getsvcportreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::GetLocalSvcPortReq& MgwMsg::_internal_getsvcportreq() const {
  return _internal_has_getsvcportreq()
      ? *Message_.getsvcportreq_
      : reinterpret_cast< ::u727::GetLocalSvcPortReq&>(::u727::_GetLocalSvcPortReq_default_instance_);
}
inline const ::u727::GetLocalSvcPortReq& MgwMsg::getsvcportreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.getSvcPortReq)
  return _internal_getsvcportreq();
}
inline ::u727::GetLocalSvcPortReq* MgwMsg::unsafe_arena_release_getsvcportreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.getSvcPortReq)
  if (_internal_has_getsvcportreq()) {
    clear_has_Message();
    ::u727::GetLocalSvcPortReq* temp = Message_.getsvcportreq_;
    Message_.getsvcportreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_getsvcportreq(::u727::GetLocalSvcPortReq* getsvcportreq) {
  clear_Message();
  if (getsvcportreq) {
    set_has_getsvcportreq();
    Message_.getsvcportreq_ = getsvcportreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.getSvcPortReq)
}
inline ::u727::GetLocalSvcPortReq* MgwMsg::_internal_mutable_getsvcportreq() {
  if (!_internal_has_getsvcportreq()) {
    clear_Message();
    set_has_getsvcportreq();
    Message_.getsvcportreq_ = CreateMaybeMessage< ::u727::GetLocalSvcPortReq >(GetArena());
  }
  return Message_.getsvcportreq_;
}
inline ::u727::GetLocalSvcPortReq* MgwMsg::mutable_getsvcportreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.getSvcPortReq)
  return _internal_mutable_getsvcportreq();
}

// .u727.GetLocalSvcPortReply getSvcPortReply = 1004;
inline bool MgwMsg::_internal_has_getsvcportreply() const {
  return Message_case() == kGetSvcPortReply;
}
inline bool MgwMsg::has_getsvcportreply() const {
  return _internal_has_getsvcportreply();
}
inline void MgwMsg::set_has_getsvcportreply() {
  _oneof_case_[0] = kGetSvcPortReply;
}
inline ::u727::GetLocalSvcPortReply* MgwMsg::release_getsvcportreply() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.getSvcPortReply)
  if (_internal_has_getsvcportreply()) {
    clear_has_Message();
      ::u727::GetLocalSvcPortReply* temp = Message_.getsvcportreply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.getsvcportreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::GetLocalSvcPortReply& MgwMsg::_internal_getsvcportreply() const {
  return _internal_has_getsvcportreply()
      ? *Message_.getsvcportreply_
      : reinterpret_cast< ::u727::GetLocalSvcPortReply&>(::u727::_GetLocalSvcPortReply_default_instance_);
}
inline const ::u727::GetLocalSvcPortReply& MgwMsg::getsvcportreply() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.getSvcPortReply)
  return _internal_getsvcportreply();
}
inline ::u727::GetLocalSvcPortReply* MgwMsg::unsafe_arena_release_getsvcportreply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.getSvcPortReply)
  if (_internal_has_getsvcportreply()) {
    clear_has_Message();
    ::u727::GetLocalSvcPortReply* temp = Message_.getsvcportreply_;
    Message_.getsvcportreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_getsvcportreply(::u727::GetLocalSvcPortReply* getsvcportreply) {
  clear_Message();
  if (getsvcportreply) {
    set_has_getsvcportreply();
    Message_.getsvcportreply_ = getsvcportreply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.getSvcPortReply)
}
inline ::u727::GetLocalSvcPortReply* MgwMsg::_internal_mutable_getsvcportreply() {
  if (!_internal_has_getsvcportreply()) {
    clear_Message();
    set_has_getsvcportreply();
    Message_.getsvcportreply_ = CreateMaybeMessage< ::u727::GetLocalSvcPortReply >(GetArena());
  }
  return Message_.getsvcportreply_;
}
inline ::u727::GetLocalSvcPortReply* MgwMsg::mutable_getsvcportreply() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.getSvcPortReply)
  return _internal_mutable_getsvcportreply();
}

// .u727.StartStreamReq startStreamReq = 1005;
inline bool MgwMsg::_internal_has_startstreamreq() const {
  return Message_case() == kStartStreamReq;
}
inline bool MgwMsg::has_startstreamreq() const {
  return _internal_has_startstreamreq();
}
inline void MgwMsg::set_has_startstreamreq() {
  _oneof_case_[0] = kStartStreamReq;
}
inline ::u727::StartStreamReq* MgwMsg::release_startstreamreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.startStreamReq)
  if (_internal_has_startstreamreq()) {
    clear_has_Message();
      ::u727::StartStreamReq* temp = Message_.startstreamreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.startstreamreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::StartStreamReq& MgwMsg::_internal_startstreamreq() const {
  return _internal_has_startstreamreq()
      ? *Message_.startstreamreq_
      : reinterpret_cast< ::u727::StartStreamReq&>(::u727::_StartStreamReq_default_instance_);
}
inline const ::u727::StartStreamReq& MgwMsg::startstreamreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.startStreamReq)
  return _internal_startstreamreq();
}
inline ::u727::StartStreamReq* MgwMsg::unsafe_arena_release_startstreamreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.startStreamReq)
  if (_internal_has_startstreamreq()) {
    clear_has_Message();
    ::u727::StartStreamReq* temp = Message_.startstreamreq_;
    Message_.startstreamreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_startstreamreq(::u727::StartStreamReq* startstreamreq) {
  clear_Message();
  if (startstreamreq) {
    set_has_startstreamreq();
    Message_.startstreamreq_ = startstreamreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.startStreamReq)
}
inline ::u727::StartStreamReq* MgwMsg::_internal_mutable_startstreamreq() {
  if (!_internal_has_startstreamreq()) {
    clear_Message();
    set_has_startstreamreq();
    Message_.startstreamreq_ = CreateMaybeMessage< ::u727::StartStreamReq >(GetArena());
  }
  return Message_.startstreamreq_;
}
inline ::u727::StartStreamReq* MgwMsg::mutable_startstreamreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.startStreamReq)
  return _internal_mutable_startstreamreq();
}

// .u727.StartStreamReply startStreamReply = 1006;
inline bool MgwMsg::_internal_has_startstreamreply() const {
  return Message_case() == kStartStreamReply;
}
inline bool MgwMsg::has_startstreamreply() const {
  return _internal_has_startstreamreply();
}
inline void MgwMsg::set_has_startstreamreply() {
  _oneof_case_[0] = kStartStreamReply;
}
inline ::u727::StartStreamReply* MgwMsg::release_startstreamreply() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.startStreamReply)
  if (_internal_has_startstreamreply()) {
    clear_has_Message();
      ::u727::StartStreamReply* temp = Message_.startstreamreply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.startstreamreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::StartStreamReply& MgwMsg::_internal_startstreamreply() const {
  return _internal_has_startstreamreply()
      ? *Message_.startstreamreply_
      : reinterpret_cast< ::u727::StartStreamReply&>(::u727::_StartStreamReply_default_instance_);
}
inline const ::u727::StartStreamReply& MgwMsg::startstreamreply() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.startStreamReply)
  return _internal_startstreamreply();
}
inline ::u727::StartStreamReply* MgwMsg::unsafe_arena_release_startstreamreply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.startStreamReply)
  if (_internal_has_startstreamreply()) {
    clear_has_Message();
    ::u727::StartStreamReply* temp = Message_.startstreamreply_;
    Message_.startstreamreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_startstreamreply(::u727::StartStreamReply* startstreamreply) {
  clear_Message();
  if (startstreamreply) {
    set_has_startstreamreply();
    Message_.startstreamreply_ = startstreamreply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.startStreamReply)
}
inline ::u727::StartStreamReply* MgwMsg::_internal_mutable_startstreamreply() {
  if (!_internal_has_startstreamreply()) {
    clear_Message();
    set_has_startstreamreply();
    Message_.startstreamreply_ = CreateMaybeMessage< ::u727::StartStreamReply >(GetArena());
  }
  return Message_.startstreamreply_;
}
inline ::u727::StartStreamReply* MgwMsg::mutable_startstreamreply() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.startStreamReply)
  return _internal_mutable_startstreamreply();
}

// .u727.StopStreamReq stopStream = 1007;
inline bool MgwMsg::_internal_has_stopstream() const {
  return Message_case() == kStopStream;
}
inline bool MgwMsg::has_stopstream() const {
  return _internal_has_stopstream();
}
inline void MgwMsg::set_has_stopstream() {
  _oneof_case_[0] = kStopStream;
}
inline ::u727::StopStreamReq* MgwMsg::release_stopstream() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.stopStream)
  if (_internal_has_stopstream()) {
    clear_has_Message();
      ::u727::StopStreamReq* temp = Message_.stopstream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.stopstream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::StopStreamReq& MgwMsg::_internal_stopstream() const {
  return _internal_has_stopstream()
      ? *Message_.stopstream_
      : reinterpret_cast< ::u727::StopStreamReq&>(::u727::_StopStreamReq_default_instance_);
}
inline const ::u727::StopStreamReq& MgwMsg::stopstream() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.stopStream)
  return _internal_stopstream();
}
inline ::u727::StopStreamReq* MgwMsg::unsafe_arena_release_stopstream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.stopStream)
  if (_internal_has_stopstream()) {
    clear_has_Message();
    ::u727::StopStreamReq* temp = Message_.stopstream_;
    Message_.stopstream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_stopstream(::u727::StopStreamReq* stopstream) {
  clear_Message();
  if (stopstream) {
    set_has_stopstream();
    Message_.stopstream_ = stopstream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.stopStream)
}
inline ::u727::StopStreamReq* MgwMsg::_internal_mutable_stopstream() {
  if (!_internal_has_stopstream()) {
    clear_Message();
    set_has_stopstream();
    Message_.stopstream_ = CreateMaybeMessage< ::u727::StopStreamReq >(GetArena());
  }
  return Message_.stopstream_;
}
inline ::u727::StopStreamReq* MgwMsg::mutable_stopstream() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.stopStream)
  return _internal_mutable_stopstream();
}

// .u727.MgwDevOnlineNotify devOnline = 1008;
inline bool MgwMsg::_internal_has_devonline() const {
  return Message_case() == kDevOnline;
}
inline bool MgwMsg::has_devonline() const {
  return _internal_has_devonline();
}
inline void MgwMsg::set_has_devonline() {
  _oneof_case_[0] = kDevOnline;
}
inline ::u727::MgwDevOnlineNotify* MgwMsg::release_devonline() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.devOnline)
  if (_internal_has_devonline()) {
    clear_has_Message();
      ::u727::MgwDevOnlineNotify* temp = Message_.devonline_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.devonline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::MgwDevOnlineNotify& MgwMsg::_internal_devonline() const {
  return _internal_has_devonline()
      ? *Message_.devonline_
      : reinterpret_cast< ::u727::MgwDevOnlineNotify&>(::u727::_MgwDevOnlineNotify_default_instance_);
}
inline const ::u727::MgwDevOnlineNotify& MgwMsg::devonline() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.devOnline)
  return _internal_devonline();
}
inline ::u727::MgwDevOnlineNotify* MgwMsg::unsafe_arena_release_devonline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.devOnline)
  if (_internal_has_devonline()) {
    clear_has_Message();
    ::u727::MgwDevOnlineNotify* temp = Message_.devonline_;
    Message_.devonline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_devonline(::u727::MgwDevOnlineNotify* devonline) {
  clear_Message();
  if (devonline) {
    set_has_devonline();
    Message_.devonline_ = devonline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.devOnline)
}
inline ::u727::MgwDevOnlineNotify* MgwMsg::_internal_mutable_devonline() {
  if (!_internal_has_devonline()) {
    clear_Message();
    set_has_devonline();
    Message_.devonline_ = CreateMaybeMessage< ::u727::MgwDevOnlineNotify >(GetArena());
  }
  return Message_.devonline_;
}
inline ::u727::MgwDevOnlineNotify* MgwMsg::mutable_devonline() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.devOnline)
  return _internal_mutable_devonline();
}

// .u727.MgwDevOfflineNotify devOffline = 1009;
inline bool MgwMsg::_internal_has_devoffline() const {
  return Message_case() == kDevOffline;
}
inline bool MgwMsg::has_devoffline() const {
  return _internal_has_devoffline();
}
inline void MgwMsg::set_has_devoffline() {
  _oneof_case_[0] = kDevOffline;
}
inline ::u727::MgwDevOfflineNotify* MgwMsg::release_devoffline() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.devOffline)
  if (_internal_has_devoffline()) {
    clear_has_Message();
      ::u727::MgwDevOfflineNotify* temp = Message_.devoffline_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.devoffline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::MgwDevOfflineNotify& MgwMsg::_internal_devoffline() const {
  return _internal_has_devoffline()
      ? *Message_.devoffline_
      : reinterpret_cast< ::u727::MgwDevOfflineNotify&>(::u727::_MgwDevOfflineNotify_default_instance_);
}
inline const ::u727::MgwDevOfflineNotify& MgwMsg::devoffline() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.devOffline)
  return _internal_devoffline();
}
inline ::u727::MgwDevOfflineNotify* MgwMsg::unsafe_arena_release_devoffline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.devOffline)
  if (_internal_has_devoffline()) {
    clear_has_Message();
    ::u727::MgwDevOfflineNotify* temp = Message_.devoffline_;
    Message_.devoffline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_devoffline(::u727::MgwDevOfflineNotify* devoffline) {
  clear_Message();
  if (devoffline) {
    set_has_devoffline();
    Message_.devoffline_ = devoffline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.devOffline)
}
inline ::u727::MgwDevOfflineNotify* MgwMsg::_internal_mutable_devoffline() {
  if (!_internal_has_devoffline()) {
    clear_Message();
    set_has_devoffline();
    Message_.devoffline_ = CreateMaybeMessage< ::u727::MgwDevOfflineNotify >(GetArena());
  }
  return Message_.devoffline_;
}
inline ::u727::MgwDevOfflineNotify* MgwMsg::mutable_devoffline() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.devOffline)
  return _internal_mutable_devoffline();
}

// .u727.StreamStatusNotify streamStatus = 1010;
inline bool MgwMsg::_internal_has_streamstatus() const {
  return Message_case() == kStreamStatus;
}
inline bool MgwMsg::has_streamstatus() const {
  return _internal_has_streamstatus();
}
inline void MgwMsg::set_has_streamstatus() {
  _oneof_case_[0] = kStreamStatus;
}
inline ::u727::StreamStatusNotify* MgwMsg::release_streamstatus() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.streamStatus)
  if (_internal_has_streamstatus()) {
    clear_has_Message();
      ::u727::StreamStatusNotify* temp = Message_.streamstatus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.streamstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::StreamStatusNotify& MgwMsg::_internal_streamstatus() const {
  return _internal_has_streamstatus()
      ? *Message_.streamstatus_
      : reinterpret_cast< ::u727::StreamStatusNotify&>(::u727::_StreamStatusNotify_default_instance_);
}
inline const ::u727::StreamStatusNotify& MgwMsg::streamstatus() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.streamStatus)
  return _internal_streamstatus();
}
inline ::u727::StreamStatusNotify* MgwMsg::unsafe_arena_release_streamstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.streamStatus)
  if (_internal_has_streamstatus()) {
    clear_has_Message();
    ::u727::StreamStatusNotify* temp = Message_.streamstatus_;
    Message_.streamstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_streamstatus(::u727::StreamStatusNotify* streamstatus) {
  clear_Message();
  if (streamstatus) {
    set_has_streamstatus();
    Message_.streamstatus_ = streamstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.streamStatus)
}
inline ::u727::StreamStatusNotify* MgwMsg::_internal_mutable_streamstatus() {
  if (!_internal_has_streamstatus()) {
    clear_Message();
    set_has_streamstatus();
    Message_.streamstatus_ = CreateMaybeMessage< ::u727::StreamStatusNotify >(GetArena());
  }
  return Message_.streamstatus_;
}
inline ::u727::StreamStatusNotify* MgwMsg::mutable_streamstatus() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.streamStatus)
  return _internal_mutable_streamstatus();
}

// .u727.DevStartStreamNotify devStartStreamNotify = 1011;
inline bool MgwMsg::_internal_has_devstartstreamnotify() const {
  return Message_case() == kDevStartStreamNotify;
}
inline bool MgwMsg::has_devstartstreamnotify() const {
  return _internal_has_devstartstreamnotify();
}
inline void MgwMsg::set_has_devstartstreamnotify() {
  _oneof_case_[0] = kDevStartStreamNotify;
}
inline ::u727::DevStartStreamNotify* MgwMsg::release_devstartstreamnotify() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.devStartStreamNotify)
  if (_internal_has_devstartstreamnotify()) {
    clear_has_Message();
      ::u727::DevStartStreamNotify* temp = Message_.devstartstreamnotify_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.devstartstreamnotify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::DevStartStreamNotify& MgwMsg::_internal_devstartstreamnotify() const {
  return _internal_has_devstartstreamnotify()
      ? *Message_.devstartstreamnotify_
      : reinterpret_cast< ::u727::DevStartStreamNotify&>(::u727::_DevStartStreamNotify_default_instance_);
}
inline const ::u727::DevStartStreamNotify& MgwMsg::devstartstreamnotify() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.devStartStreamNotify)
  return _internal_devstartstreamnotify();
}
inline ::u727::DevStartStreamNotify* MgwMsg::unsafe_arena_release_devstartstreamnotify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.devStartStreamNotify)
  if (_internal_has_devstartstreamnotify()) {
    clear_has_Message();
    ::u727::DevStartStreamNotify* temp = Message_.devstartstreamnotify_;
    Message_.devstartstreamnotify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_devstartstreamnotify(::u727::DevStartStreamNotify* devstartstreamnotify) {
  clear_Message();
  if (devstartstreamnotify) {
    set_has_devstartstreamnotify();
    Message_.devstartstreamnotify_ = devstartstreamnotify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.devStartStreamNotify)
}
inline ::u727::DevStartStreamNotify* MgwMsg::_internal_mutable_devstartstreamnotify() {
  if (!_internal_has_devstartstreamnotify()) {
    clear_Message();
    set_has_devstartstreamnotify();
    Message_.devstartstreamnotify_ = CreateMaybeMessage< ::u727::DevStartStreamNotify >(GetArena());
  }
  return Message_.devstartstreamnotify_;
}
inline ::u727::DevStartStreamNotify* MgwMsg::mutable_devstartstreamnotify() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.devStartStreamNotify)
  return _internal_mutable_devstartstreamnotify();
}

// .u727.DevStopStreamNotify devStopStreamNotify = 1012;
inline bool MgwMsg::_internal_has_devstopstreamnotify() const {
  return Message_case() == kDevStopStreamNotify;
}
inline bool MgwMsg::has_devstopstreamnotify() const {
  return _internal_has_devstopstreamnotify();
}
inline void MgwMsg::set_has_devstopstreamnotify() {
  _oneof_case_[0] = kDevStopStreamNotify;
}
inline ::u727::DevStopStreamNotify* MgwMsg::release_devstopstreamnotify() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.devStopStreamNotify)
  if (_internal_has_devstopstreamnotify()) {
    clear_has_Message();
      ::u727::DevStopStreamNotify* temp = Message_.devstopstreamnotify_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.devstopstreamnotify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::DevStopStreamNotify& MgwMsg::_internal_devstopstreamnotify() const {
  return _internal_has_devstopstreamnotify()
      ? *Message_.devstopstreamnotify_
      : reinterpret_cast< ::u727::DevStopStreamNotify&>(::u727::_DevStopStreamNotify_default_instance_);
}
inline const ::u727::DevStopStreamNotify& MgwMsg::devstopstreamnotify() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.devStopStreamNotify)
  return _internal_devstopstreamnotify();
}
inline ::u727::DevStopStreamNotify* MgwMsg::unsafe_arena_release_devstopstreamnotify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.devStopStreamNotify)
  if (_internal_has_devstopstreamnotify()) {
    clear_has_Message();
    ::u727::DevStopStreamNotify* temp = Message_.devstopstreamnotify_;
    Message_.devstopstreamnotify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_devstopstreamnotify(::u727::DevStopStreamNotify* devstopstreamnotify) {
  clear_Message();
  if (devstopstreamnotify) {
    set_has_devstopstreamnotify();
    Message_.devstopstreamnotify_ = devstopstreamnotify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.devStopStreamNotify)
}
inline ::u727::DevStopStreamNotify* MgwMsg::_internal_mutable_devstopstreamnotify() {
  if (!_internal_has_devstopstreamnotify()) {
    clear_Message();
    set_has_devstopstreamnotify();
    Message_.devstopstreamnotify_ = CreateMaybeMessage< ::u727::DevStopStreamNotify >(GetArena());
  }
  return Message_.devstopstreamnotify_;
}
inline ::u727::DevStopStreamNotify* MgwMsg::mutable_devstopstreamnotify() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.devStopStreamNotify)
  return _internal_mutable_devstopstreamnotify();
}

// .u727.KeepAlive u727keepAlive = 1013;
inline bool MgwMsg::_internal_has_u727keepalive() const {
  return Message_case() == kU727KeepAlive;
}
inline bool MgwMsg::has_u727keepalive() const {
  return _internal_has_u727keepalive();
}
inline void MgwMsg::set_has_u727keepalive() {
  _oneof_case_[0] = kU727KeepAlive;
}
inline ::u727::KeepAlive* MgwMsg::release_u727keepalive() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.u727keepAlive)
  if (_internal_has_u727keepalive()) {
    clear_has_Message();
      ::u727::KeepAlive* temp = Message_.u727keepalive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.u727keepalive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::KeepAlive& MgwMsg::_internal_u727keepalive() const {
  return _internal_has_u727keepalive()
      ? *Message_.u727keepalive_
      : reinterpret_cast< ::u727::KeepAlive&>(::u727::_KeepAlive_default_instance_);
}
inline const ::u727::KeepAlive& MgwMsg::u727keepalive() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.u727keepAlive)
  return _internal_u727keepalive();
}
inline ::u727::KeepAlive* MgwMsg::unsafe_arena_release_u727keepalive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.u727keepAlive)
  if (_internal_has_u727keepalive()) {
    clear_has_Message();
    ::u727::KeepAlive* temp = Message_.u727keepalive_;
    Message_.u727keepalive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_u727keepalive(::u727::KeepAlive* u727keepalive) {
  clear_Message();
  if (u727keepalive) {
    set_has_u727keepalive();
    Message_.u727keepalive_ = u727keepalive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.u727keepAlive)
}
inline ::u727::KeepAlive* MgwMsg::_internal_mutable_u727keepalive() {
  if (!_internal_has_u727keepalive()) {
    clear_Message();
    set_has_u727keepalive();
    Message_.u727keepalive_ = CreateMaybeMessage< ::u727::KeepAlive >(GetArena());
  }
  return Message_.u727keepalive_;
}
inline ::u727::KeepAlive* MgwMsg::mutable_u727keepalive() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.u727keepAlive)
  return _internal_mutable_u727keepalive();
}

// .u727.QueryOnlineDevReq queryOnlineDevReq = 1014;
inline bool MgwMsg::_internal_has_queryonlinedevreq() const {
  return Message_case() == kQueryOnlineDevReq;
}
inline bool MgwMsg::has_queryonlinedevreq() const {
  return _internal_has_queryonlinedevreq();
}
inline void MgwMsg::set_has_queryonlinedevreq() {
  _oneof_case_[0] = kQueryOnlineDevReq;
}
inline ::u727::QueryOnlineDevReq* MgwMsg::release_queryonlinedevreq() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.queryOnlineDevReq)
  if (_internal_has_queryonlinedevreq()) {
    clear_has_Message();
      ::u727::QueryOnlineDevReq* temp = Message_.queryonlinedevreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.queryonlinedevreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::QueryOnlineDevReq& MgwMsg::_internal_queryonlinedevreq() const {
  return _internal_has_queryonlinedevreq()
      ? *Message_.queryonlinedevreq_
      : reinterpret_cast< ::u727::QueryOnlineDevReq&>(::u727::_QueryOnlineDevReq_default_instance_);
}
inline const ::u727::QueryOnlineDevReq& MgwMsg::queryonlinedevreq() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.queryOnlineDevReq)
  return _internal_queryonlinedevreq();
}
inline ::u727::QueryOnlineDevReq* MgwMsg::unsafe_arena_release_queryonlinedevreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.queryOnlineDevReq)
  if (_internal_has_queryonlinedevreq()) {
    clear_has_Message();
    ::u727::QueryOnlineDevReq* temp = Message_.queryonlinedevreq_;
    Message_.queryonlinedevreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_queryonlinedevreq(::u727::QueryOnlineDevReq* queryonlinedevreq) {
  clear_Message();
  if (queryonlinedevreq) {
    set_has_queryonlinedevreq();
    Message_.queryonlinedevreq_ = queryonlinedevreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.queryOnlineDevReq)
}
inline ::u727::QueryOnlineDevReq* MgwMsg::_internal_mutable_queryonlinedevreq() {
  if (!_internal_has_queryonlinedevreq()) {
    clear_Message();
    set_has_queryonlinedevreq();
    Message_.queryonlinedevreq_ = CreateMaybeMessage< ::u727::QueryOnlineDevReq >(GetArena());
  }
  return Message_.queryonlinedevreq_;
}
inline ::u727::QueryOnlineDevReq* MgwMsg::mutable_queryonlinedevreq() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.queryOnlineDevReq)
  return _internal_mutable_queryonlinedevreq();
}

// .u727.QueryOnlineDevReply queryOnlineDevReply = 1015;
inline bool MgwMsg::_internal_has_queryonlinedevreply() const {
  return Message_case() == kQueryOnlineDevReply;
}
inline bool MgwMsg::has_queryonlinedevreply() const {
  return _internal_has_queryonlinedevreply();
}
inline void MgwMsg::set_has_queryonlinedevreply() {
  _oneof_case_[0] = kQueryOnlineDevReply;
}
inline ::u727::QueryOnlineDevReply* MgwMsg::release_queryonlinedevreply() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.queryOnlineDevReply)
  if (_internal_has_queryonlinedevreply()) {
    clear_has_Message();
      ::u727::QueryOnlineDevReply* temp = Message_.queryonlinedevreply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Message_.queryonlinedevreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::u727::QueryOnlineDevReply& MgwMsg::_internal_queryonlinedevreply() const {
  return _internal_has_queryonlinedevreply()
      ? *Message_.queryonlinedevreply_
      : reinterpret_cast< ::u727::QueryOnlineDevReply&>(::u727::_QueryOnlineDevReply_default_instance_);
}
inline const ::u727::QueryOnlineDevReply& MgwMsg::queryonlinedevreply() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.queryOnlineDevReply)
  return _internal_queryonlinedevreply();
}
inline ::u727::QueryOnlineDevReply* MgwMsg::unsafe_arena_release_queryonlinedevreply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.queryOnlineDevReply)
  if (_internal_has_queryonlinedevreply()) {
    clear_has_Message();
    ::u727::QueryOnlineDevReply* temp = Message_.queryonlinedevreply_;
    Message_.queryonlinedevreply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_queryonlinedevreply(::u727::QueryOnlineDevReply* queryonlinedevreply) {
  clear_Message();
  if (queryonlinedevreply) {
    set_has_queryonlinedevreply();
    Message_.queryonlinedevreply_ = queryonlinedevreply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.queryOnlineDevReply)
}
inline ::u727::QueryOnlineDevReply* MgwMsg::_internal_mutable_queryonlinedevreply() {
  if (!_internal_has_queryonlinedevreply()) {
    clear_Message();
    set_has_queryonlinedevreply();
    Message_.queryonlinedevreply_ = CreateMaybeMessage< ::u727::QueryOnlineDevReply >(GetArena());
  }
  return Message_.queryonlinedevreply_;
}
inline ::u727::QueryOnlineDevReply* MgwMsg::mutable_queryonlinedevreply() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.queryOnlineDevReply)
  return _internal_mutable_queryonlinedevreply();
}

inline bool MgwMsg::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void MgwMsg::clear_has_Message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline MgwMsg::MessageCase MgwMsg::Message_case() const {
  return MgwMsg::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mgw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mgw_2eproto
