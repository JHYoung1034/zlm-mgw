// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace common {
class RTMPStreamAddress;
class RTMPStreamAddressDefaultTypeInternal;
extern RTMPStreamAddressDefaultTypeInternal _RTMPStreamAddress_default_instance_;
class SRTStreamAddress;
class SRTStreamAddressDefaultTypeInternal;
extern SRTStreamAddressDefaultTypeInternal _SRTStreamAddress_default_instance_;
class SRTStreamAddress_Professional;
class SRTStreamAddress_ProfessionalDefaultTypeInternal;
extern SRTStreamAddress_ProfessionalDefaultTypeInternal _SRTStreamAddress_Professional_default_instance_;
class StreamAddress;
class StreamAddressDefaultTypeInternal;
extern StreamAddressDefaultTypeInternal _StreamAddress_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::RTMPStreamAddress* Arena::CreateMaybeMessage<::common::RTMPStreamAddress>(Arena*);
template<> ::common::SRTStreamAddress* Arena::CreateMaybeMessage<::common::SRTStreamAddress>(Arena*);
template<> ::common::SRTStreamAddress_Professional* Arena::CreateMaybeMessage<::common::SRTStreamAddress_Professional>(Arena*);
template<> ::common::StreamAddress* Arena::CreateMaybeMessage<::common::StreamAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class SRTStreamAddress_Professional PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SRTStreamAddress.Professional) */ {
 public:
  inline SRTStreamAddress_Professional() : SRTStreamAddress_Professional(nullptr) {}
  virtual ~SRTStreamAddress_Professional();

  SRTStreamAddress_Professional(const SRTStreamAddress_Professional& from);
  SRTStreamAddress_Professional(SRTStreamAddress_Professional&& from) noexcept
    : SRTStreamAddress_Professional() {
    *this = ::std::move(from);
  }

  inline SRTStreamAddress_Professional& operator=(const SRTStreamAddress_Professional& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRTStreamAddress_Professional& operator=(SRTStreamAddress_Professional&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRTStreamAddress_Professional& default_instance();

  static inline const SRTStreamAddress_Professional* internal_default_instance() {
    return reinterpret_cast<const SRTStreamAddress_Professional*>(
               &_SRTStreamAddress_Professional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SRTStreamAddress_Professional& a, SRTStreamAddress_Professional& b) {
    a.Swap(&b);
  }
  inline void Swap(SRTStreamAddress_Professional* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRTStreamAddress_Professional* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRTStreamAddress_Professional* New() const final {
    return CreateMaybeMessage<SRTStreamAddress_Professional>(nullptr);
  }

  SRTStreamAddress_Professional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRTStreamAddress_Professional>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRTStreamAddress_Professional& from);
  void MergeFrom(const SRTStreamAddress_Professional& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRTStreamAddress_Professional* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SRTStreamAddress.Professional";
  }
  protected:
  explicit SRTStreamAddress_Professional(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 3,
    kPassphraseFieldNumber = 8,
    kStreamidFieldNumber = 9,
    kModeFieldNumber = 2,
    kPortFieldNumber = 4,
    kLatencyFieldNumber = 5,
    kMaxbwFieldNumber = 6,
    kPbkeylenFieldNumber = 7,
  };
  // string hostname = 3;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string passphrase = 8;
  void clear_passphrase();
  const std::string& passphrase() const;
  void set_passphrase(const std::string& value);
  void set_passphrase(std::string&& value);
  void set_passphrase(const char* value);
  void set_passphrase(const char* value, size_t size);
  std::string* mutable_passphrase();
  std::string* release_passphrase();
  void set_allocated_passphrase(std::string* passphrase);
  private:
  const std::string& _internal_passphrase() const;
  void _internal_set_passphrase(const std::string& value);
  std::string* _internal_mutable_passphrase();
  public:

  // string streamid = 9;
  void clear_streamid();
  const std::string& streamid() const;
  void set_streamid(const std::string& value);
  void set_streamid(std::string&& value);
  void set_streamid(const char* value);
  void set_streamid(const char* value, size_t size);
  std::string* mutable_streamid();
  std::string* release_streamid();
  void set_allocated_streamid(std::string* streamid);
  private:
  const std::string& _internal_streamid() const;
  void _internal_set_streamid(const std::string& value);
  std::string* _internal_mutable_streamid();
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 latency = 5;
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxbw = 6;
  void clear_maxbw();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbw() const;
  void set_maxbw(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbw() const;
  void _internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pbkeylen = 7;
  void clear_pbkeylen();
  ::PROTOBUF_NAMESPACE_ID::uint32 pbkeylen() const;
  void set_pbkeylen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pbkeylen() const;
  void _internal_set_pbkeylen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:common.SRTStreamAddress.Professional)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passphrase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pbkeylen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SRTStreamAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SRTStreamAddress) */ {
 public:
  inline SRTStreamAddress() : SRTStreamAddress(nullptr) {}
  virtual ~SRTStreamAddress();

  SRTStreamAddress(const SRTStreamAddress& from);
  SRTStreamAddress(SRTStreamAddress&& from) noexcept
    : SRTStreamAddress() {
    *this = ::std::move(from);
  }

  inline SRTStreamAddress& operator=(const SRTStreamAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRTStreamAddress& operator=(SRTStreamAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRTStreamAddress& default_instance();

  enum AddressModeCase {
    kProAddr = 1,
    kSimAddr = 2,
    ADDRESSMODE_NOT_SET = 0,
  };

  static inline const SRTStreamAddress* internal_default_instance() {
    return reinterpret_cast<const SRTStreamAddress*>(
               &_SRTStreamAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SRTStreamAddress& a, SRTStreamAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SRTStreamAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRTStreamAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRTStreamAddress* New() const final {
    return CreateMaybeMessage<SRTStreamAddress>(nullptr);
  }

  SRTStreamAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRTStreamAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRTStreamAddress& from);
  void MergeFrom(const SRTStreamAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRTStreamAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SRTStreamAddress";
  }
  protected:
  explicit SRTStreamAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SRTStreamAddress_Professional Professional;

  // accessors -------------------------------------------------------

  enum : int {
    kProAddrFieldNumber = 1,
    kSimAddrFieldNumber = 2,
  };
  // .common.SRTStreamAddress.Professional proAddr = 1;
  bool has_proaddr() const;
  private:
  bool _internal_has_proaddr() const;
  public:
  void clear_proaddr();
  const ::common::SRTStreamAddress_Professional& proaddr() const;
  ::common::SRTStreamAddress_Professional* release_proaddr();
  ::common::SRTStreamAddress_Professional* mutable_proaddr();
  void set_allocated_proaddr(::common::SRTStreamAddress_Professional* proaddr);
  private:
  const ::common::SRTStreamAddress_Professional& _internal_proaddr() const;
  ::common::SRTStreamAddress_Professional* _internal_mutable_proaddr();
  public:
  void unsafe_arena_set_allocated_proaddr(
      ::common::SRTStreamAddress_Professional* proaddr);
  ::common::SRTStreamAddress_Professional* unsafe_arena_release_proaddr();

  // string simAddr = 2;
  private:
  bool _internal_has_simaddr() const;
  public:
  void clear_simaddr();
  const std::string& simaddr() const;
  void set_simaddr(const std::string& value);
  void set_simaddr(std::string&& value);
  void set_simaddr(const char* value);
  void set_simaddr(const char* value, size_t size);
  std::string* mutable_simaddr();
  std::string* release_simaddr();
  void set_allocated_simaddr(std::string* simaddr);
  private:
  const std::string& _internal_simaddr() const;
  void _internal_set_simaddr(const std::string& value);
  std::string* _internal_mutable_simaddr();
  public:

  void clear_AddressMode();
  AddressModeCase AddressMode_case() const;
  // @@protoc_insertion_point(class_scope:common.SRTStreamAddress)
 private:
  class _Internal;
  void set_has_proaddr();
  void set_has_simaddr();

  inline bool has_AddressMode() const;
  inline void clear_has_AddressMode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AddressModeUnion {
    AddressModeUnion() {}
    ::common::SRTStreamAddress_Professional* proaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simaddr_;
  } AddressMode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RTMPStreamAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RTMPStreamAddress) */ {
 public:
  inline RTMPStreamAddress() : RTMPStreamAddress(nullptr) {}
  virtual ~RTMPStreamAddress();

  RTMPStreamAddress(const RTMPStreamAddress& from);
  RTMPStreamAddress(RTMPStreamAddress&& from) noexcept
    : RTMPStreamAddress() {
    *this = ::std::move(from);
  }

  inline RTMPStreamAddress& operator=(const RTMPStreamAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTMPStreamAddress& operator=(RTMPStreamAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RTMPStreamAddress& default_instance();

  static inline const RTMPStreamAddress* internal_default_instance() {
    return reinterpret_cast<const RTMPStreamAddress*>(
               &_RTMPStreamAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RTMPStreamAddress& a, RTMPStreamAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(RTMPStreamAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTMPStreamAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTMPStreamAddress* New() const final {
    return CreateMaybeMessage<RTMPStreamAddress>(nullptr);
  }

  RTMPStreamAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTMPStreamAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTMPStreamAddress& from);
  void MergeFrom(const RTMPStreamAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTMPStreamAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RTMPStreamAddress";
  }
  protected:
  explicit RTMPStreamAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kCodeFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kPasswordFieldNumber = 4,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:common.RTMPStreamAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class StreamAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.StreamAddress) */ {
 public:
  inline StreamAddress() : StreamAddress(nullptr) {}
  virtual ~StreamAddress();

  StreamAddress(const StreamAddress& from);
  StreamAddress(StreamAddress&& from) noexcept
    : StreamAddress() {
    *this = ::std::move(from);
  }

  inline StreamAddress& operator=(const StreamAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAddress& operator=(StreamAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamAddress& default_instance();

  enum AddressCase {
    kSrt = 1,
    kRtmp = 2,
    ADDRESS_NOT_SET = 0,
  };

  static inline const StreamAddress* internal_default_instance() {
    return reinterpret_cast<const StreamAddress*>(
               &_StreamAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamAddress& a, StreamAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamAddress* New() const final {
    return CreateMaybeMessage<StreamAddress>(nullptr);
  }

  StreamAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamAddress& from);
  void MergeFrom(const StreamAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.StreamAddress";
  }
  protected:
  explicit StreamAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrtFieldNumber = 1,
    kRtmpFieldNumber = 2,
  };
  // .common.SRTStreamAddress srt = 1;
  bool has_srt() const;
  private:
  bool _internal_has_srt() const;
  public:
  void clear_srt();
  const ::common::SRTStreamAddress& srt() const;
  ::common::SRTStreamAddress* release_srt();
  ::common::SRTStreamAddress* mutable_srt();
  void set_allocated_srt(::common::SRTStreamAddress* srt);
  private:
  const ::common::SRTStreamAddress& _internal_srt() const;
  ::common::SRTStreamAddress* _internal_mutable_srt();
  public:
  void unsafe_arena_set_allocated_srt(
      ::common::SRTStreamAddress* srt);
  ::common::SRTStreamAddress* unsafe_arena_release_srt();

  // .common.RTMPStreamAddress rtmp = 2;
  bool has_rtmp() const;
  private:
  bool _internal_has_rtmp() const;
  public:
  void clear_rtmp();
  const ::common::RTMPStreamAddress& rtmp() const;
  ::common::RTMPStreamAddress* release_rtmp();
  ::common::RTMPStreamAddress* mutable_rtmp();
  void set_allocated_rtmp(::common::RTMPStreamAddress* rtmp);
  private:
  const ::common::RTMPStreamAddress& _internal_rtmp() const;
  ::common::RTMPStreamAddress* _internal_mutable_rtmp();
  public:
  void unsafe_arena_set_allocated_rtmp(
      ::common::RTMPStreamAddress* rtmp);
  ::common::RTMPStreamAddress* unsafe_arena_release_rtmp();

  void clear_Address();
  AddressCase Address_case() const;
  // @@protoc_insertion_point(class_scope:common.StreamAddress)
 private:
  class _Internal;
  void set_has_srt();
  void set_has_rtmp();

  inline bool has_Address() const;
  inline void clear_has_Address();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AddressUnion {
    AddressUnion() {}
    ::common::SRTStreamAddress* srt_;
    ::common::RTMPStreamAddress* rtmp_;
  } Address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SRTStreamAddress_Professional

// int32 mode = 2;
inline void SRTStreamAddress_Professional::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRTStreamAddress_Professional::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRTStreamAddress_Professional::mode() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.mode)
  return _internal_mode();
}
inline void SRTStreamAddress_Professional::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SRTStreamAddress_Professional::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.mode)
}

// string hostname = 3;
inline void SRTStreamAddress_Professional::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& SRTStreamAddress_Professional::hostname() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.hostname)
  return _internal_hostname();
}
inline void SRTStreamAddress_Professional::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.hostname)
}
inline std::string* SRTStreamAddress_Professional::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:common.SRTStreamAddress.Professional.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& SRTStreamAddress_Professional::_internal_hostname() const {
  return hostname_.Get();
}
inline void SRTStreamAddress_Professional::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SRTStreamAddress_Professional::set_hostname(std::string&& value) {
  
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.SRTStreamAddress.Professional.hostname)
}
inline void SRTStreamAddress_Professional::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.SRTStreamAddress.Professional.hostname)
}
inline void SRTStreamAddress_Professional::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.SRTStreamAddress.Professional.hostname)
}
inline std::string* SRTStreamAddress_Professional::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SRTStreamAddress_Professional::release_hostname() {
  // @@protoc_insertion_point(field_release:common.SRTStreamAddress.Professional.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRTStreamAddress_Professional::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.SRTStreamAddress.Professional.hostname)
}

// uint32 port = 4;
inline void SRTStreamAddress_Professional::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::port() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.port)
  return _internal_port();
}
inline void SRTStreamAddress_Professional::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void SRTStreamAddress_Professional::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.port)
}

// uint32 latency = 5;
inline void SRTStreamAddress_Professional::clear_latency() {
  latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::latency() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.latency)
  return _internal_latency();
}
inline void SRTStreamAddress_Professional::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latency_ = value;
}
inline void SRTStreamAddress_Professional::set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.latency)
}

// uint32 maxbw = 6;
inline void SRTStreamAddress_Professional::clear_maxbw() {
  maxbw_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::_internal_maxbw() const {
  return maxbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::maxbw() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.maxbw)
  return _internal_maxbw();
}
inline void SRTStreamAddress_Professional::_internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbw_ = value;
}
inline void SRTStreamAddress_Professional::set_maxbw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbw(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.maxbw)
}

// uint32 pbkeylen = 7;
inline void SRTStreamAddress_Professional::clear_pbkeylen() {
  pbkeylen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::_internal_pbkeylen() const {
  return pbkeylen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SRTStreamAddress_Professional::pbkeylen() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.pbkeylen)
  return _internal_pbkeylen();
}
inline void SRTStreamAddress_Professional::_internal_set_pbkeylen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pbkeylen_ = value;
}
inline void SRTStreamAddress_Professional::set_pbkeylen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pbkeylen(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.pbkeylen)
}

// string passphrase = 8;
inline void SRTStreamAddress_Professional::clear_passphrase() {
  passphrase_.ClearToEmpty();
}
inline const std::string& SRTStreamAddress_Professional::passphrase() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.passphrase)
  return _internal_passphrase();
}
inline void SRTStreamAddress_Professional::set_passphrase(const std::string& value) {
  _internal_set_passphrase(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.passphrase)
}
inline std::string* SRTStreamAddress_Professional::mutable_passphrase() {
  // @@protoc_insertion_point(field_mutable:common.SRTStreamAddress.Professional.passphrase)
  return _internal_mutable_passphrase();
}
inline const std::string& SRTStreamAddress_Professional::_internal_passphrase() const {
  return passphrase_.Get();
}
inline void SRTStreamAddress_Professional::_internal_set_passphrase(const std::string& value) {
  
  passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SRTStreamAddress_Professional::set_passphrase(std::string&& value) {
  
  passphrase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.SRTStreamAddress.Professional.passphrase)
}
inline void SRTStreamAddress_Professional::set_passphrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.SRTStreamAddress.Professional.passphrase)
}
inline void SRTStreamAddress_Professional::set_passphrase(const char* value,
    size_t size) {
  
  passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.SRTStreamAddress.Professional.passphrase)
}
inline std::string* SRTStreamAddress_Professional::_internal_mutable_passphrase() {
  
  return passphrase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SRTStreamAddress_Professional::release_passphrase() {
  // @@protoc_insertion_point(field_release:common.SRTStreamAddress.Professional.passphrase)
  return passphrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRTStreamAddress_Professional::set_allocated_passphrase(std::string* passphrase) {
  if (passphrase != nullptr) {
    
  } else {
    
  }
  passphrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passphrase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.SRTStreamAddress.Professional.passphrase)
}

// string streamid = 9;
inline void SRTStreamAddress_Professional::clear_streamid() {
  streamid_.ClearToEmpty();
}
inline const std::string& SRTStreamAddress_Professional::streamid() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.Professional.streamid)
  return _internal_streamid();
}
inline void SRTStreamAddress_Professional::set_streamid(const std::string& value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.Professional.streamid)
}
inline std::string* SRTStreamAddress_Professional::mutable_streamid() {
  // @@protoc_insertion_point(field_mutable:common.SRTStreamAddress.Professional.streamid)
  return _internal_mutable_streamid();
}
inline const std::string& SRTStreamAddress_Professional::_internal_streamid() const {
  return streamid_.Get();
}
inline void SRTStreamAddress_Professional::_internal_set_streamid(const std::string& value) {
  
  streamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SRTStreamAddress_Professional::set_streamid(std::string&& value) {
  
  streamid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.SRTStreamAddress.Professional.streamid)
}
inline void SRTStreamAddress_Professional::set_streamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.SRTStreamAddress.Professional.streamid)
}
inline void SRTStreamAddress_Professional::set_streamid(const char* value,
    size_t size) {
  
  streamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.SRTStreamAddress.Professional.streamid)
}
inline std::string* SRTStreamAddress_Professional::_internal_mutable_streamid() {
  
  return streamid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SRTStreamAddress_Professional::release_streamid() {
  // @@protoc_insertion_point(field_release:common.SRTStreamAddress.Professional.streamid)
  return streamid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SRTStreamAddress_Professional::set_allocated_streamid(std::string* streamid) {
  if (streamid != nullptr) {
    
  } else {
    
  }
  streamid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.SRTStreamAddress.Professional.streamid)
}

// -------------------------------------------------------------------

// SRTStreamAddress

// .common.SRTStreamAddress.Professional proAddr = 1;
inline bool SRTStreamAddress::_internal_has_proaddr() const {
  return AddressMode_case() == kProAddr;
}
inline bool SRTStreamAddress::has_proaddr() const {
  return _internal_has_proaddr();
}
inline void SRTStreamAddress::set_has_proaddr() {
  _oneof_case_[0] = kProAddr;
}
inline void SRTStreamAddress::clear_proaddr() {
  if (_internal_has_proaddr()) {
    if (GetArena() == nullptr) {
      delete AddressMode_.proaddr_;
    }
    clear_has_AddressMode();
  }
}
inline ::common::SRTStreamAddress_Professional* SRTStreamAddress::release_proaddr() {
  // @@protoc_insertion_point(field_release:common.SRTStreamAddress.proAddr)
  if (_internal_has_proaddr()) {
    clear_has_AddressMode();
      ::common::SRTStreamAddress_Professional* temp = AddressMode_.proaddr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AddressMode_.proaddr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::SRTStreamAddress_Professional& SRTStreamAddress::_internal_proaddr() const {
  return _internal_has_proaddr()
      ? *AddressMode_.proaddr_
      : reinterpret_cast< ::common::SRTStreamAddress_Professional&>(::common::_SRTStreamAddress_Professional_default_instance_);
}
inline const ::common::SRTStreamAddress_Professional& SRTStreamAddress::proaddr() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.proAddr)
  return _internal_proaddr();
}
inline ::common::SRTStreamAddress_Professional* SRTStreamAddress::unsafe_arena_release_proaddr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.SRTStreamAddress.proAddr)
  if (_internal_has_proaddr()) {
    clear_has_AddressMode();
    ::common::SRTStreamAddress_Professional* temp = AddressMode_.proaddr_;
    AddressMode_.proaddr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SRTStreamAddress::unsafe_arena_set_allocated_proaddr(::common::SRTStreamAddress_Professional* proaddr) {
  clear_AddressMode();
  if (proaddr) {
    set_has_proaddr();
    AddressMode_.proaddr_ = proaddr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.SRTStreamAddress.proAddr)
}
inline ::common::SRTStreamAddress_Professional* SRTStreamAddress::_internal_mutable_proaddr() {
  if (!_internal_has_proaddr()) {
    clear_AddressMode();
    set_has_proaddr();
    AddressMode_.proaddr_ = CreateMaybeMessage< ::common::SRTStreamAddress_Professional >(GetArena());
  }
  return AddressMode_.proaddr_;
}
inline ::common::SRTStreamAddress_Professional* SRTStreamAddress::mutable_proaddr() {
  // @@protoc_insertion_point(field_mutable:common.SRTStreamAddress.proAddr)
  return _internal_mutable_proaddr();
}

// string simAddr = 2;
inline bool SRTStreamAddress::_internal_has_simaddr() const {
  return AddressMode_case() == kSimAddr;
}
inline void SRTStreamAddress::set_has_simaddr() {
  _oneof_case_[0] = kSimAddr;
}
inline void SRTStreamAddress::clear_simaddr() {
  if (_internal_has_simaddr()) {
    AddressMode_.simaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_AddressMode();
  }
}
inline const std::string& SRTStreamAddress::simaddr() const {
  // @@protoc_insertion_point(field_get:common.SRTStreamAddress.simAddr)
  return _internal_simaddr();
}
inline void SRTStreamAddress::set_simaddr(const std::string& value) {
  _internal_set_simaddr(value);
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.simAddr)
}
inline std::string* SRTStreamAddress::mutable_simaddr() {
  // @@protoc_insertion_point(field_mutable:common.SRTStreamAddress.simAddr)
  return _internal_mutable_simaddr();
}
inline const std::string& SRTStreamAddress::_internal_simaddr() const {
  if (_internal_has_simaddr()) {
    return AddressMode_.simaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SRTStreamAddress::_internal_set_simaddr(const std::string& value) {
  if (!_internal_has_simaddr()) {
    clear_AddressMode();
    set_has_simaddr();
    AddressMode_.simaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AddressMode_.simaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SRTStreamAddress::set_simaddr(std::string&& value) {
  // @@protoc_insertion_point(field_set:common.SRTStreamAddress.simAddr)
  if (!_internal_has_simaddr()) {
    clear_AddressMode();
    set_has_simaddr();
    AddressMode_.simaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AddressMode_.simaddr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.SRTStreamAddress.simAddr)
}
inline void SRTStreamAddress::set_simaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_simaddr()) {
    clear_AddressMode();
    set_has_simaddr();
    AddressMode_.simaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AddressMode_.simaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.SRTStreamAddress.simAddr)
}
inline void SRTStreamAddress::set_simaddr(const char* value,
                             size_t size) {
  if (!_internal_has_simaddr()) {
    clear_AddressMode();
    set_has_simaddr();
    AddressMode_.simaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AddressMode_.simaddr_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.SRTStreamAddress.simAddr)
}
inline std::string* SRTStreamAddress::_internal_mutable_simaddr() {
  if (!_internal_has_simaddr()) {
    clear_AddressMode();
    set_has_simaddr();
    AddressMode_.simaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return AddressMode_.simaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SRTStreamAddress::release_simaddr() {
  // @@protoc_insertion_point(field_release:common.SRTStreamAddress.simAddr)
  if (_internal_has_simaddr()) {
    clear_has_AddressMode();
    return AddressMode_.simaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SRTStreamAddress::set_allocated_simaddr(std::string* simaddr) {
  if (has_AddressMode()) {
    clear_AddressMode();
  }
  if (simaddr != nullptr) {
    set_has_simaddr();
    AddressMode_.simaddr_.UnsafeSetDefault(simaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(simaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:common.SRTStreamAddress.simAddr)
}

inline bool SRTStreamAddress::has_AddressMode() const {
  return AddressMode_case() != ADDRESSMODE_NOT_SET;
}
inline void SRTStreamAddress::clear_has_AddressMode() {
  _oneof_case_[0] = ADDRESSMODE_NOT_SET;
}
inline SRTStreamAddress::AddressModeCase SRTStreamAddress::AddressMode_case() const {
  return SRTStreamAddress::AddressModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RTMPStreamAddress

// string uri = 1;
inline void RTMPStreamAddress::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& RTMPStreamAddress::uri() const {
  // @@protoc_insertion_point(field_get:common.RTMPStreamAddress.uri)
  return _internal_uri();
}
inline void RTMPStreamAddress::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:common.RTMPStreamAddress.uri)
}
inline std::string* RTMPStreamAddress::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:common.RTMPStreamAddress.uri)
  return _internal_mutable_uri();
}
inline const std::string& RTMPStreamAddress::_internal_uri() const {
  return uri_.Get();
}
inline void RTMPStreamAddress::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RTMPStreamAddress::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.RTMPStreamAddress.uri)
}
inline void RTMPStreamAddress::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.RTMPStreamAddress.uri)
}
inline void RTMPStreamAddress::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.RTMPStreamAddress.uri)
}
inline std::string* RTMPStreamAddress::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RTMPStreamAddress::release_uri() {
  // @@protoc_insertion_point(field_release:common.RTMPStreamAddress.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RTMPStreamAddress::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.RTMPStreamAddress.uri)
}

// string code = 2;
inline void RTMPStreamAddress::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& RTMPStreamAddress::code() const {
  // @@protoc_insertion_point(field_get:common.RTMPStreamAddress.code)
  return _internal_code();
}
inline void RTMPStreamAddress::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:common.RTMPStreamAddress.code)
}
inline std::string* RTMPStreamAddress::mutable_code() {
  // @@protoc_insertion_point(field_mutable:common.RTMPStreamAddress.code)
  return _internal_mutable_code();
}
inline const std::string& RTMPStreamAddress::_internal_code() const {
  return code_.Get();
}
inline void RTMPStreamAddress::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RTMPStreamAddress::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.RTMPStreamAddress.code)
}
inline void RTMPStreamAddress::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.RTMPStreamAddress.code)
}
inline void RTMPStreamAddress::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.RTMPStreamAddress.code)
}
inline std::string* RTMPStreamAddress::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RTMPStreamAddress::release_code() {
  // @@protoc_insertion_point(field_release:common.RTMPStreamAddress.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RTMPStreamAddress::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.RTMPStreamAddress.code)
}

// string username = 3;
inline void RTMPStreamAddress::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RTMPStreamAddress::username() const {
  // @@protoc_insertion_point(field_get:common.RTMPStreamAddress.username)
  return _internal_username();
}
inline void RTMPStreamAddress::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:common.RTMPStreamAddress.username)
}
inline std::string* RTMPStreamAddress::mutable_username() {
  // @@protoc_insertion_point(field_mutable:common.RTMPStreamAddress.username)
  return _internal_mutable_username();
}
inline const std::string& RTMPStreamAddress::_internal_username() const {
  return username_.Get();
}
inline void RTMPStreamAddress::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RTMPStreamAddress::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.RTMPStreamAddress.username)
}
inline void RTMPStreamAddress::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.RTMPStreamAddress.username)
}
inline void RTMPStreamAddress::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.RTMPStreamAddress.username)
}
inline std::string* RTMPStreamAddress::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RTMPStreamAddress::release_username() {
  // @@protoc_insertion_point(field_release:common.RTMPStreamAddress.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RTMPStreamAddress::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.RTMPStreamAddress.username)
}

// string password = 4;
inline void RTMPStreamAddress::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RTMPStreamAddress::password() const {
  // @@protoc_insertion_point(field_get:common.RTMPStreamAddress.password)
  return _internal_password();
}
inline void RTMPStreamAddress::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:common.RTMPStreamAddress.password)
}
inline std::string* RTMPStreamAddress::mutable_password() {
  // @@protoc_insertion_point(field_mutable:common.RTMPStreamAddress.password)
  return _internal_mutable_password();
}
inline const std::string& RTMPStreamAddress::_internal_password() const {
  return password_.Get();
}
inline void RTMPStreamAddress::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RTMPStreamAddress::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.RTMPStreamAddress.password)
}
inline void RTMPStreamAddress::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.RTMPStreamAddress.password)
}
inline void RTMPStreamAddress::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.RTMPStreamAddress.password)
}
inline std::string* RTMPStreamAddress::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RTMPStreamAddress::release_password() {
  // @@protoc_insertion_point(field_release:common.RTMPStreamAddress.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RTMPStreamAddress::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.RTMPStreamAddress.password)
}

// -------------------------------------------------------------------

// StreamAddress

// .common.SRTStreamAddress srt = 1;
inline bool StreamAddress::_internal_has_srt() const {
  return Address_case() == kSrt;
}
inline bool StreamAddress::has_srt() const {
  return _internal_has_srt();
}
inline void StreamAddress::set_has_srt() {
  _oneof_case_[0] = kSrt;
}
inline void StreamAddress::clear_srt() {
  if (_internal_has_srt()) {
    if (GetArena() == nullptr) {
      delete Address_.srt_;
    }
    clear_has_Address();
  }
}
inline ::common::SRTStreamAddress* StreamAddress::release_srt() {
  // @@protoc_insertion_point(field_release:common.StreamAddress.srt)
  if (_internal_has_srt()) {
    clear_has_Address();
      ::common::SRTStreamAddress* temp = Address_.srt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Address_.srt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::SRTStreamAddress& StreamAddress::_internal_srt() const {
  return _internal_has_srt()
      ? *Address_.srt_
      : reinterpret_cast< ::common::SRTStreamAddress&>(::common::_SRTStreamAddress_default_instance_);
}
inline const ::common::SRTStreamAddress& StreamAddress::srt() const {
  // @@protoc_insertion_point(field_get:common.StreamAddress.srt)
  return _internal_srt();
}
inline ::common::SRTStreamAddress* StreamAddress::unsafe_arena_release_srt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.StreamAddress.srt)
  if (_internal_has_srt()) {
    clear_has_Address();
    ::common::SRTStreamAddress* temp = Address_.srt_;
    Address_.srt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamAddress::unsafe_arena_set_allocated_srt(::common::SRTStreamAddress* srt) {
  clear_Address();
  if (srt) {
    set_has_srt();
    Address_.srt_ = srt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.StreamAddress.srt)
}
inline ::common::SRTStreamAddress* StreamAddress::_internal_mutable_srt() {
  if (!_internal_has_srt()) {
    clear_Address();
    set_has_srt();
    Address_.srt_ = CreateMaybeMessage< ::common::SRTStreamAddress >(GetArena());
  }
  return Address_.srt_;
}
inline ::common::SRTStreamAddress* StreamAddress::mutable_srt() {
  // @@protoc_insertion_point(field_mutable:common.StreamAddress.srt)
  return _internal_mutable_srt();
}

// .common.RTMPStreamAddress rtmp = 2;
inline bool StreamAddress::_internal_has_rtmp() const {
  return Address_case() == kRtmp;
}
inline bool StreamAddress::has_rtmp() const {
  return _internal_has_rtmp();
}
inline void StreamAddress::set_has_rtmp() {
  _oneof_case_[0] = kRtmp;
}
inline void StreamAddress::clear_rtmp() {
  if (_internal_has_rtmp()) {
    if (GetArena() == nullptr) {
      delete Address_.rtmp_;
    }
    clear_has_Address();
  }
}
inline ::common::RTMPStreamAddress* StreamAddress::release_rtmp() {
  // @@protoc_insertion_point(field_release:common.StreamAddress.rtmp)
  if (_internal_has_rtmp()) {
    clear_has_Address();
      ::common::RTMPStreamAddress* temp = Address_.rtmp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Address_.rtmp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::RTMPStreamAddress& StreamAddress::_internal_rtmp() const {
  return _internal_has_rtmp()
      ? *Address_.rtmp_
      : reinterpret_cast< ::common::RTMPStreamAddress&>(::common::_RTMPStreamAddress_default_instance_);
}
inline const ::common::RTMPStreamAddress& StreamAddress::rtmp() const {
  // @@protoc_insertion_point(field_get:common.StreamAddress.rtmp)
  return _internal_rtmp();
}
inline ::common::RTMPStreamAddress* StreamAddress::unsafe_arena_release_rtmp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.StreamAddress.rtmp)
  if (_internal_has_rtmp()) {
    clear_has_Address();
    ::common::RTMPStreamAddress* temp = Address_.rtmp_;
    Address_.rtmp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamAddress::unsafe_arena_set_allocated_rtmp(::common::RTMPStreamAddress* rtmp) {
  clear_Address();
  if (rtmp) {
    set_has_rtmp();
    Address_.rtmp_ = rtmp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.StreamAddress.rtmp)
}
inline ::common::RTMPStreamAddress* StreamAddress::_internal_mutable_rtmp() {
  if (!_internal_has_rtmp()) {
    clear_Address();
    set_has_rtmp();
    Address_.rtmp_ = CreateMaybeMessage< ::common::RTMPStreamAddress >(GetArena());
  }
  return Address_.rtmp_;
}
inline ::common::RTMPStreamAddress* StreamAddress::mutable_rtmp() {
  // @@protoc_insertion_point(field_mutable:common.StreamAddress.rtmp)
  return _internal_mutable_rtmp();
}

inline bool StreamAddress::has_Address() const {
  return Address_case() != ADDRESS_NOT_SET;
}
inline void StreamAddress::clear_has_Address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
inline StreamAddress::AddressCase StreamAddress::Address_case() const {
  return StreamAddress::AddressCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
