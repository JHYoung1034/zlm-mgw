// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_2eproto;
namespace device {
class CommonRsp;
class CommonRspDefaultTypeInternal;
extern CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
class OutputStreamStatus;
class OutputStreamStatusDefaultTypeInternal;
extern OutputStreamStatusDefaultTypeInternal _OutputStreamStatus_default_instance_;
class PushStreamReq;
class PushStreamReqDefaultTypeInternal;
extern PushStreamReqDefaultTypeInternal _PushStreamReq_default_instance_;
class QuerySource;
class QuerySourceDefaultTypeInternal;
extern QuerySourceDefaultTypeInternal _QuerySource_default_instance_;
class ServerKeepAlive;
class ServerKeepAliveDefaultTypeInternal;
extern ServerKeepAliveDefaultTypeInternal _ServerKeepAlive_default_instance_;
class ServerSessionReq;
class ServerSessionReqDefaultTypeInternal;
extern ServerSessionReqDefaultTypeInternal _ServerSessionReq_default_instance_;
class ServerSessionRsp;
class ServerSessionRspDefaultTypeInternal;
extern ServerSessionRspDefaultTypeInternal _ServerSessionRsp_default_instance_;
class SessionReq;
class SessionReqDefaultTypeInternal;
extern SessionReqDefaultTypeInternal _SessionReq_default_instance_;
class SessionRsp;
class SessionRspDefaultTypeInternal;
extern SessionRspDefaultTypeInternal _SessionRsp_default_instance_;
class SetPullAttr;
class SetPullAttrDefaultTypeInternal;
extern SetPullAttrDefaultTypeInternal _SetPullAttr_default_instance_;
class StartOutputStream;
class StartOutputStreamDefaultTypeInternal;
extern StartOutputStreamDefaultTypeInternal _StartOutputStream_default_instance_;
class StopOutputStream;
class StopOutputStreamDefaultTypeInternal;
extern StopOutputStreamDefaultTypeInternal _StopOutputStream_default_instance_;
class StopPushingStream;
class StopPushingStreamDefaultTypeInternal;
extern StopPushingStreamDefaultTypeInternal _StopPushingStream_default_instance_;
class StreamInfo;
class StreamInfoDefaultTypeInternal;
extern StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
class SyncStatusReq;
class SyncStatusReqDefaultTypeInternal;
extern SyncStatusReqDefaultTypeInternal _SyncStatusReq_default_instance_;
class SyncStatusRsp;
class SyncStatusRspDefaultTypeInternal;
extern SyncStatusRspDefaultTypeInternal _SyncStatusRsp_default_instance_;
}  // namespace device
PROTOBUF_NAMESPACE_OPEN
template<> ::device::CommonRsp* Arena::CreateMaybeMessage<::device::CommonRsp>(Arena*);
template<> ::device::OutputStreamStatus* Arena::CreateMaybeMessage<::device::OutputStreamStatus>(Arena*);
template<> ::device::PushStreamReq* Arena::CreateMaybeMessage<::device::PushStreamReq>(Arena*);
template<> ::device::QuerySource* Arena::CreateMaybeMessage<::device::QuerySource>(Arena*);
template<> ::device::ServerKeepAlive* Arena::CreateMaybeMessage<::device::ServerKeepAlive>(Arena*);
template<> ::device::ServerSessionReq* Arena::CreateMaybeMessage<::device::ServerSessionReq>(Arena*);
template<> ::device::ServerSessionRsp* Arena::CreateMaybeMessage<::device::ServerSessionRsp>(Arena*);
template<> ::device::SessionReq* Arena::CreateMaybeMessage<::device::SessionReq>(Arena*);
template<> ::device::SessionRsp* Arena::CreateMaybeMessage<::device::SessionRsp>(Arena*);
template<> ::device::SetPullAttr* Arena::CreateMaybeMessage<::device::SetPullAttr>(Arena*);
template<> ::device::StartOutputStream* Arena::CreateMaybeMessage<::device::StartOutputStream>(Arena*);
template<> ::device::StopOutputStream* Arena::CreateMaybeMessage<::device::StopOutputStream>(Arena*);
template<> ::device::StopPushingStream* Arena::CreateMaybeMessage<::device::StopPushingStream>(Arena*);
template<> ::device::StreamInfo* Arena::CreateMaybeMessage<::device::StreamInfo>(Arena*);
template<> ::device::SyncStatusReq* Arena::CreateMaybeMessage<::device::SyncStatusReq>(Arena*);
template<> ::device::SyncStatusRsp* Arena::CreateMaybeMessage<::device::SyncStatusRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace device {

// ===================================================================

class StreamInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.StreamInfo) */ {
 public:
  inline StreamInfo() : StreamInfo(nullptr) {}
  virtual ~StreamInfo();

  StreamInfo(const StreamInfo& from);
  StreamInfo(StreamInfo&& from) noexcept
    : StreamInfo() {
    *this = ::std::move(from);
  }

  inline StreamInfo& operator=(const StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInfo& operator=(StreamInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamInfo& default_instance();

  static inline const StreamInfo* internal_default_instance() {
    return reinterpret_cast<const StreamInfo*>(
               &_StreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamInfo& a, StreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamInfo* New() const final {
    return CreateMaybeMessage<StreamInfo>(nullptr);
  }

  StreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamInfo& from);
  void MergeFrom(const StreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.StreamInfo";
  }
  protected:
  explicit StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamAddrFieldNumber = 8,
    kChannelFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kCurrentTimeFieldNumber = 3,
    kStopTimeFieldNumber = 4,
    kTotalBytesSndFieldNumber = 5,
    kReconnectCntFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // .common.StreamAddress streamAddr = 8;
  bool has_streamaddr() const;
  private:
  bool _internal_has_streamaddr() const;
  public:
  void clear_streamaddr();
  const ::common::StreamAddress& streamaddr() const;
  ::common::StreamAddress* release_streamaddr();
  ::common::StreamAddress* mutable_streamaddr();
  void set_allocated_streamaddr(::common::StreamAddress* streamaddr);
  private:
  const ::common::StreamAddress& _internal_streamaddr() const;
  ::common::StreamAddress* _internal_mutable_streamaddr();
  public:
  void unsafe_arena_set_allocated_streamaddr(
      ::common::StreamAddress* streamaddr);
  ::common::StreamAddress* unsafe_arena_release_streamaddr();

  // uint32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 currentTime = 3;
  void clear_currenttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 currenttime() const;
  void set_currenttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_currenttime() const;
  void _internal_set_currenttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stopTime = 4;
  void clear_stoptime();
  ::PROTOBUF_NAMESPACE_ID::uint32 stoptime() const;
  void set_stoptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stoptime() const;
  void _internal_set_stoptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 totalBytesSnd = 5;
  void clear_totalbytessnd();
  ::PROTOBUF_NAMESPACE_ID::int64 totalbytessnd() const;
  void set_totalbytessnd(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_totalbytessnd() const;
  void _internal_set_totalbytessnd(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 reconnectCnt = 6;
  void clear_reconnectcnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 reconnectcnt() const;
  void set_reconnectcnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reconnectcnt() const;
  void _internal_set_reconnectcnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 status = 7;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.StreamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::StreamAddress* streamaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currenttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stoptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalbytessnd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reconnectcnt_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class CommonRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.CommonRsp) */ {
 public:
  inline CommonRsp() : CommonRsp(nullptr) {}
  virtual ~CommonRsp();

  CommonRsp(const CommonRsp& from);
  CommonRsp(CommonRsp&& from) noexcept
    : CommonRsp() {
    *this = ::std::move(from);
  }

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRsp& operator=(CommonRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonRsp& default_instance();

  static inline const CommonRsp* internal_default_instance() {
    return reinterpret_cast<const CommonRsp*>(
               &_CommonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonRsp& a, CommonRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonRsp* New() const final {
    return CreateMaybeMessage<CommonRsp>(nullptr);
  }

  CommonRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonRsp& from);
  void MergeFrom(const CommonRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.CommonRsp";
  }
  protected:
  explicit CommonRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescripFieldNumber = 5,
    kCommandFieldNumber = 1,
    kSrcChnFieldNumber = 2,
    kOutChnFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // string descrip = 5;
  void clear_descrip();
  const std::string& descrip() const;
  void set_descrip(const std::string& value);
  void set_descrip(std::string&& value);
  void set_descrip(const char* value);
  void set_descrip(const char* value, size_t size);
  std::string* mutable_descrip();
  std::string* release_descrip();
  void set_allocated_descrip(std::string* descrip);
  private:
  const std::string& _internal_descrip() const;
  void _internal_set_descrip(const std::string& value);
  std::string* _internal_mutable_descrip();
  public:

  // int32 command = 1;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::int32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 srcChn = 2;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::int32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 outChn = 3;
  void clear_outchn();
  ::PROTOBUF_NAMESPACE_ID::int32 outchn() const;
  void set_outchn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outchn() const;
  void _internal_set_outchn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.CommonRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descrip_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_;
  ::PROTOBUF_NAMESPACE_ID::int32 srcchn_;
  ::PROTOBUF_NAMESPACE_ID::int32 outchn_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SessionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.SessionReq) */ {
 public:
  inline SessionReq() : SessionReq(nullptr) {}
  virtual ~SessionReq();

  SessionReq(const SessionReq& from);
  SessionReq(SessionReq&& from) noexcept
    : SessionReq() {
    *this = ::std::move(from);
  }

  inline SessionReq& operator=(const SessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionReq& operator=(SessionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionReq& default_instance();

  static inline const SessionReq* internal_default_instance() {
    return reinterpret_cast<const SessionReq*>(
               &_SessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionReq& a, SessionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionReq* New() const final {
    return CreateMaybeMessage<SessionReq>(nullptr);
  }

  SessionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionReq& from);
  void MergeFrom(const SessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.SessionReq";
  }
  protected:
  explicit SessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVersionFieldNumber = 3,
    kVendorFieldNumber = 4,
    kAccessTokenFieldNumber = 7,
    kOutputCapacityFieldNumber = 5,
    kMaxBitrateFieldNumber = 6,
    kMaxBitrate4KFieldNumber = 8,
  };
  // string sn = 1;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string vendor = 4;
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string accessToken = 7;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // uint32 outputCapacity = 5;
  void clear_outputcapacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 outputcapacity() const;
  void set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outputcapacity() const;
  void _internal_set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxBitrate = 6;
  void clear_maxbitrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate() const;
  void set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbitrate() const;
  void _internal_set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxBitrate4K = 8;
  void clear_maxbitrate4k();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate4k() const;
  void set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbitrate4k() const;
  void _internal_set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.SessionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputcapacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate4k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SessionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.SessionRsp) */ {
 public:
  inline SessionRsp() : SessionRsp(nullptr) {}
  virtual ~SessionRsp();

  SessionRsp(const SessionRsp& from);
  SessionRsp(SessionRsp&& from) noexcept
    : SessionRsp() {
    *this = ::std::move(from);
  }

  inline SessionRsp& operator=(const SessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRsp& operator=(SessionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRsp& default_instance();

  static inline const SessionRsp* internal_default_instance() {
    return reinterpret_cast<const SessionRsp*>(
               &_SessionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionRsp& a, SessionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRsp* New() const final {
    return CreateMaybeMessage<SessionRsp>(nullptr);
  }

  SessionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRsp& from);
  void MergeFrom(const SessionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.SessionRsp";
  }
  protected:
  explicit SessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPullAddrFieldNumber = 6,
    kStreamAddrFieldNumber = 4,
    kAccessResultFieldNumber = 1,
    kOutputCapacityFieldNumber = 2,
    kMaxBitrateFieldNumber = 3,
    kMaxBitrate4KFieldNumber = 5,
    kMaxPlayersFieldNumber = 7,
  };
  // string pullAddr = 6;
  void clear_pulladdr();
  const std::string& pulladdr() const;
  void set_pulladdr(const std::string& value);
  void set_pulladdr(std::string&& value);
  void set_pulladdr(const char* value);
  void set_pulladdr(const char* value, size_t size);
  std::string* mutable_pulladdr();
  std::string* release_pulladdr();
  void set_allocated_pulladdr(std::string* pulladdr);
  private:
  const std::string& _internal_pulladdr() const;
  void _internal_set_pulladdr(const std::string& value);
  std::string* _internal_mutable_pulladdr();
  public:

  // .common.StreamAddress streamAddr = 4;
  bool has_streamaddr() const;
  private:
  bool _internal_has_streamaddr() const;
  public:
  void clear_streamaddr();
  const ::common::StreamAddress& streamaddr() const;
  ::common::StreamAddress* release_streamaddr();
  ::common::StreamAddress* mutable_streamaddr();
  void set_allocated_streamaddr(::common::StreamAddress* streamaddr);
  private:
  const ::common::StreamAddress& _internal_streamaddr() const;
  ::common::StreamAddress* _internal_mutable_streamaddr();
  public:
  void unsafe_arena_set_allocated_streamaddr(
      ::common::StreamAddress* streamaddr);
  ::common::StreamAddress* unsafe_arena_release_streamaddr();

  // int32 accessResult = 1;
  void clear_accessresult();
  ::PROTOBUF_NAMESPACE_ID::int32 accessresult() const;
  void set_accessresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accessresult() const;
  void _internal_set_accessresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 outputCapacity = 2;
  void clear_outputcapacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 outputcapacity() const;
  void set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outputcapacity() const;
  void _internal_set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxBitrate = 3;
  void clear_maxbitrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate() const;
  void set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbitrate() const;
  void _internal_set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxBitrate4K = 5;
  void clear_maxbitrate4k();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate4k() const;
  void set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbitrate4k() const;
  void _internal_set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxPlayers = 7;
  void clear_maxplayers();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxplayers() const;
  void set_maxplayers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxplayers() const;
  void _internal_set_maxplayers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.SessionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pulladdr_;
  ::common::StreamAddress* streamaddr_;
  ::PROTOBUF_NAMESPACE_ID::int32 accessresult_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputcapacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate4k_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxplayers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class PushStreamReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.PushStreamReq) */ {
 public:
  inline PushStreamReq() : PushStreamReq(nullptr) {}
  virtual ~PushStreamReq();

  PushStreamReq(const PushStreamReq& from);
  PushStreamReq(PushStreamReq&& from) noexcept
    : PushStreamReq() {
    *this = ::std::move(from);
  }

  inline PushStreamReq& operator=(const PushStreamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushStreamReq& operator=(PushStreamReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushStreamReq& default_instance();

  static inline const PushStreamReq* internal_default_instance() {
    return reinterpret_cast<const PushStreamReq*>(
               &_PushStreamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PushStreamReq& a, PushStreamReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PushStreamReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushStreamReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushStreamReq* New() const final {
    return CreateMaybeMessage<PushStreamReq>(nullptr);
  }

  PushStreamReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushStreamReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushStreamReq& from);
  void MergeFrom(const PushStreamReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushStreamReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.PushStreamReq";
  }
  protected:
  explicit PushStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFieldNumber = 1,
    kChnFieldNumber = 2,
  };
  // string proto = 1;
  void clear_proto();
  const std::string& proto() const;
  void set_proto(const std::string& value);
  void set_proto(std::string&& value);
  void set_proto(const char* value);
  void set_proto(const char* value, size_t size);
  std::string* mutable_proto();
  std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // uint32 chn = 2;
  void clear_chn();
  ::PROTOBUF_NAMESPACE_ID::uint32 chn() const;
  void set_chn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chn() const;
  void _internal_set_chn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.PushStreamReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class StartOutputStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.StartOutputStream) */ {
 public:
  inline StartOutputStream() : StartOutputStream(nullptr) {}
  virtual ~StartOutputStream();

  StartOutputStream(const StartOutputStream& from);
  StartOutputStream(StartOutputStream&& from) noexcept
    : StartOutputStream() {
    *this = ::std::move(from);
  }

  inline StartOutputStream& operator=(const StartOutputStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartOutputStream& operator=(StartOutputStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartOutputStream& default_instance();

  static inline const StartOutputStream* internal_default_instance() {
    return reinterpret_cast<const StartOutputStream*>(
               &_StartOutputStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StartOutputStream& a, StartOutputStream& b) {
    a.Swap(&b);
  }
  inline void Swap(StartOutputStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartOutputStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartOutputStream* New() const final {
    return CreateMaybeMessage<StartOutputStream>(nullptr);
  }

  StartOutputStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartOutputStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartOutputStream& from);
  void MergeFrom(const StartOutputStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartOutputStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.StartOutputStream";
  }
  protected:
  explicit StartOutputStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kSrcChnFieldNumber = 1,
    kOutChnFieldNumber = 2,
  };
  // .common.StreamAddress address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::common::StreamAddress& address() const;
  ::common::StreamAddress* release_address();
  ::common::StreamAddress* mutable_address();
  void set_allocated_address(::common::StreamAddress* address);
  private:
  const ::common::StreamAddress& _internal_address() const;
  ::common::StreamAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::common::StreamAddress* address);
  ::common::StreamAddress* unsafe_arena_release_address();

  // uint32 srcChn = 1;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 outChn = 2;
  void clear_outchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 outchn() const;
  void set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outchn() const;
  void _internal_set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.StartOutputStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::StreamAddress* address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outchn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class StopOutputStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.StopOutputStream) */ {
 public:
  inline StopOutputStream() : StopOutputStream(nullptr) {}
  virtual ~StopOutputStream();

  StopOutputStream(const StopOutputStream& from);
  StopOutputStream(StopOutputStream&& from) noexcept
    : StopOutputStream() {
    *this = ::std::move(from);
  }

  inline StopOutputStream& operator=(const StopOutputStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopOutputStream& operator=(StopOutputStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopOutputStream& default_instance();

  static inline const StopOutputStream* internal_default_instance() {
    return reinterpret_cast<const StopOutputStream*>(
               &_StopOutputStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StopOutputStream& a, StopOutputStream& b) {
    a.Swap(&b);
  }
  inline void Swap(StopOutputStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopOutputStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopOutputStream* New() const final {
    return CreateMaybeMessage<StopOutputStream>(nullptr);
  }

  StopOutputStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopOutputStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopOutputStream& from);
  void MergeFrom(const StopOutputStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopOutputStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.StopOutputStream";
  }
  protected:
  explicit StopOutputStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChnFieldNumber = 1,
    kOutChnFieldNumber = 2,
  };
  // uint32 srcChn = 1;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 outChn = 2;
  void clear_outchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 outchn() const;
  void set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outchn() const;
  void _internal_set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.StopOutputStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outchn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class OutputStreamStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.OutputStreamStatus) */ {
 public:
  inline OutputStreamStatus() : OutputStreamStatus(nullptr) {}
  virtual ~OutputStreamStatus();

  OutputStreamStatus(const OutputStreamStatus& from);
  OutputStreamStatus(OutputStreamStatus&& from) noexcept
    : OutputStreamStatus() {
    *this = ::std::move(from);
  }

  inline OutputStreamStatus& operator=(const OutputStreamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputStreamStatus& operator=(OutputStreamStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputStreamStatus& default_instance();

  static inline const OutputStreamStatus* internal_default_instance() {
    return reinterpret_cast<const OutputStreamStatus*>(
               &_OutputStreamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OutputStreamStatus& a, OutputStreamStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputStreamStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputStreamStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputStreamStatus* New() const final {
    return CreateMaybeMessage<OutputStreamStatus>(nullptr);
  }

  OutputStreamStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputStreamStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputStreamStatus& from);
  void MergeFrom(const OutputStreamStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputStreamStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.OutputStreamStatus";
  }
  protected:
  explicit OutputStreamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChnFieldNumber = 1,
    kOutChnFieldNumber = 2,
    kStatusFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kLastErrCodeFieldNumber = 5,
  };
  // uint32 srcChn = 1;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 outChn = 2;
  void clear_outchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 outchn() const;
  void set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outchn() const;
  void _internal_set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 startTime = 4;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastErrCode = 5;
  void clear_lasterrcode();
  ::PROTOBUF_NAMESPACE_ID::int32 lasterrcode() const;
  void set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lasterrcode() const;
  void _internal_set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.OutputStreamStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outchn_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 lasterrcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class StopPushingStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.StopPushingStream) */ {
 public:
  inline StopPushingStream() : StopPushingStream(nullptr) {}
  virtual ~StopPushingStream();

  StopPushingStream(const StopPushingStream& from);
  StopPushingStream(StopPushingStream&& from) noexcept
    : StopPushingStream() {
    *this = ::std::move(from);
  }

  inline StopPushingStream& operator=(const StopPushingStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPushingStream& operator=(StopPushingStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPushingStream& default_instance();

  static inline const StopPushingStream* internal_default_instance() {
    return reinterpret_cast<const StopPushingStream*>(
               &_StopPushingStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopPushingStream& a, StopPushingStream& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPushingStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPushingStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPushingStream* New() const final {
    return CreateMaybeMessage<StopPushingStream>(nullptr);
  }

  StopPushingStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPushingStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPushingStream& from);
  void MergeFrom(const StopPushingStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPushingStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.StopPushingStream";
  }
  protected:
  explicit StopPushingStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChnFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // uint32 srcChn = 1;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 command = 2;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::int32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.StopPushingStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SyncStatusReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.SyncStatusReq) */ {
 public:
  inline SyncStatusReq() : SyncStatusReq(nullptr) {}
  virtual ~SyncStatusReq();

  SyncStatusReq(const SyncStatusReq& from);
  SyncStatusReq(SyncStatusReq&& from) noexcept
    : SyncStatusReq() {
    *this = ::std::move(from);
  }

  inline SyncStatusReq& operator=(const SyncStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncStatusReq& operator=(SyncStatusReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncStatusReq& default_instance();

  static inline const SyncStatusReq* internal_default_instance() {
    return reinterpret_cast<const SyncStatusReq*>(
               &_SyncStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SyncStatusReq& a, SyncStatusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncStatusReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncStatusReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncStatusReq* New() const final {
    return CreateMaybeMessage<SyncStatusReq>(nullptr);
  }

  SyncStatusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncStatusReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncStatusReq& from);
  void MergeFrom(const SyncStatusReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncStatusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.SyncStatusReq";
  }
  protected:
  explicit SyncStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChnFieldNumber = 1,
  };
  // uint32 srcChn = 1;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.SyncStatusReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SyncStatusRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.SyncStatusRsp) */ {
 public:
  inline SyncStatusRsp() : SyncStatusRsp(nullptr) {}
  virtual ~SyncStatusRsp();

  SyncStatusRsp(const SyncStatusRsp& from);
  SyncStatusRsp(SyncStatusRsp&& from) noexcept
    : SyncStatusRsp() {
    *this = ::std::move(from);
  }

  inline SyncStatusRsp& operator=(const SyncStatusRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncStatusRsp& operator=(SyncStatusRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncStatusRsp& default_instance();

  static inline const SyncStatusRsp* internal_default_instance() {
    return reinterpret_cast<const SyncStatusRsp*>(
               &_SyncStatusRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SyncStatusRsp& a, SyncStatusRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncStatusRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncStatusRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncStatusRsp* New() const final {
    return CreateMaybeMessage<SyncStatusRsp>(nullptr);
  }

  SyncStatusRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncStatusRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncStatusRsp& from);
  void MergeFrom(const SyncStatusRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncStatusRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.SyncStatusRsp";
  }
  protected:
  explicit SyncStatusRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamInfosFieldNumber = 7,
    kDevSNFieldNumber = 1,
    kSrcChnFieldNumber = 2,
    kCurrTsFieldNumber = 3,
    kSndCntFieldNumber = 4,
    kChnCapFieldNumber = 5,
    kMaxBitrateFieldNumber = 6,
    kMaxBitrate4KFieldNumber = 8,
    kPlayTotalBytesFieldNumber = 9,
    kPlayersFieldNumber = 10,
  };
  // repeated .device.StreamInfo streamInfos = 7;
  int streaminfos_size() const;
  private:
  int _internal_streaminfos_size() const;
  public:
  void clear_streaminfos();
  ::device::StreamInfo* mutable_streaminfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::device::StreamInfo >*
      mutable_streaminfos();
  private:
  const ::device::StreamInfo& _internal_streaminfos(int index) const;
  ::device::StreamInfo* _internal_add_streaminfos();
  public:
  const ::device::StreamInfo& streaminfos(int index) const;
  ::device::StreamInfo* add_streaminfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::device::StreamInfo >&
      streaminfos() const;

  // string devSN = 1;
  void clear_devsn();
  const std::string& devsn() const;
  void set_devsn(const std::string& value);
  void set_devsn(std::string&& value);
  void set_devsn(const char* value);
  void set_devsn(const char* value, size_t size);
  std::string* mutable_devsn();
  std::string* release_devsn();
  void set_allocated_devsn(std::string* devsn);
  private:
  const std::string& _internal_devsn() const;
  void _internal_set_devsn(const std::string& value);
  std::string* _internal_mutable_devsn();
  public:

  // uint32 srcChn = 2;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 currTs = 3;
  void clear_currts();
  ::PROTOBUF_NAMESPACE_ID::uint32 currts() const;
  void set_currts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_currts() const;
  void _internal_set_currts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sndCnt = 4;
  void clear_sndcnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 sndcnt() const;
  void set_sndcnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sndcnt() const;
  void _internal_set_sndcnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chnCap = 5;
  void clear_chncap();
  ::PROTOBUF_NAMESPACE_ID::uint32 chncap() const;
  void set_chncap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chncap() const;
  void _internal_set_chncap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxBitrate = 6;
  void clear_maxbitrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate() const;
  void set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbitrate() const;
  void _internal_set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxBitrate4K = 8;
  void clear_maxbitrate4k();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate4k() const;
  void set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxbitrate4k() const;
  void _internal_set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 playTotalBytes = 9;
  void clear_playtotalbytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 playtotalbytes() const;
  void set_playtotalbytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playtotalbytes() const;
  void _internal_set_playtotalbytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 players = 10;
  void clear_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 players() const;
  void set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players() const;
  void _internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.SyncStatusRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::device::StreamInfo > streaminfos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devsn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sndcnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chncap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxbitrate4k_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playtotalbytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class QuerySource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.QuerySource) */ {
 public:
  inline QuerySource() : QuerySource(nullptr) {}
  virtual ~QuerySource();

  QuerySource(const QuerySource& from);
  QuerySource(QuerySource&& from) noexcept
    : QuerySource() {
    *this = ::std::move(from);
  }

  inline QuerySource& operator=(const QuerySource& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySource& operator=(QuerySource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuerySource& default_instance();

  static inline const QuerySource* internal_default_instance() {
    return reinterpret_cast<const QuerySource*>(
               &_QuerySource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QuerySource& a, QuerySource& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuerySource* New() const final {
    return CreateMaybeMessage<QuerySource>(nullptr);
  }

  QuerySource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuerySource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuerySource& from);
  void MergeFrom(const QuerySource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.QuerySource";
  }
  protected:
  explicit QuerySource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevSNFieldNumber = 1,
    kSrcChnFieldNumber = 2,
  };
  // string devSN = 1;
  void clear_devsn();
  const std::string& devsn() const;
  void set_devsn(const std::string& value);
  void set_devsn(std::string&& value);
  void set_devsn(const char* value);
  void set_devsn(const char* value, size_t size);
  std::string* mutable_devsn();
  std::string* release_devsn();
  void set_allocated_devsn(std::string* devsn);
  private:
  const std::string& _internal_devsn() const;
  void _internal_set_devsn(const std::string& value);
  std::string* _internal_mutable_devsn();
  public:

  // uint32 srcChn = 2;
  void clear_srcchn();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn() const;
  void set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcchn() const;
  void _internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.QuerySource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devsn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcchn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SetPullAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.SetPullAttr) */ {
 public:
  inline SetPullAttr() : SetPullAttr(nullptr) {}
  virtual ~SetPullAttr();

  SetPullAttr(const SetPullAttr& from);
  SetPullAttr(SetPullAttr&& from) noexcept
    : SetPullAttr() {
    *this = ::std::move(from);
  }

  inline SetPullAttr& operator=(const SetPullAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPullAttr& operator=(SetPullAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPullAttr& default_instance();

  static inline const SetPullAttr* internal_default_instance() {
    return reinterpret_cast<const SetPullAttr*>(
               &_SetPullAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetPullAttr& a, SetPullAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPullAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPullAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPullAttr* New() const final {
    return CreateMaybeMessage<SetPullAttr>(nullptr);
  }

  SetPullAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPullAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPullAttr& from);
  void MergeFrom(const SetPullAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPullAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.SetPullAttr";
  }
  protected:
  explicit SetPullAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kForceStopFieldNumber = 2,
    kProtoFieldNumber = 3,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool forceStop = 2;
  void clear_forcestop();
  bool forcestop() const;
  void set_forcestop(bool value);
  private:
  bool _internal_forcestop() const;
  void _internal_set_forcestop(bool value);
  public:

  // uint32 proto = 3;
  void clear_proto();
  ::PROTOBUF_NAMESPACE_ID::uint32 proto() const;
  void set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proto() const;
  void _internal_set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.SetPullAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  bool forcestop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class ServerSessionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.ServerSessionReq) */ {
 public:
  inline ServerSessionReq() : ServerSessionReq(nullptr) {}
  virtual ~ServerSessionReq();

  ServerSessionReq(const ServerSessionReq& from);
  ServerSessionReq(ServerSessionReq&& from) noexcept
    : ServerSessionReq() {
    *this = ::std::move(from);
  }

  inline ServerSessionReq& operator=(const ServerSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSessionReq& operator=(ServerSessionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSessionReq& default_instance();

  static inline const ServerSessionReq* internal_default_instance() {
    return reinterpret_cast<const ServerSessionReq*>(
               &_ServerSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ServerSessionReq& a, ServerSessionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSessionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerSessionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSessionReq* New() const final {
    return CreateMaybeMessage<ServerSessionReq>(nullptr);
  }

  ServerSessionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSessionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSessionReq& from);
  void MergeFrom(const ServerSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSessionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.ServerSessionReq";
  }
  protected:
  explicit ServerSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerHostFieldNumber = 3,
    kServerPathFieldNumber = 4,
    kSecretKeyFieldNumber = 5,
    kServerVerFieldNumber = 6,
    kHbIntervalFieldNumber = 1,
    kServerPortFieldNumber = 2,
    kUptimeFieldNumber = 7,
  };
  // string serverHost = 3;
  void clear_serverhost();
  const std::string& serverhost() const;
  void set_serverhost(const std::string& value);
  void set_serverhost(std::string&& value);
  void set_serverhost(const char* value);
  void set_serverhost(const char* value, size_t size);
  std::string* mutable_serverhost();
  std::string* release_serverhost();
  void set_allocated_serverhost(std::string* serverhost);
  private:
  const std::string& _internal_serverhost() const;
  void _internal_set_serverhost(const std::string& value);
  std::string* _internal_mutable_serverhost();
  public:

  // string serverPath = 4;
  void clear_serverpath();
  const std::string& serverpath() const;
  void set_serverpath(const std::string& value);
  void set_serverpath(std::string&& value);
  void set_serverpath(const char* value);
  void set_serverpath(const char* value, size_t size);
  std::string* mutable_serverpath();
  std::string* release_serverpath();
  void set_allocated_serverpath(std::string* serverpath);
  private:
  const std::string& _internal_serverpath() const;
  void _internal_set_serverpath(const std::string& value);
  std::string* _internal_mutable_serverpath();
  public:

  // string secretKey = 5;
  void clear_secretkey();
  const std::string& secretkey() const;
  void set_secretkey(const std::string& value);
  void set_secretkey(std::string&& value);
  void set_secretkey(const char* value);
  void set_secretkey(const char* value, size_t size);
  std::string* mutable_secretkey();
  std::string* release_secretkey();
  void set_allocated_secretkey(std::string* secretkey);
  private:
  const std::string& _internal_secretkey() const;
  void _internal_set_secretkey(const std::string& value);
  std::string* _internal_mutable_secretkey();
  public:

  // string serverVer = 6;
  void clear_serverver();
  const std::string& serverver() const;
  void set_serverver(const std::string& value);
  void set_serverver(std::string&& value);
  void set_serverver(const char* value);
  void set_serverver(const char* value, size_t size);
  std::string* mutable_serverver();
  std::string* release_serverver();
  void set_allocated_serverver(std::string* serverver);
  private:
  const std::string& _internal_serverver() const;
  void _internal_set_serverver(const std::string& value);
  std::string* _internal_mutable_serverver();
  public:

  // uint32 hbInterval = 1;
  void clear_hbinterval();
  ::PROTOBUF_NAMESPACE_ID::uint32 hbinterval() const;
  void set_hbinterval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hbinterval() const;
  void _internal_set_hbinterval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serverPort = 2;
  void clear_serverport();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverport() const;
  void set_serverport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverport() const;
  void _internal_set_serverport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 uptime = 7;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:device.ServerSessionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverhost_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secretkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hbinterval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverport_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class ServerSessionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.ServerSessionRsp) */ {
 public:
  inline ServerSessionRsp() : ServerSessionRsp(nullptr) {}
  virtual ~ServerSessionRsp();

  ServerSessionRsp(const ServerSessionRsp& from);
  ServerSessionRsp(ServerSessionRsp&& from) noexcept
    : ServerSessionRsp() {
    *this = ::std::move(from);
  }

  inline ServerSessionRsp& operator=(const ServerSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSessionRsp& operator=(ServerSessionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSessionRsp& default_instance();

  static inline const ServerSessionRsp* internal_default_instance() {
    return reinterpret_cast<const ServerSessionRsp*>(
               &_ServerSessionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ServerSessionRsp& a, ServerSessionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSessionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerSessionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSessionRsp* New() const final {
    return CreateMaybeMessage<ServerSessionRsp>(nullptr);
  }

  ServerSessionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSessionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSessionRsp& from);
  void MergeFrom(const ServerSessionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSessionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.ServerSessionRsp";
  }
  protected:
  explicit ServerSessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionResultFieldNumber = 1,
  };
  // uint32 sessionResult = 1;
  void clear_sessionresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionresult() const;
  void set_sessionresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sessionresult() const;
  void _internal_set_sessionresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:device.ServerSessionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class ServerKeepAlive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:device.ServerKeepAlive) */ {
 public:
  inline ServerKeepAlive() : ServerKeepAlive(nullptr) {}
  virtual ~ServerKeepAlive();

  ServerKeepAlive(const ServerKeepAlive& from);
  ServerKeepAlive(ServerKeepAlive&& from) noexcept
    : ServerKeepAlive() {
    *this = ::std::move(from);
  }

  inline ServerKeepAlive& operator=(const ServerKeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerKeepAlive& operator=(ServerKeepAlive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerKeepAlive& default_instance();

  static inline const ServerKeepAlive* internal_default_instance() {
    return reinterpret_cast<const ServerKeepAlive*>(
               &_ServerKeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ServerKeepAlive& a, ServerKeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerKeepAlive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerKeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerKeepAlive* New() const final {
    return CreateMaybeMessage<ServerKeepAlive>(nullptr);
  }

  ServerKeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerKeepAlive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerKeepAlive& from);
  void MergeFrom(const ServerKeepAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerKeepAlive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "device.ServerKeepAlive";
  }
  protected:
  explicit ServerKeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_device_2eproto);
    return ::descriptor_table_device_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeFieldNumber = 1,
    kCurTimeFieldNumber = 2,
  };
  // int64 uptime = 1;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cur_time = 2;
  void clear_cur_time();
  ::PROTOBUF_NAMESPACE_ID::int64 cur_time() const;
  void set_cur_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cur_time() const;
  void _internal_set_cur_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:device.ServerKeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 cur_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamInfo

// uint32 channel = 1;
inline void StreamInfo::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::channel() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.channel)
  return _internal_channel();
}
inline void StreamInfo::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void StreamInfo::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.channel)
}

// uint32 startTime = 2;
inline void StreamInfo::clear_starttime() {
  starttime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::starttime() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.startTime)
  return _internal_starttime();
}
inline void StreamInfo::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  starttime_ = value;
}
inline void StreamInfo::set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.startTime)
}

// uint32 currentTime = 3;
inline void StreamInfo::clear_currenttime() {
  currenttime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::_internal_currenttime() const {
  return currenttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::currenttime() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.currentTime)
  return _internal_currenttime();
}
inline void StreamInfo::_internal_set_currenttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currenttime_ = value;
}
inline void StreamInfo::set_currenttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_currenttime(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.currentTime)
}

// uint32 stopTime = 4;
inline void StreamInfo::clear_stoptime() {
  stoptime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::_internal_stoptime() const {
  return stoptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::stoptime() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.stopTime)
  return _internal_stoptime();
}
inline void StreamInfo::_internal_set_stoptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stoptime_ = value;
}
inline void StreamInfo::set_stoptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stoptime(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.stopTime)
}

// int64 totalBytesSnd = 5;
inline void StreamInfo::clear_totalbytessnd() {
  totalbytessnd_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamInfo::_internal_totalbytessnd() const {
  return totalbytessnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamInfo::totalbytessnd() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.totalBytesSnd)
  return _internal_totalbytessnd();
}
inline void StreamInfo::_internal_set_totalbytessnd(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalbytessnd_ = value;
}
inline void StreamInfo::set_totalbytessnd(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_totalbytessnd(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.totalBytesSnd)
}

// uint32 reconnectCnt = 6;
inline void StreamInfo::clear_reconnectcnt() {
  reconnectcnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::_internal_reconnectcnt() const {
  return reconnectcnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInfo::reconnectcnt() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.reconnectCnt)
  return _internal_reconnectcnt();
}
inline void StreamInfo::_internal_set_reconnectcnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reconnectcnt_ = value;
}
inline void StreamInfo::set_reconnectcnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reconnectcnt(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.reconnectCnt)
}

// int32 status = 7;
inline void StreamInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamInfo::status() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.status)
  return _internal_status();
}
inline void StreamInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void StreamInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:device.StreamInfo.status)
}

// .common.StreamAddress streamAddr = 8;
inline bool StreamInfo::_internal_has_streamaddr() const {
  return this != internal_default_instance() && streamaddr_ != nullptr;
}
inline bool StreamInfo::has_streamaddr() const {
  return _internal_has_streamaddr();
}
inline const ::common::StreamAddress& StreamInfo::_internal_streamaddr() const {
  const ::common::StreamAddress* p = streamaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::StreamAddress&>(
      ::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& StreamInfo::streamaddr() const {
  // @@protoc_insertion_point(field_get:device.StreamInfo.streamAddr)
  return _internal_streamaddr();
}
inline void StreamInfo::unsafe_arena_set_allocated_streamaddr(
    ::common::StreamAddress* streamaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamaddr_);
  }
  streamaddr_ = streamaddr;
  if (streamaddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:device.StreamInfo.streamAddr)
}
inline ::common::StreamAddress* StreamInfo::release_streamaddr() {
  
  ::common::StreamAddress* temp = streamaddr_;
  streamaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::StreamAddress* StreamInfo::unsafe_arena_release_streamaddr() {
  // @@protoc_insertion_point(field_release:device.StreamInfo.streamAddr)
  
  ::common::StreamAddress* temp = streamaddr_;
  streamaddr_ = nullptr;
  return temp;
}
inline ::common::StreamAddress* StreamInfo::_internal_mutable_streamaddr() {
  
  if (streamaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::StreamAddress>(GetArena());
    streamaddr_ = p;
  }
  return streamaddr_;
}
inline ::common::StreamAddress* StreamInfo::mutable_streamaddr() {
  // @@protoc_insertion_point(field_mutable:device.StreamInfo.streamAddr)
  return _internal_mutable_streamaddr();
}
inline void StreamInfo::set_allocated_streamaddr(::common::StreamAddress* streamaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamaddr_);
  }
  if (streamaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamaddr)->GetArena();
    if (message_arena != submessage_arena) {
      streamaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streamaddr, submessage_arena);
    }
    
  } else {
    
  }
  streamaddr_ = streamaddr;
  // @@protoc_insertion_point(field_set_allocated:device.StreamInfo.streamAddr)
}

// -------------------------------------------------------------------

// CommonRsp

// int32 command = 1;
inline void CommonRsp::clear_command() {
  command_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::command() const {
  // @@protoc_insertion_point(field_get:device.CommonRsp.command)
  return _internal_command();
}
inline void CommonRsp::_internal_set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  command_ = value;
}
inline void CommonRsp::set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:device.CommonRsp.command)
}

// int32 srcChn = 2;
inline void CommonRsp::clear_srcchn() {
  srcchn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::srcchn() const {
  // @@protoc_insertion_point(field_get:device.CommonRsp.srcChn)
  return _internal_srcchn();
}
inline void CommonRsp::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  srcchn_ = value;
}
inline void CommonRsp::set_srcchn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.CommonRsp.srcChn)
}

// int32 outChn = 3;
inline void CommonRsp::clear_outchn() {
  outchn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::_internal_outchn() const {
  return outchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::outchn() const {
  // @@protoc_insertion_point(field_get:device.CommonRsp.outChn)
  return _internal_outchn();
}
inline void CommonRsp::_internal_set_outchn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  outchn_ = value;
}
inline void CommonRsp::set_outchn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_outchn(value);
  // @@protoc_insertion_point(field_set:device.CommonRsp.outChn)
}

// int32 result = 4;
inline void CommonRsp::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonRsp::result() const {
  // @@protoc_insertion_point(field_get:device.CommonRsp.result)
  return _internal_result();
}
inline void CommonRsp::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void CommonRsp::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:device.CommonRsp.result)
}

// string descrip = 5;
inline void CommonRsp::clear_descrip() {
  descrip_.ClearToEmpty();
}
inline const std::string& CommonRsp::descrip() const {
  // @@protoc_insertion_point(field_get:device.CommonRsp.descrip)
  return _internal_descrip();
}
inline void CommonRsp::set_descrip(const std::string& value) {
  _internal_set_descrip(value);
  // @@protoc_insertion_point(field_set:device.CommonRsp.descrip)
}
inline std::string* CommonRsp::mutable_descrip() {
  // @@protoc_insertion_point(field_mutable:device.CommonRsp.descrip)
  return _internal_mutable_descrip();
}
inline const std::string& CommonRsp::_internal_descrip() const {
  return descrip_.Get();
}
inline void CommonRsp::_internal_set_descrip(const std::string& value) {
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonRsp::set_descrip(std::string&& value) {
  
  descrip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.CommonRsp.descrip)
}
inline void CommonRsp::set_descrip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.CommonRsp.descrip)
}
inline void CommonRsp::set_descrip(const char* value,
    size_t size) {
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.CommonRsp.descrip)
}
inline std::string* CommonRsp::_internal_mutable_descrip() {
  
  return descrip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonRsp::release_descrip() {
  // @@protoc_insertion_point(field_release:device.CommonRsp.descrip)
  return descrip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonRsp::set_allocated_descrip(std::string* descrip) {
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descrip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.CommonRsp.descrip)
}

// -------------------------------------------------------------------

// SessionReq

// string sn = 1;
inline void SessionReq::clear_sn() {
  sn_.ClearToEmpty();
}
inline const std::string& SessionReq::sn() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.sn)
  return _internal_sn();
}
inline void SessionReq::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.sn)
}
inline std::string* SessionReq::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:device.SessionReq.sn)
  return _internal_mutable_sn();
}
inline const std::string& SessionReq::_internal_sn() const {
  return sn_.Get();
}
inline void SessionReq::_internal_set_sn(const std::string& value) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionReq::set_sn(std::string&& value) {
  
  sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SessionReq.sn)
}
inline void SessionReq::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SessionReq.sn)
}
inline void SessionReq::set_sn(const char* value,
    size_t size) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SessionReq.sn)
}
inline std::string* SessionReq::_internal_mutable_sn() {
  
  return sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionReq::release_sn() {
  // @@protoc_insertion_point(field_release:device.SessionReq.sn)
  return sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionReq::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SessionReq.sn)
}

// string type = 2;
inline void SessionReq::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& SessionReq::type() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.type)
  return _internal_type();
}
inline void SessionReq::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.type)
}
inline std::string* SessionReq::mutable_type() {
  // @@protoc_insertion_point(field_mutable:device.SessionReq.type)
  return _internal_mutable_type();
}
inline const std::string& SessionReq::_internal_type() const {
  return type_.Get();
}
inline void SessionReq::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionReq::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SessionReq.type)
}
inline void SessionReq::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SessionReq.type)
}
inline void SessionReq::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SessionReq.type)
}
inline std::string* SessionReq::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionReq::release_type() {
  // @@protoc_insertion_point(field_release:device.SessionReq.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionReq::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SessionReq.type)
}

// string version = 3;
inline void SessionReq::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SessionReq::version() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.version)
  return _internal_version();
}
inline void SessionReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.version)
}
inline std::string* SessionReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:device.SessionReq.version)
  return _internal_mutable_version();
}
inline const std::string& SessionReq::_internal_version() const {
  return version_.Get();
}
inline void SessionReq::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionReq::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SessionReq.version)
}
inline void SessionReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SessionReq.version)
}
inline void SessionReq::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SessionReq.version)
}
inline std::string* SessionReq::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionReq::release_version() {
  // @@protoc_insertion_point(field_release:device.SessionReq.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SessionReq.version)
}

// string vendor = 4;
inline void SessionReq::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& SessionReq::vendor() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.vendor)
  return _internal_vendor();
}
inline void SessionReq::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.vendor)
}
inline std::string* SessionReq::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:device.SessionReq.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& SessionReq::_internal_vendor() const {
  return vendor_.Get();
}
inline void SessionReq::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionReq::set_vendor(std::string&& value) {
  
  vendor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SessionReq.vendor)
}
inline void SessionReq::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SessionReq.vendor)
}
inline void SessionReq::set_vendor(const char* value,
    size_t size) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SessionReq.vendor)
}
inline std::string* SessionReq::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionReq::release_vendor() {
  // @@protoc_insertion_point(field_release:device.SessionReq.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionReq::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SessionReq.vendor)
}

// uint32 outputCapacity = 5;
inline void SessionReq::clear_outputcapacity() {
  outputcapacity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionReq::_internal_outputcapacity() const {
  return outputcapacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionReq::outputcapacity() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.outputCapacity)
  return _internal_outputcapacity();
}
inline void SessionReq::_internal_set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputcapacity_ = value;
}
inline void SessionReq::set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outputcapacity(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.outputCapacity)
}

// uint32 maxBitrate = 6;
inline void SessionReq::clear_maxbitrate() {
  maxbitrate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionReq::_internal_maxbitrate() const {
  return maxbitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionReq::maxbitrate() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.maxBitrate)
  return _internal_maxbitrate();
}
inline void SessionReq::_internal_set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbitrate_ = value;
}
inline void SessionReq::set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbitrate(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.maxBitrate)
}

// string accessToken = 7;
inline void SessionReq::clear_accesstoken() {
  accesstoken_.ClearToEmpty();
}
inline const std::string& SessionReq::accesstoken() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.accessToken)
  return _internal_accesstoken();
}
inline void SessionReq::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.accessToken)
}
inline std::string* SessionReq::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:device.SessionReq.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& SessionReq::_internal_accesstoken() const {
  return accesstoken_.Get();
}
inline void SessionReq::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionReq::set_accesstoken(std::string&& value) {
  
  accesstoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SessionReq.accessToken)
}
inline void SessionReq::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SessionReq.accessToken)
}
inline void SessionReq::set_accesstoken(const char* value,
    size_t size) {
  
  accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SessionReq.accessToken)
}
inline std::string* SessionReq::_internal_mutable_accesstoken() {
  
  return accesstoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionReq::release_accesstoken() {
  // @@protoc_insertion_point(field_release:device.SessionReq.accessToken)
  return accesstoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionReq::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SessionReq.accessToken)
}

// uint32 maxBitrate4K = 8;
inline void SessionReq::clear_maxbitrate4k() {
  maxbitrate4k_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionReq::_internal_maxbitrate4k() const {
  return maxbitrate4k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionReq::maxbitrate4k() const {
  // @@protoc_insertion_point(field_get:device.SessionReq.maxBitrate4K)
  return _internal_maxbitrate4k();
}
inline void SessionReq::_internal_set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbitrate4k_ = value;
}
inline void SessionReq::set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbitrate4k(value);
  // @@protoc_insertion_point(field_set:device.SessionReq.maxBitrate4K)
}

// -------------------------------------------------------------------

// SessionRsp

// int32 accessResult = 1;
inline void SessionRsp::clear_accessresult() {
  accessresult_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionRsp::_internal_accessresult() const {
  return accessresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionRsp::accessresult() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.accessResult)
  return _internal_accessresult();
}
inline void SessionRsp::_internal_set_accessresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accessresult_ = value;
}
inline void SessionRsp::set_accessresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accessresult(value);
  // @@protoc_insertion_point(field_set:device.SessionRsp.accessResult)
}

// uint32 outputCapacity = 2;
inline void SessionRsp::clear_outputcapacity() {
  outputcapacity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::_internal_outputcapacity() const {
  return outputcapacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::outputcapacity() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.outputCapacity)
  return _internal_outputcapacity();
}
inline void SessionRsp::_internal_set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputcapacity_ = value;
}
inline void SessionRsp::set_outputcapacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outputcapacity(value);
  // @@protoc_insertion_point(field_set:device.SessionRsp.outputCapacity)
}

// uint32 maxBitrate = 3;
inline void SessionRsp::clear_maxbitrate() {
  maxbitrate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::_internal_maxbitrate() const {
  return maxbitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::maxbitrate() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.maxBitrate)
  return _internal_maxbitrate();
}
inline void SessionRsp::_internal_set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbitrate_ = value;
}
inline void SessionRsp::set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbitrate(value);
  // @@protoc_insertion_point(field_set:device.SessionRsp.maxBitrate)
}

// .common.StreamAddress streamAddr = 4;
inline bool SessionRsp::_internal_has_streamaddr() const {
  return this != internal_default_instance() && streamaddr_ != nullptr;
}
inline bool SessionRsp::has_streamaddr() const {
  return _internal_has_streamaddr();
}
inline const ::common::StreamAddress& SessionRsp::_internal_streamaddr() const {
  const ::common::StreamAddress* p = streamaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::StreamAddress&>(
      ::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& SessionRsp::streamaddr() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.streamAddr)
  return _internal_streamaddr();
}
inline void SessionRsp::unsafe_arena_set_allocated_streamaddr(
    ::common::StreamAddress* streamaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamaddr_);
  }
  streamaddr_ = streamaddr;
  if (streamaddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:device.SessionRsp.streamAddr)
}
inline ::common::StreamAddress* SessionRsp::release_streamaddr() {
  
  ::common::StreamAddress* temp = streamaddr_;
  streamaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::StreamAddress* SessionRsp::unsafe_arena_release_streamaddr() {
  // @@protoc_insertion_point(field_release:device.SessionRsp.streamAddr)
  
  ::common::StreamAddress* temp = streamaddr_;
  streamaddr_ = nullptr;
  return temp;
}
inline ::common::StreamAddress* SessionRsp::_internal_mutable_streamaddr() {
  
  if (streamaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::StreamAddress>(GetArena());
    streamaddr_ = p;
  }
  return streamaddr_;
}
inline ::common::StreamAddress* SessionRsp::mutable_streamaddr() {
  // @@protoc_insertion_point(field_mutable:device.SessionRsp.streamAddr)
  return _internal_mutable_streamaddr();
}
inline void SessionRsp::set_allocated_streamaddr(::common::StreamAddress* streamaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamaddr_);
  }
  if (streamaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamaddr)->GetArena();
    if (message_arena != submessage_arena) {
      streamaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streamaddr, submessage_arena);
    }
    
  } else {
    
  }
  streamaddr_ = streamaddr;
  // @@protoc_insertion_point(field_set_allocated:device.SessionRsp.streamAddr)
}

// uint32 maxBitrate4K = 5;
inline void SessionRsp::clear_maxbitrate4k() {
  maxbitrate4k_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::_internal_maxbitrate4k() const {
  return maxbitrate4k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::maxbitrate4k() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.maxBitrate4K)
  return _internal_maxbitrate4k();
}
inline void SessionRsp::_internal_set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbitrate4k_ = value;
}
inline void SessionRsp::set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbitrate4k(value);
  // @@protoc_insertion_point(field_set:device.SessionRsp.maxBitrate4K)
}

// string pullAddr = 6;
inline void SessionRsp::clear_pulladdr() {
  pulladdr_.ClearToEmpty();
}
inline const std::string& SessionRsp::pulladdr() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.pullAddr)
  return _internal_pulladdr();
}
inline void SessionRsp::set_pulladdr(const std::string& value) {
  _internal_set_pulladdr(value);
  // @@protoc_insertion_point(field_set:device.SessionRsp.pullAddr)
}
inline std::string* SessionRsp::mutable_pulladdr() {
  // @@protoc_insertion_point(field_mutable:device.SessionRsp.pullAddr)
  return _internal_mutable_pulladdr();
}
inline const std::string& SessionRsp::_internal_pulladdr() const {
  return pulladdr_.Get();
}
inline void SessionRsp::_internal_set_pulladdr(const std::string& value) {
  
  pulladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionRsp::set_pulladdr(std::string&& value) {
  
  pulladdr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SessionRsp.pullAddr)
}
inline void SessionRsp::set_pulladdr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pulladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SessionRsp.pullAddr)
}
inline void SessionRsp::set_pulladdr(const char* value,
    size_t size) {
  
  pulladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SessionRsp.pullAddr)
}
inline std::string* SessionRsp::_internal_mutable_pulladdr() {
  
  return pulladdr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionRsp::release_pulladdr() {
  // @@protoc_insertion_point(field_release:device.SessionRsp.pullAddr)
  return pulladdr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionRsp::set_allocated_pulladdr(std::string* pulladdr) {
  if (pulladdr != nullptr) {
    
  } else {
    
  }
  pulladdr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pulladdr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SessionRsp.pullAddr)
}

// uint32 maxPlayers = 7;
inline void SessionRsp::clear_maxplayers() {
  maxplayers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::_internal_maxplayers() const {
  return maxplayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionRsp::maxplayers() const {
  // @@protoc_insertion_point(field_get:device.SessionRsp.maxPlayers)
  return _internal_maxplayers();
}
inline void SessionRsp::_internal_set_maxplayers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxplayers_ = value;
}
inline void SessionRsp::set_maxplayers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:device.SessionRsp.maxPlayers)
}

// -------------------------------------------------------------------

// PushStreamReq

// string proto = 1;
inline void PushStreamReq::clear_proto() {
  proto_.ClearToEmpty();
}
inline const std::string& PushStreamReq::proto() const {
  // @@protoc_insertion_point(field_get:device.PushStreamReq.proto)
  return _internal_proto();
}
inline void PushStreamReq::set_proto(const std::string& value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:device.PushStreamReq.proto)
}
inline std::string* PushStreamReq::mutable_proto() {
  // @@protoc_insertion_point(field_mutable:device.PushStreamReq.proto)
  return _internal_mutable_proto();
}
inline const std::string& PushStreamReq::_internal_proto() const {
  return proto_.Get();
}
inline void PushStreamReq::_internal_set_proto(const std::string& value) {
  
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushStreamReq::set_proto(std::string&& value) {
  
  proto_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.PushStreamReq.proto)
}
inline void PushStreamReq::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.PushStreamReq.proto)
}
inline void PushStreamReq::set_proto(const char* value,
    size_t size) {
  
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.PushStreamReq.proto)
}
inline std::string* PushStreamReq::_internal_mutable_proto() {
  
  return proto_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushStreamReq::release_proto() {
  // @@protoc_insertion_point(field_release:device.PushStreamReq.proto)
  return proto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushStreamReq::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  proto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.PushStreamReq.proto)
}

// uint32 chn = 2;
inline void PushStreamReq::clear_chn() {
  chn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushStreamReq::_internal_chn() const {
  return chn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushStreamReq::chn() const {
  // @@protoc_insertion_point(field_get:device.PushStreamReq.chn)
  return _internal_chn();
}
inline void PushStreamReq::_internal_set_chn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chn_ = value;
}
inline void PushStreamReq::set_chn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chn(value);
  // @@protoc_insertion_point(field_set:device.PushStreamReq.chn)
}

// -------------------------------------------------------------------

// StartOutputStream

// uint32 srcChn = 1;
inline void StartOutputStream::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartOutputStream::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartOutputStream::srcchn() const {
  // @@protoc_insertion_point(field_get:device.StartOutputStream.srcChn)
  return _internal_srcchn();
}
inline void StartOutputStream::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void StartOutputStream::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.StartOutputStream.srcChn)
}

// uint32 outChn = 2;
inline void StartOutputStream::clear_outchn() {
  outchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartOutputStream::_internal_outchn() const {
  return outchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartOutputStream::outchn() const {
  // @@protoc_insertion_point(field_get:device.StartOutputStream.outChn)
  return _internal_outchn();
}
inline void StartOutputStream::_internal_set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outchn_ = value;
}
inline void StartOutputStream::set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outchn(value);
  // @@protoc_insertion_point(field_set:device.StartOutputStream.outChn)
}

// .common.StreamAddress address = 3;
inline bool StartOutputStream::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool StartOutputStream::has_address() const {
  return _internal_has_address();
}
inline const ::common::StreamAddress& StartOutputStream::_internal_address() const {
  const ::common::StreamAddress* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::StreamAddress&>(
      ::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& StartOutputStream::address() const {
  // @@protoc_insertion_point(field_get:device.StartOutputStream.address)
  return _internal_address();
}
inline void StartOutputStream::unsafe_arena_set_allocated_address(
    ::common::StreamAddress* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:device.StartOutputStream.address)
}
inline ::common::StreamAddress* StartOutputStream::release_address() {
  
  ::common::StreamAddress* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::StreamAddress* StartOutputStream::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:device.StartOutputStream.address)
  
  ::common::StreamAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::common::StreamAddress* StartOutputStream::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::StreamAddress>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::common::StreamAddress* StartOutputStream::mutable_address() {
  // @@protoc_insertion_point(field_mutable:device.StartOutputStream.address)
  return _internal_mutable_address();
}
inline void StartOutputStream::set_allocated_address(::common::StreamAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:device.StartOutputStream.address)
}

// -------------------------------------------------------------------

// StopOutputStream

// uint32 srcChn = 1;
inline void StopOutputStream::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopOutputStream::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopOutputStream::srcchn() const {
  // @@protoc_insertion_point(field_get:device.StopOutputStream.srcChn)
  return _internal_srcchn();
}
inline void StopOutputStream::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void StopOutputStream::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.StopOutputStream.srcChn)
}

// uint32 outChn = 2;
inline void StopOutputStream::clear_outchn() {
  outchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopOutputStream::_internal_outchn() const {
  return outchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopOutputStream::outchn() const {
  // @@protoc_insertion_point(field_get:device.StopOutputStream.outChn)
  return _internal_outchn();
}
inline void StopOutputStream::_internal_set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outchn_ = value;
}
inline void StopOutputStream::set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outchn(value);
  // @@protoc_insertion_point(field_set:device.StopOutputStream.outChn)
}

// -------------------------------------------------------------------

// OutputStreamStatus

// uint32 srcChn = 1;
inline void OutputStreamStatus::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputStreamStatus::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputStreamStatus::srcchn() const {
  // @@protoc_insertion_point(field_get:device.OutputStreamStatus.srcChn)
  return _internal_srcchn();
}
inline void OutputStreamStatus::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void OutputStreamStatus::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.OutputStreamStatus.srcChn)
}

// uint32 outChn = 2;
inline void OutputStreamStatus::clear_outchn() {
  outchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputStreamStatus::_internal_outchn() const {
  return outchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputStreamStatus::outchn() const {
  // @@protoc_insertion_point(field_get:device.OutputStreamStatus.outChn)
  return _internal_outchn();
}
inline void OutputStreamStatus::_internal_set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outchn_ = value;
}
inline void OutputStreamStatus::set_outchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outchn(value);
  // @@protoc_insertion_point(field_set:device.OutputStreamStatus.outChn)
}

// int32 status = 3;
inline void OutputStreamStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputStreamStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputStreamStatus::status() const {
  // @@protoc_insertion_point(field_get:device.OutputStreamStatus.status)
  return _internal_status();
}
inline void OutputStreamStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void OutputStreamStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:device.OutputStreamStatus.status)
}

// int32 startTime = 4;
inline void OutputStreamStatus::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputStreamStatus::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputStreamStatus::starttime() const {
  // @@protoc_insertion_point(field_get:device.OutputStreamStatus.startTime)
  return _internal_starttime();
}
inline void OutputStreamStatus::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void OutputStreamStatus::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:device.OutputStreamStatus.startTime)
}

// int32 lastErrCode = 5;
inline void OutputStreamStatus::clear_lasterrcode() {
  lasterrcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputStreamStatus::_internal_lasterrcode() const {
  return lasterrcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputStreamStatus::lasterrcode() const {
  // @@protoc_insertion_point(field_get:device.OutputStreamStatus.lastErrCode)
  return _internal_lasterrcode();
}
inline void OutputStreamStatus::_internal_set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lasterrcode_ = value;
}
inline void OutputStreamStatus::set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lasterrcode(value);
  // @@protoc_insertion_point(field_set:device.OutputStreamStatus.lastErrCode)
}

// -------------------------------------------------------------------

// StopPushingStream

// uint32 srcChn = 1;
inline void StopPushingStream::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopPushingStream::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopPushingStream::srcchn() const {
  // @@protoc_insertion_point(field_get:device.StopPushingStream.srcChn)
  return _internal_srcchn();
}
inline void StopPushingStream::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void StopPushingStream::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.StopPushingStream.srcChn)
}

// int32 command = 2;
inline void StopPushingStream::clear_command() {
  command_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopPushingStream::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopPushingStream::command() const {
  // @@protoc_insertion_point(field_get:device.StopPushingStream.command)
  return _internal_command();
}
inline void StopPushingStream::_internal_set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  command_ = value;
}
inline void StopPushingStream::set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:device.StopPushingStream.command)
}

// -------------------------------------------------------------------

// SyncStatusReq

// uint32 srcChn = 1;
inline void SyncStatusReq::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusReq::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusReq::srcchn() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusReq.srcChn)
  return _internal_srcchn();
}
inline void SyncStatusReq::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void SyncStatusReq::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusReq.srcChn)
}

// -------------------------------------------------------------------

// SyncStatusRsp

// string devSN = 1;
inline void SyncStatusRsp::clear_devsn() {
  devsn_.ClearToEmpty();
}
inline const std::string& SyncStatusRsp::devsn() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.devSN)
  return _internal_devsn();
}
inline void SyncStatusRsp::set_devsn(const std::string& value) {
  _internal_set_devsn(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.devSN)
}
inline std::string* SyncStatusRsp::mutable_devsn() {
  // @@protoc_insertion_point(field_mutable:device.SyncStatusRsp.devSN)
  return _internal_mutable_devsn();
}
inline const std::string& SyncStatusRsp::_internal_devsn() const {
  return devsn_.Get();
}
inline void SyncStatusRsp::_internal_set_devsn(const std::string& value) {
  
  devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SyncStatusRsp::set_devsn(std::string&& value) {
  
  devsn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.SyncStatusRsp.devSN)
}
inline void SyncStatusRsp::set_devsn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.SyncStatusRsp.devSN)
}
inline void SyncStatusRsp::set_devsn(const char* value,
    size_t size) {
  
  devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.SyncStatusRsp.devSN)
}
inline std::string* SyncStatusRsp::_internal_mutable_devsn() {
  
  return devsn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SyncStatusRsp::release_devsn() {
  // @@protoc_insertion_point(field_release:device.SyncStatusRsp.devSN)
  return devsn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncStatusRsp::set_allocated_devsn(std::string* devsn) {
  if (devsn != nullptr) {
    
  } else {
    
  }
  devsn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devsn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.SyncStatusRsp.devSN)
}

// uint32 srcChn = 2;
inline void SyncStatusRsp::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::srcchn() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.srcChn)
  return _internal_srcchn();
}
inline void SyncStatusRsp::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void SyncStatusRsp::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.srcChn)
}

// uint32 currTs = 3;
inline void SyncStatusRsp::clear_currts() {
  currts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_currts() const {
  return currts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::currts() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.currTs)
  return _internal_currts();
}
inline void SyncStatusRsp::_internal_set_currts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currts_ = value;
}
inline void SyncStatusRsp::set_currts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_currts(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.currTs)
}

// uint32 sndCnt = 4;
inline void SyncStatusRsp::clear_sndcnt() {
  sndcnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_sndcnt() const {
  return sndcnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::sndcnt() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.sndCnt)
  return _internal_sndcnt();
}
inline void SyncStatusRsp::_internal_set_sndcnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sndcnt_ = value;
}
inline void SyncStatusRsp::set_sndcnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sndcnt(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.sndCnt)
}

// uint32 chnCap = 5;
inline void SyncStatusRsp::clear_chncap() {
  chncap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_chncap() const {
  return chncap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::chncap() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.chnCap)
  return _internal_chncap();
}
inline void SyncStatusRsp::_internal_set_chncap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chncap_ = value;
}
inline void SyncStatusRsp::set_chncap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chncap(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.chnCap)
}

// uint32 maxBitrate = 6;
inline void SyncStatusRsp::clear_maxbitrate() {
  maxbitrate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_maxbitrate() const {
  return maxbitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::maxbitrate() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.maxBitrate)
  return _internal_maxbitrate();
}
inline void SyncStatusRsp::_internal_set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbitrate_ = value;
}
inline void SyncStatusRsp::set_maxbitrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbitrate(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.maxBitrate)
}

// repeated .device.StreamInfo streamInfos = 7;
inline int SyncStatusRsp::_internal_streaminfos_size() const {
  return streaminfos_.size();
}
inline int SyncStatusRsp::streaminfos_size() const {
  return _internal_streaminfos_size();
}
inline void SyncStatusRsp::clear_streaminfos() {
  streaminfos_.Clear();
}
inline ::device::StreamInfo* SyncStatusRsp::mutable_streaminfos(int index) {
  // @@protoc_insertion_point(field_mutable:device.SyncStatusRsp.streamInfos)
  return streaminfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::device::StreamInfo >*
SyncStatusRsp::mutable_streaminfos() {
  // @@protoc_insertion_point(field_mutable_list:device.SyncStatusRsp.streamInfos)
  return &streaminfos_;
}
inline const ::device::StreamInfo& SyncStatusRsp::_internal_streaminfos(int index) const {
  return streaminfos_.Get(index);
}
inline const ::device::StreamInfo& SyncStatusRsp::streaminfos(int index) const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.streamInfos)
  return _internal_streaminfos(index);
}
inline ::device::StreamInfo* SyncStatusRsp::_internal_add_streaminfos() {
  return streaminfos_.Add();
}
inline ::device::StreamInfo* SyncStatusRsp::add_streaminfos() {
  // @@protoc_insertion_point(field_add:device.SyncStatusRsp.streamInfos)
  return _internal_add_streaminfos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::device::StreamInfo >&
SyncStatusRsp::streaminfos() const {
  // @@protoc_insertion_point(field_list:device.SyncStatusRsp.streamInfos)
  return streaminfos_;
}

// uint32 maxBitrate4K = 8;
inline void SyncStatusRsp::clear_maxbitrate4k() {
  maxbitrate4k_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_maxbitrate4k() const {
  return maxbitrate4k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::maxbitrate4k() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.maxBitrate4K)
  return _internal_maxbitrate4k();
}
inline void SyncStatusRsp::_internal_set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxbitrate4k_ = value;
}
inline void SyncStatusRsp::set_maxbitrate4k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxbitrate4k(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.maxBitrate4K)
}

// uint64 playTotalBytes = 9;
inline void SyncStatusRsp::clear_playtotalbytes() {
  playtotalbytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncStatusRsp::_internal_playtotalbytes() const {
  return playtotalbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncStatusRsp::playtotalbytes() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.playTotalBytes)
  return _internal_playtotalbytes();
}
inline void SyncStatusRsp::_internal_set_playtotalbytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playtotalbytes_ = value;
}
inline void SyncStatusRsp::set_playtotalbytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playtotalbytes(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.playTotalBytes)
}

// uint32 players = 10;
inline void SyncStatusRsp::clear_players() {
  players_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::_internal_players() const {
  return players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SyncStatusRsp::players() const {
  // @@protoc_insertion_point(field_get:device.SyncStatusRsp.players)
  return _internal_players();
}
inline void SyncStatusRsp::_internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  players_ = value;
}
inline void SyncStatusRsp::set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players(value);
  // @@protoc_insertion_point(field_set:device.SyncStatusRsp.players)
}

// -------------------------------------------------------------------

// QuerySource

// string devSN = 1;
inline void QuerySource::clear_devsn() {
  devsn_.ClearToEmpty();
}
inline const std::string& QuerySource::devsn() const {
  // @@protoc_insertion_point(field_get:device.QuerySource.devSN)
  return _internal_devsn();
}
inline void QuerySource::set_devsn(const std::string& value) {
  _internal_set_devsn(value);
  // @@protoc_insertion_point(field_set:device.QuerySource.devSN)
}
inline std::string* QuerySource::mutable_devsn() {
  // @@protoc_insertion_point(field_mutable:device.QuerySource.devSN)
  return _internal_mutable_devsn();
}
inline const std::string& QuerySource::_internal_devsn() const {
  return devsn_.Get();
}
inline void QuerySource::_internal_set_devsn(const std::string& value) {
  
  devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QuerySource::set_devsn(std::string&& value) {
  
  devsn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.QuerySource.devSN)
}
inline void QuerySource::set_devsn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.QuerySource.devSN)
}
inline void QuerySource::set_devsn(const char* value,
    size_t size) {
  
  devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.QuerySource.devSN)
}
inline std::string* QuerySource::_internal_mutable_devsn() {
  
  return devsn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QuerySource::release_devsn() {
  // @@protoc_insertion_point(field_release:device.QuerySource.devSN)
  return devsn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuerySource::set_allocated_devsn(std::string* devsn) {
  if (devsn != nullptr) {
    
  } else {
    
  }
  devsn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devsn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.QuerySource.devSN)
}

// uint32 srcChn = 2;
inline void QuerySource::clear_srcchn() {
  srcchn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuerySource::_internal_srcchn() const {
  return srcchn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuerySource::srcchn() const {
  // @@protoc_insertion_point(field_get:device.QuerySource.srcChn)
  return _internal_srcchn();
}
inline void QuerySource::_internal_set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcchn_ = value;
}
inline void QuerySource::set_srcchn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcchn(value);
  // @@protoc_insertion_point(field_set:device.QuerySource.srcChn)
}

// -------------------------------------------------------------------

// SetPullAttr

// bool enable = 1;
inline void SetPullAttr::clear_enable() {
  enable_ = false;
}
inline bool SetPullAttr::_internal_enable() const {
  return enable_;
}
inline bool SetPullAttr::enable() const {
  // @@protoc_insertion_point(field_get:device.SetPullAttr.enable)
  return _internal_enable();
}
inline void SetPullAttr::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetPullAttr::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:device.SetPullAttr.enable)
}

// bool forceStop = 2;
inline void SetPullAttr::clear_forcestop() {
  forcestop_ = false;
}
inline bool SetPullAttr::_internal_forcestop() const {
  return forcestop_;
}
inline bool SetPullAttr::forcestop() const {
  // @@protoc_insertion_point(field_get:device.SetPullAttr.forceStop)
  return _internal_forcestop();
}
inline void SetPullAttr::_internal_set_forcestop(bool value) {
  
  forcestop_ = value;
}
inline void SetPullAttr::set_forcestop(bool value) {
  _internal_set_forcestop(value);
  // @@protoc_insertion_point(field_set:device.SetPullAttr.forceStop)
}

// uint32 proto = 3;
inline void SetPullAttr::clear_proto() {
  proto_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetPullAttr::_internal_proto() const {
  return proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetPullAttr::proto() const {
  // @@protoc_insertion_point(field_get:device.SetPullAttr.proto)
  return _internal_proto();
}
inline void SetPullAttr::_internal_set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proto_ = value;
}
inline void SetPullAttr::set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:device.SetPullAttr.proto)
}

// -------------------------------------------------------------------

// ServerSessionReq

// uint32 hbInterval = 1;
inline void ServerSessionReq::clear_hbinterval() {
  hbinterval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerSessionReq::_internal_hbinterval() const {
  return hbinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerSessionReq::hbinterval() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.hbInterval)
  return _internal_hbinterval();
}
inline void ServerSessionReq::_internal_set_hbinterval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hbinterval_ = value;
}
inline void ServerSessionReq::set_hbinterval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hbinterval(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.hbInterval)
}

// uint32 serverPort = 2;
inline void ServerSessionReq::clear_serverport() {
  serverport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerSessionReq::_internal_serverport() const {
  return serverport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerSessionReq::serverport() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.serverPort)
  return _internal_serverport();
}
inline void ServerSessionReq::_internal_set_serverport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverport_ = value;
}
inline void ServerSessionReq::set_serverport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverport(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.serverPort)
}

// string serverHost = 3;
inline void ServerSessionReq::clear_serverhost() {
  serverhost_.ClearToEmpty();
}
inline const std::string& ServerSessionReq::serverhost() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.serverHost)
  return _internal_serverhost();
}
inline void ServerSessionReq::set_serverhost(const std::string& value) {
  _internal_set_serverhost(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.serverHost)
}
inline std::string* ServerSessionReq::mutable_serverhost() {
  // @@protoc_insertion_point(field_mutable:device.ServerSessionReq.serverHost)
  return _internal_mutable_serverhost();
}
inline const std::string& ServerSessionReq::_internal_serverhost() const {
  return serverhost_.Get();
}
inline void ServerSessionReq::_internal_set_serverhost(const std::string& value) {
  
  serverhost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerSessionReq::set_serverhost(std::string&& value) {
  
  serverhost_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.ServerSessionReq.serverHost)
}
inline void ServerSessionReq::set_serverhost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverhost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.ServerSessionReq.serverHost)
}
inline void ServerSessionReq::set_serverhost(const char* value,
    size_t size) {
  
  serverhost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.ServerSessionReq.serverHost)
}
inline std::string* ServerSessionReq::_internal_mutable_serverhost() {
  
  return serverhost_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerSessionReq::release_serverhost() {
  // @@protoc_insertion_point(field_release:device.ServerSessionReq.serverHost)
  return serverhost_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerSessionReq::set_allocated_serverhost(std::string* serverhost) {
  if (serverhost != nullptr) {
    
  } else {
    
  }
  serverhost_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverhost,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.ServerSessionReq.serverHost)
}

// string serverPath = 4;
inline void ServerSessionReq::clear_serverpath() {
  serverpath_.ClearToEmpty();
}
inline const std::string& ServerSessionReq::serverpath() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.serverPath)
  return _internal_serverpath();
}
inline void ServerSessionReq::set_serverpath(const std::string& value) {
  _internal_set_serverpath(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.serverPath)
}
inline std::string* ServerSessionReq::mutable_serverpath() {
  // @@protoc_insertion_point(field_mutable:device.ServerSessionReq.serverPath)
  return _internal_mutable_serverpath();
}
inline const std::string& ServerSessionReq::_internal_serverpath() const {
  return serverpath_.Get();
}
inline void ServerSessionReq::_internal_set_serverpath(const std::string& value) {
  
  serverpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerSessionReq::set_serverpath(std::string&& value) {
  
  serverpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.ServerSessionReq.serverPath)
}
inline void ServerSessionReq::set_serverpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.ServerSessionReq.serverPath)
}
inline void ServerSessionReq::set_serverpath(const char* value,
    size_t size) {
  
  serverpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.ServerSessionReq.serverPath)
}
inline std::string* ServerSessionReq::_internal_mutable_serverpath() {
  
  return serverpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerSessionReq::release_serverpath() {
  // @@protoc_insertion_point(field_release:device.ServerSessionReq.serverPath)
  return serverpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerSessionReq::set_allocated_serverpath(std::string* serverpath) {
  if (serverpath != nullptr) {
    
  } else {
    
  }
  serverpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.ServerSessionReq.serverPath)
}

// string secretKey = 5;
inline void ServerSessionReq::clear_secretkey() {
  secretkey_.ClearToEmpty();
}
inline const std::string& ServerSessionReq::secretkey() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.secretKey)
  return _internal_secretkey();
}
inline void ServerSessionReq::set_secretkey(const std::string& value) {
  _internal_set_secretkey(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.secretKey)
}
inline std::string* ServerSessionReq::mutable_secretkey() {
  // @@protoc_insertion_point(field_mutable:device.ServerSessionReq.secretKey)
  return _internal_mutable_secretkey();
}
inline const std::string& ServerSessionReq::_internal_secretkey() const {
  return secretkey_.Get();
}
inline void ServerSessionReq::_internal_set_secretkey(const std::string& value) {
  
  secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerSessionReq::set_secretkey(std::string&& value) {
  
  secretkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.ServerSessionReq.secretKey)
}
inline void ServerSessionReq::set_secretkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.ServerSessionReq.secretKey)
}
inline void ServerSessionReq::set_secretkey(const char* value,
    size_t size) {
  
  secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.ServerSessionReq.secretKey)
}
inline std::string* ServerSessionReq::_internal_mutable_secretkey() {
  
  return secretkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerSessionReq::release_secretkey() {
  // @@protoc_insertion_point(field_release:device.ServerSessionReq.secretKey)
  return secretkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerSessionReq::set_allocated_secretkey(std::string* secretkey) {
  if (secretkey != nullptr) {
    
  } else {
    
  }
  secretkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secretkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.ServerSessionReq.secretKey)
}

// string serverVer = 6;
inline void ServerSessionReq::clear_serverver() {
  serverver_.ClearToEmpty();
}
inline const std::string& ServerSessionReq::serverver() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.serverVer)
  return _internal_serverver();
}
inline void ServerSessionReq::set_serverver(const std::string& value) {
  _internal_set_serverver(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.serverVer)
}
inline std::string* ServerSessionReq::mutable_serverver() {
  // @@protoc_insertion_point(field_mutable:device.ServerSessionReq.serverVer)
  return _internal_mutable_serverver();
}
inline const std::string& ServerSessionReq::_internal_serverver() const {
  return serverver_.Get();
}
inline void ServerSessionReq::_internal_set_serverver(const std::string& value) {
  
  serverver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerSessionReq::set_serverver(std::string&& value) {
  
  serverver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:device.ServerSessionReq.serverVer)
}
inline void ServerSessionReq::set_serverver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:device.ServerSessionReq.serverVer)
}
inline void ServerSessionReq::set_serverver(const char* value,
    size_t size) {
  
  serverver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:device.ServerSessionReq.serverVer)
}
inline std::string* ServerSessionReq::_internal_mutable_serverver() {
  
  return serverver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerSessionReq::release_serverver() {
  // @@protoc_insertion_point(field_release:device.ServerSessionReq.serverVer)
  return serverver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerSessionReq::set_allocated_serverver(std::string* serverver) {
  if (serverver != nullptr) {
    
  } else {
    
  }
  serverver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:device.ServerSessionReq.serverVer)
}

// int64 uptime = 7;
inline void ServerSessionReq::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerSessionReq::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerSessionReq::uptime() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionReq.uptime)
  return _internal_uptime();
}
inline void ServerSessionReq::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uptime_ = value;
}
inline void ServerSessionReq::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionReq.uptime)
}

// -------------------------------------------------------------------

// ServerSessionRsp

// uint32 sessionResult = 1;
inline void ServerSessionRsp::clear_sessionresult() {
  sessionresult_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerSessionRsp::_internal_sessionresult() const {
  return sessionresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerSessionRsp::sessionresult() const {
  // @@protoc_insertion_point(field_get:device.ServerSessionRsp.sessionResult)
  return _internal_sessionresult();
}
inline void ServerSessionRsp::_internal_set_sessionresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sessionresult_ = value;
}
inline void ServerSessionRsp::set_sessionresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sessionresult(value);
  // @@protoc_insertion_point(field_set:device.ServerSessionRsp.sessionResult)
}

// -------------------------------------------------------------------

// ServerKeepAlive

// int64 uptime = 1;
inline void ServerKeepAlive::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerKeepAlive::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerKeepAlive::uptime() const {
  // @@protoc_insertion_point(field_get:device.ServerKeepAlive.uptime)
  return _internal_uptime();
}
inline void ServerKeepAlive::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uptime_ = value;
}
inline void ServerKeepAlive::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:device.ServerKeepAlive.uptime)
}

// int64 cur_time = 2;
inline void ServerKeepAlive::clear_cur_time() {
  cur_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerKeepAlive::_internal_cur_time() const {
  return cur_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerKeepAlive::cur_time() const {
  // @@protoc_insertion_point(field_get:device.ServerKeepAlive.cur_time)
  return _internal_cur_time();
}
inline void ServerKeepAlive::_internal_set_cur_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cur_time_ = value;
}
inline void ServerKeepAlive::set_cur_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cur_time(value);
  // @@protoc_insertion_point(field_set:device.ServerKeepAlive.cur_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace device

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_2eproto
