// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RTMPStreamAddress_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRTStreamAddress_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRTStreamAddress_Professional_common_2eproto;
namespace common {
class SRTStreamAddress_ProfessionalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRTStreamAddress_Professional> _instance;
} _SRTStreamAddress_Professional_default_instance_;
class SRTStreamAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRTStreamAddress> _instance;
} _SRTStreamAddress_default_instance_;
class RTMPStreamAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTMPStreamAddress> _instance;
} _RTMPStreamAddress_default_instance_;
class StreamAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamAddress> _instance;
} _StreamAddress_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_RTMPStreamAddress_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_RTMPStreamAddress_default_instance_;
    new (ptr) ::common::RTMPStreamAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RTMPStreamAddress_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RTMPStreamAddress_common_2eproto}, {}};

static void InitDefaultsscc_info_SRTStreamAddress_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_SRTStreamAddress_default_instance_;
    new (ptr) ::common::SRTStreamAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRTStreamAddress_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRTStreamAddress_common_2eproto}, {
      &scc_info_SRTStreamAddress_Professional_common_2eproto.base,}};

static void InitDefaultsscc_info_SRTStreamAddress_Professional_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_SRTStreamAddress_Professional_default_instance_;
    new (ptr) ::common::SRTStreamAddress_Professional();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRTStreamAddress_Professional_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRTStreamAddress_Professional_common_2eproto}, {}};

static void InitDefaultsscc_info_StreamAddress_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_StreamAddress_default_instance_;
    new (ptr) ::common::StreamAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamAddress_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamAddress_common_2eproto}, {
      &scc_info_SRTStreamAddress_common_2eproto.base,
      &scc_info_RTMPStreamAddress_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_common_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, mode_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, hostname_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, port_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, latency_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, maxbw_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, pbkeylen_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, passphrase_),
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress_Professional, streamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::common::SRTStreamAddress, AddressMode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::RTMPStreamAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::RTMPStreamAddress, uri_),
  PROTOBUF_FIELD_OFFSET(::common::RTMPStreamAddress, code_),
  PROTOBUF_FIELD_OFFSET(::common::RTMPStreamAddress, username_),
  PROTOBUF_FIELD_OFFSET(::common::RTMPStreamAddress, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::StreamAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::common::StreamAddress, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::common::StreamAddress, Address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::SRTStreamAddress_Professional)},
  { 13, -1, sizeof(::common::SRTStreamAddress)},
  { 21, -1, sizeof(::common::RTMPStreamAddress)},
  { 30, -1, sizeof(::common::StreamAddress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_SRTStreamAddress_Professional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_SRTStreamAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_RTMPStreamAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_StreamAddress_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006common\"\205\002\n\020SRTStreamAddr"
  "ess\0228\n\007proAddr\030\001 \001(\0132%.common.SRTStreamA"
  "ddress.ProfessionalH\000\022\021\n\007simAddr\030\002 \001(\tH\000"
  "\032\224\001\n\014Professional\022\014\n\004mode\030\002 \001(\005\022\020\n\010hostn"
  "ame\030\003 \001(\t\022\014\n\004port\030\004 \001(\r\022\017\n\007latency\030\005 \001(\r"
  "\022\r\n\005maxbw\030\006 \001(\r\022\020\n\010pbkeylen\030\007 \001(\r\022\022\n\npas"
  "sphrase\030\010 \001(\t\022\020\n\010streamid\030\t \001(\tB\r\n\013Addre"
  "ssMode\"R\n\021RTMPStreamAddress\022\013\n\003uri\030\001 \001(\t"
  "\022\014\n\004code\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\020\n\010pass"
  "word\030\004 \001(\t\"n\n\rStreamAddress\022\'\n\003srt\030\001 \001(\013"
  "2\030.common.SRTStreamAddressH\000\022)\n\004rtmp\030\002 \001"
  "(\0132\031.common.RTMPStreamAddressH\000B\t\n\007Addre"
  "ssb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[4] = {
  &scc_info_RTMPStreamAddress_common_2eproto.base,
  &scc_info_SRTStreamAddress_common_2eproto.base,
  &scc_info_SRTStreamAddress_Professional_common_2eproto.base,
  &scc_info_StreamAddress_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, false, descriptor_table_protodef_common_2eproto, "common.proto", 490,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 4, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto)), true);
namespace common {

// ===================================================================

class SRTStreamAddress_Professional::_Internal {
 public:
};

SRTStreamAddress_Professional::SRTStreamAddress_Professional(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.SRTStreamAddress.Professional)
}
SRTStreamAddress_Professional::SRTStreamAddress_Professional(const SRTStreamAddress_Professional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArena());
  }
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passphrase().empty()) {
    passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passphrase(), 
      GetArena());
  }
  streamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_streamid().empty()) {
    streamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_streamid(), 
      GetArena());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&pbkeylen_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(pbkeylen_));
  // @@protoc_insertion_point(copy_constructor:common.SRTStreamAddress.Professional)
}

void SRTStreamAddress_Professional::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRTStreamAddress_Professional_common_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pbkeylen_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(pbkeylen_));
}

SRTStreamAddress_Professional::~SRTStreamAddress_Professional() {
  // @@protoc_insertion_point(destructor:common.SRTStreamAddress.Professional)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRTStreamAddress_Professional::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SRTStreamAddress_Professional::ArenaDtor(void* object) {
  SRTStreamAddress_Professional* _this = reinterpret_cast< SRTStreamAddress_Professional* >(object);
  (void)_this;
}
void SRTStreamAddress_Professional::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRTStreamAddress_Professional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRTStreamAddress_Professional& SRTStreamAddress_Professional::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRTStreamAddress_Professional_common_2eproto.base);
  return *internal_default_instance();
}


void SRTStreamAddress_Professional::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SRTStreamAddress.Professional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  passphrase_.ClearToEmpty();
  streamid_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbkeylen_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(pbkeylen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRTStreamAddress_Professional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.SRTStreamAddress.Professional.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 latency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxbw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxbw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pbkeylen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pbkeylen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passphrase = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.SRTStreamAddress.Professional.passphrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string streamid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_streamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.SRTStreamAddress.Professional.streamid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRTStreamAddress_Professional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SRTStreamAddress.Professional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.SRTStreamAddress.Professional.hostname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hostname(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // uint32 latency = 5;
  if (this->latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_latency(), target);
  }

  // uint32 maxbw = 6;
  if (this->maxbw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxbw(), target);
  }

  // uint32 pbkeylen = 7;
  if (this->pbkeylen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pbkeylen(), target);
  }

  // string passphrase = 8;
  if (this->passphrase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passphrase().data(), static_cast<int>(this->_internal_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.SRTStreamAddress.Professional.passphrase");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_passphrase(), target);
  }

  // string streamid = 9;
  if (this->streamid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamid().data(), static_cast<int>(this->_internal_streamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.SRTStreamAddress.Professional.streamid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_streamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SRTStreamAddress.Professional)
  return target;
}

size_t SRTStreamAddress_Professional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SRTStreamAddress.Professional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string passphrase = 8;
  if (this->passphrase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passphrase());
  }

  // string streamid = 9;
  if (this->streamid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamid());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 latency = 5;
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latency());
  }

  // uint32 maxbw = 6;
  if (this->maxbw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbw());
  }

  // uint32 pbkeylen = 7;
  if (this->pbkeylen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pbkeylen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRTStreamAddress_Professional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.SRTStreamAddress.Professional)
  GOOGLE_DCHECK_NE(&from, this);
  const SRTStreamAddress_Professional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRTStreamAddress_Professional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.SRTStreamAddress.Professional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.SRTStreamAddress.Professional)
    MergeFrom(*source);
  }
}

void SRTStreamAddress_Professional::MergeFrom(const SRTStreamAddress_Professional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SRTStreamAddress.Professional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.passphrase().size() > 0) {
    _internal_set_passphrase(from._internal_passphrase());
  }
  if (from.streamid().size() > 0) {
    _internal_set_streamid(from._internal_streamid());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
  if (from.maxbw() != 0) {
    _internal_set_maxbw(from._internal_maxbw());
  }
  if (from.pbkeylen() != 0) {
    _internal_set_pbkeylen(from._internal_pbkeylen());
  }
}

void SRTStreamAddress_Professional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.SRTStreamAddress.Professional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRTStreamAddress_Professional::CopyFrom(const SRTStreamAddress_Professional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SRTStreamAddress.Professional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRTStreamAddress_Professional::IsInitialized() const {
  return true;
}

void SRTStreamAddress_Professional::InternalSwap(SRTStreamAddress_Professional* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passphrase_.Swap(&other->passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  streamid_.Swap(&other->streamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRTStreamAddress_Professional, pbkeylen_)
      + sizeof(SRTStreamAddress_Professional::pbkeylen_)
      - PROTOBUF_FIELD_OFFSET(SRTStreamAddress_Professional, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRTStreamAddress_Professional::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SRTStreamAddress::_Internal {
 public:
  static const ::common::SRTStreamAddress_Professional& proaddr(const SRTStreamAddress* msg);
};

const ::common::SRTStreamAddress_Professional&
SRTStreamAddress::_Internal::proaddr(const SRTStreamAddress* msg) {
  return *msg->AddressMode_.proaddr_;
}
void SRTStreamAddress::set_allocated_proaddr(::common::SRTStreamAddress_Professional* proaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_AddressMode();
  if (proaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proaddr);
    if (message_arena != submessage_arena) {
      proaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proaddr, submessage_arena);
    }
    set_has_proaddr();
    AddressMode_.proaddr_ = proaddr;
  }
  // @@protoc_insertion_point(field_set_allocated:common.SRTStreamAddress.proAddr)
}
SRTStreamAddress::SRTStreamAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.SRTStreamAddress)
}
SRTStreamAddress::SRTStreamAddress(const SRTStreamAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_AddressMode();
  switch (from.AddressMode_case()) {
    case kProAddr: {
      _internal_mutable_proaddr()->::common::SRTStreamAddress_Professional::MergeFrom(from._internal_proaddr());
      break;
    }
    case kSimAddr: {
      _internal_set_simaddr(from._internal_simaddr());
      break;
    }
    case ADDRESSMODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:common.SRTStreamAddress)
}

void SRTStreamAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRTStreamAddress_common_2eproto.base);
  clear_has_AddressMode();
}

SRTStreamAddress::~SRTStreamAddress() {
  // @@protoc_insertion_point(destructor:common.SRTStreamAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRTStreamAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_AddressMode()) {
    clear_AddressMode();
  }
}

void SRTStreamAddress::ArenaDtor(void* object) {
  SRTStreamAddress* _this = reinterpret_cast< SRTStreamAddress* >(object);
  (void)_this;
}
void SRTStreamAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRTStreamAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRTStreamAddress& SRTStreamAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRTStreamAddress_common_2eproto.base);
  return *internal_default_instance();
}


void SRTStreamAddress::clear_AddressMode() {
// @@protoc_insertion_point(one_of_clear_start:common.SRTStreamAddress)
  switch (AddressMode_case()) {
    case kProAddr: {
      if (GetArena() == nullptr) {
        delete AddressMode_.proaddr_;
      }
      break;
    }
    case kSimAddr: {
      AddressMode_.simaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case ADDRESSMODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESSMODE_NOT_SET;
}


void SRTStreamAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SRTStreamAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_AddressMode();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRTStreamAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.SRTStreamAddress.Professional proAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string simAddr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_simaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.SRTStreamAddress.simAddr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRTStreamAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SRTStreamAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.SRTStreamAddress.Professional proAddr = 1;
  if (_internal_has_proaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proaddr(this), target, stream);
  }

  // string simAddr = 2;
  if (_internal_has_simaddr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_simaddr().data(), static_cast<int>(this->_internal_simaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.SRTStreamAddress.simAddr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_simaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SRTStreamAddress)
  return target;
}

size_t SRTStreamAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SRTStreamAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (AddressMode_case()) {
    // .common.SRTStreamAddress.Professional proAddr = 1;
    case kProAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AddressMode_.proaddr_);
      break;
    }
    // string simAddr = 2;
    case kSimAddr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_simaddr());
      break;
    }
    case ADDRESSMODE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRTStreamAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.SRTStreamAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const SRTStreamAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRTStreamAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.SRTStreamAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.SRTStreamAddress)
    MergeFrom(*source);
  }
}

void SRTStreamAddress::MergeFrom(const SRTStreamAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SRTStreamAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AddressMode_case()) {
    case kProAddr: {
      _internal_mutable_proaddr()->::common::SRTStreamAddress_Professional::MergeFrom(from._internal_proaddr());
      break;
    }
    case kSimAddr: {
      _internal_set_simaddr(from._internal_simaddr());
      break;
    }
    case ADDRESSMODE_NOT_SET: {
      break;
    }
  }
}

void SRTStreamAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.SRTStreamAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRTStreamAddress::CopyFrom(const SRTStreamAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SRTStreamAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRTStreamAddress::IsInitialized() const {
  return true;
}

void SRTStreamAddress::InternalSwap(SRTStreamAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(AddressMode_, other->AddressMode_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRTStreamAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RTMPStreamAddress::_Internal {
 public:
};

RTMPStreamAddress::RTMPStreamAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.RTMPStreamAddress)
}
RTMPStreamAddress::RTMPStreamAddress(const RTMPStreamAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:common.RTMPStreamAddress)
}

void RTMPStreamAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTMPStreamAddress_common_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RTMPStreamAddress::~RTMPStreamAddress() {
  // @@protoc_insertion_point(destructor:common.RTMPStreamAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RTMPStreamAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RTMPStreamAddress::ArenaDtor(void* object) {
  RTMPStreamAddress* _this = reinterpret_cast< RTMPStreamAddress* >(object);
  (void)_this;
}
void RTMPStreamAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RTMPStreamAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTMPStreamAddress& RTMPStreamAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTMPStreamAddress_common_2eproto.base);
  return *internal_default_instance();
}


void RTMPStreamAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:common.RTMPStreamAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  code_.ClearToEmpty();
  username_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTMPStreamAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.RTMPStreamAddress.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.RTMPStreamAddress.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.RTMPStreamAddress.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.RTMPStreamAddress.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTMPStreamAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.RTMPStreamAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.RTMPStreamAddress.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.RTMPStreamAddress.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.RTMPStreamAddress.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.RTMPStreamAddress.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.RTMPStreamAddress)
  return target;
}

size_t RTMPStreamAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.RTMPStreamAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTMPStreamAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.RTMPStreamAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RTMPStreamAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTMPStreamAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.RTMPStreamAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.RTMPStreamAddress)
    MergeFrom(*source);
  }
}

void RTMPStreamAddress::MergeFrom(const RTMPStreamAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.RTMPStreamAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
}

void RTMPStreamAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.RTMPStreamAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTMPStreamAddress::CopyFrom(const RTMPStreamAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.RTMPStreamAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTMPStreamAddress::IsInitialized() const {
  return true;
}

void RTMPStreamAddress::InternalSwap(RTMPStreamAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RTMPStreamAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamAddress::_Internal {
 public:
  static const ::common::SRTStreamAddress& srt(const StreamAddress* msg);
  static const ::common::RTMPStreamAddress& rtmp(const StreamAddress* msg);
};

const ::common::SRTStreamAddress&
StreamAddress::_Internal::srt(const StreamAddress* msg) {
  return *msg->Address_.srt_;
}
const ::common::RTMPStreamAddress&
StreamAddress::_Internal::rtmp(const StreamAddress* msg) {
  return *msg->Address_.rtmp_;
}
void StreamAddress::set_allocated_srt(::common::SRTStreamAddress* srt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Address();
  if (srt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(srt);
    if (message_arena != submessage_arena) {
      srt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srt, submessage_arena);
    }
    set_has_srt();
    Address_.srt_ = srt;
  }
  // @@protoc_insertion_point(field_set_allocated:common.StreamAddress.srt)
}
void StreamAddress::set_allocated_rtmp(::common::RTMPStreamAddress* rtmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Address();
  if (rtmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rtmp);
    if (message_arena != submessage_arena) {
      rtmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtmp, submessage_arena);
    }
    set_has_rtmp();
    Address_.rtmp_ = rtmp;
  }
  // @@protoc_insertion_point(field_set_allocated:common.StreamAddress.rtmp)
}
StreamAddress::StreamAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.StreamAddress)
}
StreamAddress::StreamAddress(const StreamAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Address();
  switch (from.Address_case()) {
    case kSrt: {
      _internal_mutable_srt()->::common::SRTStreamAddress::MergeFrom(from._internal_srt());
      break;
    }
    case kRtmp: {
      _internal_mutable_rtmp()->::common::RTMPStreamAddress::MergeFrom(from._internal_rtmp());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:common.StreamAddress)
}

void StreamAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamAddress_common_2eproto.base);
  clear_has_Address();
}

StreamAddress::~StreamAddress() {
  // @@protoc_insertion_point(destructor:common.StreamAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Address()) {
    clear_Address();
  }
}

void StreamAddress::ArenaDtor(void* object) {
  StreamAddress* _this = reinterpret_cast< StreamAddress* >(object);
  (void)_this;
}
void StreamAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamAddress& StreamAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamAddress_common_2eproto.base);
  return *internal_default_instance();
}


void StreamAddress::clear_Address() {
// @@protoc_insertion_point(one_of_clear_start:common.StreamAddress)
  switch (Address_case()) {
    case kSrt: {
      if (GetArena() == nullptr) {
        delete Address_.srt_;
      }
      break;
    }
    case kRtmp: {
      if (GetArena() == nullptr) {
        delete Address_.rtmp_;
      }
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void StreamAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:common.StreamAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Address();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.SRTStreamAddress srt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_srt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.RTMPStreamAddress rtmp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.StreamAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.SRTStreamAddress srt = 1;
  if (_internal_has_srt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::srt(this), target, stream);
  }

  // .common.RTMPStreamAddress rtmp = 2;
  if (_internal_has_rtmp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rtmp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.StreamAddress)
  return target;
}

size_t StreamAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.StreamAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Address_case()) {
    // .common.SRTStreamAddress srt = 1;
    case kSrt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Address_.srt_);
      break;
    }
    // .common.RTMPStreamAddress rtmp = 2;
    case kRtmp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Address_.rtmp_);
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.StreamAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.StreamAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.StreamAddress)
    MergeFrom(*source);
  }
}

void StreamAddress::MergeFrom(const StreamAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.StreamAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Address_case()) {
    case kSrt: {
      _internal_mutable_srt()->::common::SRTStreamAddress::MergeFrom(from._internal_srt());
      break;
    }
    case kRtmp: {
      _internal_mutable_rtmp()->::common::RTMPStreamAddress::MergeFrom(from._internal_rtmp());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
}

void StreamAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.StreamAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAddress::CopyFrom(const StreamAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.StreamAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAddress::IsInitialized() const {
  return true;
}

void StreamAddress::InternalSwap(StreamAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Address_, other->Address_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::SRTStreamAddress_Professional* Arena::CreateMaybeMessage< ::common::SRTStreamAddress_Professional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SRTStreamAddress_Professional >(arena);
}
template<> PROTOBUF_NOINLINE ::common::SRTStreamAddress* Arena::CreateMaybeMessage< ::common::SRTStreamAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SRTStreamAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::common::RTMPStreamAddress* Arena::CreateMaybeMessage< ::common::RTMPStreamAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::RTMPStreamAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::common::StreamAddress* Arena::CreateMaybeMessage< ::common::StreamAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::StreamAddress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
