// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#include "device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamAddress_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamInfo_device_2eproto;
namespace device {
class StreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamInfo> _instance;
} _StreamInfo_default_instance_;
class CommonRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonRsp> _instance;
} _CommonRsp_default_instance_;
class SessionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionReq> _instance;
} _SessionReq_default_instance_;
class SessionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRsp> _instance;
} _SessionRsp_default_instance_;
class PushStreamReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushStreamReq> _instance;
} _PushStreamReq_default_instance_;
class StartOutputStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartOutputStream> _instance;
} _StartOutputStream_default_instance_;
class StopOutputStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopOutputStream> _instance;
} _StopOutputStream_default_instance_;
class OutputStreamStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputStreamStatus> _instance;
} _OutputStreamStatus_default_instance_;
class StopPushingStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopPushingStream> _instance;
} _StopPushingStream_default_instance_;
class SyncStatusReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncStatusReq> _instance;
} _SyncStatusReq_default_instance_;
class SyncStatusRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncStatusRsp> _instance;
} _SyncStatusRsp_default_instance_;
class QuerySourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuerySource> _instance;
} _QuerySource_default_instance_;
class SetPullAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPullAttr> _instance;
} _SetPullAttr_default_instance_;
class ServerSessionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerSessionReq> _instance;
} _ServerSessionReq_default_instance_;
class ServerSessionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerSessionRsp> _instance;
} _ServerSessionRsp_default_instance_;
class ServerKeepAliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerKeepAlive> _instance;
} _ServerKeepAlive_default_instance_;
}  // namespace device
static void InitDefaultsscc_info_CommonRsp_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_CommonRsp_default_instance_;
    new (ptr) ::device::CommonRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonRsp_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonRsp_device_2eproto}, {}};

static void InitDefaultsscc_info_OutputStreamStatus_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_OutputStreamStatus_default_instance_;
    new (ptr) ::device::OutputStreamStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputStreamStatus_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputStreamStatus_device_2eproto}, {}};

static void InitDefaultsscc_info_PushStreamReq_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_PushStreamReq_default_instance_;
    new (ptr) ::device::PushStreamReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushStreamReq_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushStreamReq_device_2eproto}, {}};

static void InitDefaultsscc_info_QuerySource_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_QuerySource_default_instance_;
    new (ptr) ::device::QuerySource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySource_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuerySource_device_2eproto}, {}};

static void InitDefaultsscc_info_ServerKeepAlive_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_ServerKeepAlive_default_instance_;
    new (ptr) ::device::ServerKeepAlive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerKeepAlive_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerKeepAlive_device_2eproto}, {}};

static void InitDefaultsscc_info_ServerSessionReq_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_ServerSessionReq_default_instance_;
    new (ptr) ::device::ServerSessionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerSessionReq_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerSessionReq_device_2eproto}, {}};

static void InitDefaultsscc_info_ServerSessionRsp_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_ServerSessionRsp_default_instance_;
    new (ptr) ::device::ServerSessionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerSessionRsp_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerSessionRsp_device_2eproto}, {}};

static void InitDefaultsscc_info_SessionReq_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_SessionReq_default_instance_;
    new (ptr) ::device::SessionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionReq_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionReq_device_2eproto}, {}};

static void InitDefaultsscc_info_SessionRsp_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_SessionRsp_default_instance_;
    new (ptr) ::device::SessionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionRsp_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionRsp_device_2eproto}, {
      &scc_info_StreamAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_SetPullAttr_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_SetPullAttr_default_instance_;
    new (ptr) ::device::SetPullAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPullAttr_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPullAttr_device_2eproto}, {}};

static void InitDefaultsscc_info_StartOutputStream_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_StartOutputStream_default_instance_;
    new (ptr) ::device::StartOutputStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartOutputStream_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartOutputStream_device_2eproto}, {
      &scc_info_StreamAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_StopOutputStream_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_StopOutputStream_default_instance_;
    new (ptr) ::device::StopOutputStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopOutputStream_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopOutputStream_device_2eproto}, {}};

static void InitDefaultsscc_info_StopPushingStream_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_StopPushingStream_default_instance_;
    new (ptr) ::device::StopPushingStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPushingStream_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopPushingStream_device_2eproto}, {}};

static void InitDefaultsscc_info_StreamInfo_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_StreamInfo_default_instance_;
    new (ptr) ::device::StreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamInfo_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamInfo_device_2eproto}, {
      &scc_info_StreamAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_SyncStatusReq_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_SyncStatusReq_default_instance_;
    new (ptr) ::device::SyncStatusReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncStatusReq_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncStatusReq_device_2eproto}, {}};

static void InitDefaultsscc_info_SyncStatusRsp_device_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::device::_SyncStatusRsp_default_instance_;
    new (ptr) ::device::SyncStatusRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncStatusRsp_device_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncStatusRsp_device_2eproto}, {
      &scc_info_StreamInfo_device_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_device_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_device_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_device_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_device_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, channel_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, starttime_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, currenttime_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, stoptime_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, totalbytessnd_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, reconnectcnt_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, status_),
  PROTOBUF_FIELD_OFFSET(::device::StreamInfo, streamaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::CommonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::CommonRsp, command_),
  PROTOBUF_FIELD_OFFSET(::device::CommonRsp, srcchn_),
  PROTOBUF_FIELD_OFFSET(::device::CommonRsp, outchn_),
  PROTOBUF_FIELD_OFFSET(::device::CommonRsp, result_),
  PROTOBUF_FIELD_OFFSET(::device::CommonRsp, descrip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, sn_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, type_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, version_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, vendor_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, outputcapacity_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, maxbitrate_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::device::SessionReq, maxbitrate4k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, accessresult_),
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, outputcapacity_),
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, maxbitrate_),
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, streamaddr_),
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, maxbitrate4k_),
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, pulladdr_),
  PROTOBUF_FIELD_OFFSET(::device::SessionRsp, maxplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::PushStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::PushStreamReq, proto_),
  PROTOBUF_FIELD_OFFSET(::device::PushStreamReq, chn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::StartOutputStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::StartOutputStream, srcchn_),
  PROTOBUF_FIELD_OFFSET(::device::StartOutputStream, outchn_),
  PROTOBUF_FIELD_OFFSET(::device::StartOutputStream, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::StopOutputStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::StopOutputStream, srcchn_),
  PROTOBUF_FIELD_OFFSET(::device::StopOutputStream, outchn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::OutputStreamStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::OutputStreamStatus, srcchn_),
  PROTOBUF_FIELD_OFFSET(::device::OutputStreamStatus, outchn_),
  PROTOBUF_FIELD_OFFSET(::device::OutputStreamStatus, status_),
  PROTOBUF_FIELD_OFFSET(::device::OutputStreamStatus, starttime_),
  PROTOBUF_FIELD_OFFSET(::device::OutputStreamStatus, lasterrcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::StopPushingStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::StopPushingStream, srcchn_),
  PROTOBUF_FIELD_OFFSET(::device::StopPushingStream, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusReq, srcchn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, devsn_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, srcchn_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, currts_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, sndcnt_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, chncap_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, maxbitrate_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, streaminfos_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, maxbitrate4k_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, playtotalbytes_),
  PROTOBUF_FIELD_OFFSET(::device::SyncStatusRsp, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::QuerySource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::QuerySource, devsn_),
  PROTOBUF_FIELD_OFFSET(::device::QuerySource, srcchn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::SetPullAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::SetPullAttr, enable_),
  PROTOBUF_FIELD_OFFSET(::device::SetPullAttr, forcestop_),
  PROTOBUF_FIELD_OFFSET(::device::SetPullAttr, proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, hbinterval_),
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, serverport_),
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, serverhost_),
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, serverpath_),
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, secretkey_),
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, serverver_),
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionReq, uptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::ServerSessionRsp, sessionresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device::ServerKeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::device::ServerKeepAlive, uptime_),
  PROTOBUF_FIELD_OFFSET(::device::ServerKeepAlive, cur_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::device::StreamInfo)},
  { 13, -1, sizeof(::device::CommonRsp)},
  { 23, -1, sizeof(::device::SessionReq)},
  { 36, -1, sizeof(::device::SessionRsp)},
  { 48, -1, sizeof(::device::PushStreamReq)},
  { 55, -1, sizeof(::device::StartOutputStream)},
  { 63, -1, sizeof(::device::StopOutputStream)},
  { 70, -1, sizeof(::device::OutputStreamStatus)},
  { 80, -1, sizeof(::device::StopPushingStream)},
  { 87, -1, sizeof(::device::SyncStatusReq)},
  { 93, -1, sizeof(::device::SyncStatusRsp)},
  { 108, -1, sizeof(::device::QuerySource)},
  { 115, -1, sizeof(::device::SetPullAttr)},
  { 123, -1, sizeof(::device::ServerSessionReq)},
  { 135, -1, sizeof(::device::ServerSessionRsp)},
  { 141, -1, sizeof(::device::ServerKeepAlive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_StreamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_CommonRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_SessionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_SessionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_PushStreamReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_StartOutputStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_StopOutputStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_OutputStreamStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_StopPushingStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_SyncStatusReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_SyncStatusRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_QuerySource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_SetPullAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_ServerSessionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_ServerSessionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::device::_ServerKeepAlive_default_instance_),
};

const char descriptor_table_protodef_device_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014device.proto\022\006device\032\014common.proto\"\277\001\n"
  "\nStreamInfo\022\017\n\007channel\030\001 \001(\r\022\021\n\tstartTim"
  "e\030\002 \001(\r\022\023\n\013currentTime\030\003 \001(\r\022\020\n\010stopTime"
  "\030\004 \001(\r\022\025\n\rtotalBytesSnd\030\005 \001(\003\022\024\n\014reconne"
  "ctCnt\030\006 \001(\r\022\016\n\006status\030\007 \001(\005\022)\n\nstreamAdd"
  "r\030\010 \001(\0132\025.common.StreamAddress\"]\n\tCommon"
  "Rsp\022\017\n\007command\030\001 \001(\005\022\016\n\006srcChn\030\002 \001(\005\022\016\n\006"
  "outChn\030\003 \001(\005\022\016\n\006result\030\004 \001(\005\022\017\n\007descrip\030"
  "\005 \001(\t\"\236\001\n\nSessionReq\022\n\n\002sn\030\001 \001(\t\022\014\n\004type"
  "\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\016\n\006vendor\030\004 \001(\t\022"
  "\026\n\016outputCapacity\030\005 \001(\r\022\022\n\nmaxBitrate\030\006 "
  "\001(\r\022\023\n\013accessToken\030\007 \001(\t\022\024\n\014maxBitrate4K"
  "\030\010 \001(\r\"\265\001\n\nSessionRsp\022\024\n\014accessResult\030\001 "
  "\001(\005\022\026\n\016outputCapacity\030\002 \001(\r\022\022\n\nmaxBitrat"
  "e\030\003 \001(\r\022)\n\nstreamAddr\030\004 \001(\0132\025.common.Str"
  "eamAddress\022\024\n\014maxBitrate4K\030\005 \001(\r\022\020\n\010pull"
  "Addr\030\006 \001(\t\022\022\n\nmaxPlayers\030\007 \001(\r\"+\n\rPushSt"
  "reamReq\022\r\n\005proto\030\001 \001(\t\022\013\n\003chn\030\002 \001(\r\"[\n\021S"
  "tartOutputStream\022\016\n\006srcChn\030\001 \001(\r\022\016\n\006outC"
  "hn\030\002 \001(\r\022&\n\007address\030\003 \001(\0132\025.common.Strea"
  "mAddress\"2\n\020StopOutputStream\022\016\n\006srcChn\030\001"
  " \001(\r\022\016\n\006outChn\030\002 \001(\r\"l\n\022OutputStreamStat"
  "us\022\016\n\006srcChn\030\001 \001(\r\022\016\n\006outChn\030\002 \001(\r\022\016\n\006st"
  "atus\030\003 \001(\005\022\021\n\tstartTime\030\004 \001(\005\022\023\n\013lastErr"
  "Code\030\005 \001(\005\"4\n\021StopPushingStream\022\016\n\006srcCh"
  "n\030\001 \001(\r\022\017\n\007command\030\002 \001(\005\"\037\n\rSyncStatusRe"
  "q\022\016\n\006srcChn\030\001 \001(\r\"\332\001\n\rSyncStatusRsp\022\r\n\005d"
  "evSN\030\001 \001(\t\022\016\n\006srcChn\030\002 \001(\r\022\016\n\006currTs\030\003 \001"
  "(\r\022\016\n\006sndCnt\030\004 \001(\r\022\016\n\006chnCap\030\005 \001(\r\022\022\n\nma"
  "xBitrate\030\006 \001(\r\022\'\n\013streamInfos\030\007 \003(\0132\022.de"
  "vice.StreamInfo\022\024\n\014maxBitrate4K\030\010 \001(\r\022\026\n"
  "\016playTotalBytes\030\t \001(\004\022\017\n\007players\030\n \001(\r\","
  "\n\013QuerySource\022\r\n\005devSN\030\001 \001(\t\022\016\n\006srcChn\030\002"
  " \001(\r\"\?\n\013SetPullAttr\022\016\n\006enable\030\001 \001(\010\022\021\n\tf"
  "orceStop\030\002 \001(\010\022\r\n\005proto\030\003 \001(\r\"\230\001\n\020Server"
  "SessionReq\022\022\n\nhbInterval\030\001 \001(\r\022\022\n\nserver"
  "Port\030\002 \001(\r\022\022\n\nserverHost\030\003 \001(\t\022\022\n\nserver"
  "Path\030\004 \001(\t\022\021\n\tsecretKey\030\005 \001(\t\022\021\n\tserverV"
  "er\030\006 \001(\t\022\016\n\006uptime\030\007 \001(\003\")\n\020ServerSessio"
  "nRsp\022\025\n\rsessionResult\030\001 \001(\r\"3\n\017ServerKee"
  "pAlive\022\016\n\006uptime\030\001 \001(\003\022\020\n\010cur_time\030\002 \001(\003"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_device_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_device_2eproto_sccs[16] = {
  &scc_info_CommonRsp_device_2eproto.base,
  &scc_info_OutputStreamStatus_device_2eproto.base,
  &scc_info_PushStreamReq_device_2eproto.base,
  &scc_info_QuerySource_device_2eproto.base,
  &scc_info_ServerKeepAlive_device_2eproto.base,
  &scc_info_ServerSessionReq_device_2eproto.base,
  &scc_info_ServerSessionRsp_device_2eproto.base,
  &scc_info_SessionReq_device_2eproto.base,
  &scc_info_SessionRsp_device_2eproto.base,
  &scc_info_SetPullAttr_device_2eproto.base,
  &scc_info_StartOutputStream_device_2eproto.base,
  &scc_info_StopOutputStream_device_2eproto.base,
  &scc_info_StopPushingStream_device_2eproto.base,
  &scc_info_StreamInfo_device_2eproto.base,
  &scc_info_SyncStatusReq_device_2eproto.base,
  &scc_info_SyncStatusRsp_device_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_device_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_2eproto = {
  false, false, descriptor_table_protodef_device_2eproto, "device.proto", 1648,
  &descriptor_table_device_2eproto_once, descriptor_table_device_2eproto_sccs, descriptor_table_device_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_device_2eproto::offsets,
  file_level_metadata_device_2eproto, 16, file_level_enum_descriptors_device_2eproto, file_level_service_descriptors_device_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_device_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_device_2eproto)), true);
namespace device {

// ===================================================================

class StreamInfo::_Internal {
 public:
  static const ::common::StreamAddress& streamaddr(const StreamInfo* msg);
};

const ::common::StreamAddress&
StreamInfo::_Internal::streamaddr(const StreamInfo* msg) {
  return *msg->streamaddr_;
}
void StreamInfo::clear_streamaddr() {
  if (GetArena() == nullptr && streamaddr_ != nullptr) {
    delete streamaddr_;
  }
  streamaddr_ = nullptr;
}
StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streamaddr()) {
    streamaddr_ = new ::common::StreamAddress(*from.streamaddr_);
  } else {
    streamaddr_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:device.StreamInfo)
}

void StreamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamInfo_device_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&streamaddr_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&streamaddr_)) + sizeof(status_));
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:device.StreamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streamaddr_;
}

void StreamInfo::ArenaDtor(void* object) {
  StreamInfo* _this = reinterpret_cast< StreamInfo* >(object);
  (void)_this;
}
void StreamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamInfo& StreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamInfo_device_2eproto.base);
  return *internal_default_instance();
}


void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:device.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && streamaddr_ != nullptr) {
    delete streamaddr_;
  }
  streamaddr_ = nullptr;
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currentTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          currenttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stopTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stoptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalBytesSnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalbytessnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reconnectCnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reconnectcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.StreamAddress streamAddr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_streamaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // uint32 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_starttime(), target);
  }

  // uint32 currentTime = 3;
  if (this->currenttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_currenttime(), target);
  }

  // uint32 stopTime = 4;
  if (this->stoptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stoptime(), target);
  }

  // int64 totalBytesSnd = 5;
  if (this->totalbytessnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_totalbytessnd(), target);
  }

  // uint32 reconnectCnt = 6;
  if (this->reconnectcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_reconnectcnt(), target);
  }

  // int32 status = 7;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_status(), target);
  }

  // .common.StreamAddress streamAddr = 8;
  if (this->has_streamaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::streamaddr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.StreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.StreamAddress streamAddr = 8;
  if (this->has_streamaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streamaddr_);
  }

  // uint32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel());
  }

  // uint32 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_starttime());
  }

  // uint32 currentTime = 3;
  if (this->currenttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currenttime());
  }

  // uint32 stopTime = 4;
  if (this->stoptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stoptime());
  }

  // int64 totalBytesSnd = 5;
  if (this->totalbytessnd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalbytessnd());
  }

  // uint32 reconnectCnt = 6;
  if (this->reconnectcnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reconnectcnt());
  }

  // int32 status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.StreamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.StreamInfo)
    MergeFrom(*source);
  }
}

void StreamInfo::MergeFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_streamaddr()) {
    _internal_mutable_streamaddr()->::common::StreamAddress::MergeFrom(from._internal_streamaddr());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.currenttime() != 0) {
    _internal_set_currenttime(from._internal_currenttime());
  }
  if (from.stoptime() != 0) {
    _internal_set_stoptime(from._internal_stoptime());
  }
  if (from.totalbytessnd() != 0) {
    _internal_set_totalbytessnd(from._internal_totalbytessnd());
  }
  if (from.reconnectcnt() != 0) {
    _internal_set_reconnectcnt(from._internal_reconnectcnt());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void StreamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamInfo, status_)
      + sizeof(StreamInfo::status_)
      - PROTOBUF_FIELD_OFFSET(StreamInfo, streamaddr_)>(
          reinterpret_cast<char*>(&streamaddr_),
          reinterpret_cast<char*>(&other->streamaddr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonRsp::_Internal {
 public:
};

CommonRsp::CommonRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.CommonRsp)
}
CommonRsp::CommonRsp(const CommonRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  descrip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descrip().empty()) {
    descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descrip(), 
      GetArena());
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&command_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:device.CommonRsp)
}

void CommonRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonRsp_device_2eproto.base);
  descrip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&command_)) + sizeof(result_));
}

CommonRsp::~CommonRsp() {
  // @@protoc_insertion_point(destructor:device.CommonRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  descrip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonRsp::ArenaDtor(void* object) {
  CommonRsp* _this = reinterpret_cast< CommonRsp* >(object);
  (void)_this;
}
void CommonRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonRsp& CommonRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonRsp_device_2eproto.base);
  return *internal_default_instance();
}


void CommonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:device.CommonRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descrip_.ClearToEmpty();
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&command_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 srcChn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 outChn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          outchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string descrip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_descrip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.CommonRsp.descrip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.CommonRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_command(), target);
  }

  // int32 srcChn = 2;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_srcchn(), target);
  }

  // int32 outChn = 3;
  if (this->outchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_outchn(), target);
  }

  // int32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  // string descrip = 5;
  if (this->descrip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descrip().data(), static_cast<int>(this->_internal_descrip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.CommonRsp.descrip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_descrip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.CommonRsp)
  return target;
}

size_t CommonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.CommonRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string descrip = 5;
  if (this->descrip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descrip());
  }

  // int32 command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_command());
  }

  // int32 srcChn = 2;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_srcchn());
  }

  // int32 outChn = 3;
  if (this->outchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outchn());
  }

  // int32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.CommonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.CommonRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.CommonRsp)
    MergeFrom(*source);
  }
}

void CommonRsp::MergeFrom(const CommonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.CommonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.descrip().size() > 0) {
    _internal_set_descrip(from._internal_descrip());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
  if (from.outchn() != 0) {
    _internal_set_outchn(from._internal_outchn());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CommonRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.CommonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRsp::CopyFrom(const CommonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.CommonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRsp::IsInitialized() const {
  return true;
}

void CommonRsp::InternalSwap(CommonRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  descrip_.Swap(&other->descrip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonRsp, result_)
      + sizeof(CommonRsp::result_)
      - PROTOBUF_FIELD_OFFSET(CommonRsp, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionReq::_Internal {
 public:
};

SessionReq::SessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.SessionReq)
}
SessionReq::SessionReq(const SessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sn().empty()) {
    sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sn(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor().empty()) {
    vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor(), 
      GetArena());
  }
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesstoken(), 
      GetArena());
  }
  ::memcpy(&outputcapacity_, &from.outputcapacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxbitrate4k_) -
    reinterpret_cast<char*>(&outputcapacity_)) + sizeof(maxbitrate4k_));
  // @@protoc_insertion_point(copy_constructor:device.SessionReq)
}

void SessionReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionReq_device_2eproto.base);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&outputcapacity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxbitrate4k_) -
      reinterpret_cast<char*>(&outputcapacity_)) + sizeof(maxbitrate4k_));
}

SessionReq::~SessionReq() {
  // @@protoc_insertion_point(destructor:device.SessionReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionReq::ArenaDtor(void* object) {
  SessionReq* _this = reinterpret_cast< SessionReq* >(object);
  (void)_this;
}
void SessionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionReq& SessionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionReq_device_2eproto.base);
  return *internal_default_instance();
}


void SessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:device.SessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_.ClearToEmpty();
  type_.ClearToEmpty();
  version_.ClearToEmpty();
  vendor_.ClearToEmpty();
  accesstoken_.ClearToEmpty();
  ::memset(&outputcapacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxbitrate4k_) -
      reinterpret_cast<char*>(&outputcapacity_)) + sizeof(maxbitrate4k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SessionReq.sn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SessionReq.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SessionReq.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SessionReq.vendor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outputCapacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          outputcapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxBitrate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxbitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string accessToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SessionReq.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxBitrate4K = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxbitrate4k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.SessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sn = 1;
  if (this->sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SessionReq.sn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sn(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SessionReq.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SessionReq.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string vendor = 4;
  if (this->vendor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SessionReq.vendor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vendor(), target);
  }

  // uint32 outputCapacity = 5;
  if (this->outputcapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_outputcapacity(), target);
  }

  // uint32 maxBitrate = 6;
  if (this->maxbitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxbitrate(), target);
  }

  // string accessToken = 7;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SessionReq.accessToken");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_accesstoken(), target);
  }

  // uint32 maxBitrate4K = 8;
  if (this->maxbitrate4k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_maxbitrate4k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.SessionReq)
  return target;
}

size_t SessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.SessionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sn = 1;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sn());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string vendor = 4;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string accessToken = 7;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // uint32 outputCapacity = 5;
  if (this->outputcapacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outputcapacity());
  }

  // uint32 maxBitrate = 6;
  if (this->maxbitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbitrate());
  }

  // uint32 maxBitrate4K = 8;
  if (this->maxbitrate4k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbitrate4k());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.SessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.SessionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.SessionReq)
    MergeFrom(*source);
  }
}

void SessionReq::MergeFrom(const SessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.SessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.vendor().size() > 0) {
    _internal_set_vendor(from._internal_vendor());
  }
  if (from.accesstoken().size() > 0) {
    _internal_set_accesstoken(from._internal_accesstoken());
  }
  if (from.outputcapacity() != 0) {
    _internal_set_outputcapacity(from._internal_outputcapacity());
  }
  if (from.maxbitrate() != 0) {
    _internal_set_maxbitrate(from._internal_maxbitrate());
  }
  if (from.maxbitrate4k() != 0) {
    _internal_set_maxbitrate4k(from._internal_maxbitrate4k());
  }
}

void SessionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.SessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionReq::CopyFrom(const SessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.SessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionReq::IsInitialized() const {
  return true;
}

void SessionReq::InternalSwap(SessionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sn_.Swap(&other->sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionReq, maxbitrate4k_)
      + sizeof(SessionReq::maxbitrate4k_)
      - PROTOBUF_FIELD_OFFSET(SessionReq, outputcapacity_)>(
          reinterpret_cast<char*>(&outputcapacity_),
          reinterpret_cast<char*>(&other->outputcapacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionRsp::_Internal {
 public:
  static const ::common::StreamAddress& streamaddr(const SessionRsp* msg);
};

const ::common::StreamAddress&
SessionRsp::_Internal::streamaddr(const SessionRsp* msg) {
  return *msg->streamaddr_;
}
void SessionRsp::clear_streamaddr() {
  if (GetArena() == nullptr && streamaddr_ != nullptr) {
    delete streamaddr_;
  }
  streamaddr_ = nullptr;
}
SessionRsp::SessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.SessionRsp)
}
SessionRsp::SessionRsp(const SessionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pulladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pulladdr().empty()) {
    pulladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pulladdr(), 
      GetArena());
  }
  if (from._internal_has_streamaddr()) {
    streamaddr_ = new ::common::StreamAddress(*from.streamaddr_);
  } else {
    streamaddr_ = nullptr;
  }
  ::memcpy(&accessresult_, &from.accessresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxplayers_) -
    reinterpret_cast<char*>(&accessresult_)) + sizeof(maxplayers_));
  // @@protoc_insertion_point(copy_constructor:device.SessionRsp)
}

void SessionRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionRsp_device_2eproto.base);
  pulladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&streamaddr_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxplayers_) -
      reinterpret_cast<char*>(&streamaddr_)) + sizeof(maxplayers_));
}

SessionRsp::~SessionRsp() {
  // @@protoc_insertion_point(destructor:device.SessionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pulladdr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete streamaddr_;
}

void SessionRsp::ArenaDtor(void* object) {
  SessionRsp* _this = reinterpret_cast< SessionRsp* >(object);
  (void)_this;
}
void SessionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRsp& SessionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRsp_device_2eproto.base);
  return *internal_default_instance();
}


void SessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:device.SessionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pulladdr_.ClearToEmpty();
  if (GetArena() == nullptr && streamaddr_ != nullptr) {
    delete streamaddr_;
  }
  streamaddr_ = nullptr;
  ::memset(&accessresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxplayers_) -
      reinterpret_cast<char*>(&accessresult_)) + sizeof(maxplayers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accessResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accessresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outputCapacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outputcapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxBitrate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxbitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.StreamAddress streamAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_streamaddr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxBitrate4K = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxbitrate4k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pullAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pulladdr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SessionRsp.pullAddr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxPlayers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.SessionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accessResult = 1;
  if (this->accessresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accessresult(), target);
  }

  // uint32 outputCapacity = 2;
  if (this->outputcapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outputcapacity(), target);
  }

  // uint32 maxBitrate = 3;
  if (this->maxbitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxbitrate(), target);
  }

  // .common.StreamAddress streamAddr = 4;
  if (this->has_streamaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::streamaddr(this), target, stream);
  }

  // uint32 maxBitrate4K = 5;
  if (this->maxbitrate4k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxbitrate4k(), target);
  }

  // string pullAddr = 6;
  if (this->pulladdr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pulladdr().data(), static_cast<int>(this->_internal_pulladdr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SessionRsp.pullAddr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pulladdr(), target);
  }

  // uint32 maxPlayers = 7;
  if (this->maxplayers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_maxplayers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.SessionRsp)
  return target;
}

size_t SessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.SessionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pullAddr = 6;
  if (this->pulladdr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pulladdr());
  }

  // .common.StreamAddress streamAddr = 4;
  if (this->has_streamaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streamaddr_);
  }

  // int32 accessResult = 1;
  if (this->accessresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accessresult());
  }

  // uint32 outputCapacity = 2;
  if (this->outputcapacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outputcapacity());
  }

  // uint32 maxBitrate = 3;
  if (this->maxbitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbitrate());
  }

  // uint32 maxBitrate4K = 5;
  if (this->maxbitrate4k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbitrate4k());
  }

  // uint32 maxPlayers = 7;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxplayers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.SessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.SessionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.SessionRsp)
    MergeFrom(*source);
  }
}

void SessionRsp::MergeFrom(const SessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.SessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pulladdr().size() > 0) {
    _internal_set_pulladdr(from._internal_pulladdr());
  }
  if (from.has_streamaddr()) {
    _internal_mutable_streamaddr()->::common::StreamAddress::MergeFrom(from._internal_streamaddr());
  }
  if (from.accessresult() != 0) {
    _internal_set_accessresult(from._internal_accessresult());
  }
  if (from.outputcapacity() != 0) {
    _internal_set_outputcapacity(from._internal_outputcapacity());
  }
  if (from.maxbitrate() != 0) {
    _internal_set_maxbitrate(from._internal_maxbitrate());
  }
  if (from.maxbitrate4k() != 0) {
    _internal_set_maxbitrate4k(from._internal_maxbitrate4k());
  }
  if (from.maxplayers() != 0) {
    _internal_set_maxplayers(from._internal_maxplayers());
  }
}

void SessionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.SessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRsp::CopyFrom(const SessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.SessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRsp::IsInitialized() const {
  return true;
}

void SessionRsp::InternalSwap(SessionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pulladdr_.Swap(&other->pulladdr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRsp, maxplayers_)
      + sizeof(SessionRsp::maxplayers_)
      - PROTOBUF_FIELD_OFFSET(SessionRsp, streamaddr_)>(
          reinterpret_cast<char*>(&streamaddr_),
          reinterpret_cast<char*>(&other->streamaddr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PushStreamReq::_Internal {
 public:
};

PushStreamReq::PushStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.PushStreamReq)
}
PushStreamReq::PushStreamReq(const PushStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proto().empty()) {
    proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto(), 
      GetArena());
  }
  chn_ = from.chn_;
  // @@protoc_insertion_point(copy_constructor:device.PushStreamReq)
}

void PushStreamReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushStreamReq_device_2eproto.base);
  proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chn_ = 0u;
}

PushStreamReq::~PushStreamReq() {
  // @@protoc_insertion_point(destructor:device.PushStreamReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushStreamReq::ArenaDtor(void* object) {
  PushStreamReq* _this = reinterpret_cast< PushStreamReq* >(object);
  (void)_this;
}
void PushStreamReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushStreamReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushStreamReq& PushStreamReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushStreamReq_device_2eproto.base);
  return *internal_default_instance();
}


void PushStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:device.PushStreamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_.ClearToEmpty();
  chn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushStreamReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.PushStreamReq.proto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushStreamReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.PushStreamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proto = 1;
  if (this->proto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto().data(), static_cast<int>(this->_internal_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.PushStreamReq.proto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proto(), target);
  }

  // uint32 chn = 2;
  if (this->chn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.PushStreamReq)
  return target;
}

size_t PushStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.PushStreamReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proto = 1;
  if (this->proto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto());
  }

  // uint32 chn = 2;
  if (this->chn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushStreamReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.PushStreamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PushStreamReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushStreamReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.PushStreamReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.PushStreamReq)
    MergeFrom(*source);
  }
}

void PushStreamReq::MergeFrom(const PushStreamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.PushStreamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proto().size() > 0) {
    _internal_set_proto(from._internal_proto());
  }
  if (from.chn() != 0) {
    _internal_set_chn(from._internal_chn());
  }
}

void PushStreamReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.PushStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushStreamReq::CopyFrom(const PushStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.PushStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushStreamReq::IsInitialized() const {
  return true;
}

void PushStreamReq::InternalSwap(PushStreamReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proto_.Swap(&other->proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(chn_, other->chn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushStreamReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartOutputStream::_Internal {
 public:
  static const ::common::StreamAddress& address(const StartOutputStream* msg);
};

const ::common::StreamAddress&
StartOutputStream::_Internal::address(const StartOutputStream* msg) {
  return *msg->address_;
}
void StartOutputStream::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
StartOutputStream::StartOutputStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.StartOutputStream)
}
StartOutputStream::StartOutputStream(const StartOutputStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::common::StreamAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  ::memcpy(&srcchn_, &from.srcchn_,
    static_cast<size_t>(reinterpret_cast<char*>(&outchn_) -
    reinterpret_cast<char*>(&srcchn_)) + sizeof(outchn_));
  // @@protoc_insertion_point(copy_constructor:device.StartOutputStream)
}

void StartOutputStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartOutputStream_device_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&outchn_) -
      reinterpret_cast<char*>(&address_)) + sizeof(outchn_));
}

StartOutputStream::~StartOutputStream() {
  // @@protoc_insertion_point(destructor:device.StartOutputStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartOutputStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
}

void StartOutputStream::ArenaDtor(void* object) {
  StartOutputStream* _this = reinterpret_cast< StartOutputStream* >(object);
  (void)_this;
}
void StartOutputStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartOutputStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartOutputStream& StartOutputStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartOutputStream_device_2eproto.base);
  return *internal_default_instance();
}


void StartOutputStream::Clear() {
// @@protoc_insertion_point(message_clear_start:device.StartOutputStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  ::memset(&srcchn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outchn_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(outchn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartOutputStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 srcChn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outChn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.StreamAddress address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartOutputStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.StartOutputStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srcchn(), target);
  }

  // uint32 outChn = 2;
  if (this->outchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outchn(), target);
  }

  // .common.StreamAddress address = 3;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.StartOutputStream)
  return target;
}

size_t StartOutputStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.StartOutputStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.StreamAddress address = 3;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  // uint32 outChn = 2;
  if (this->outchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outchn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartOutputStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.StartOutputStream)
  GOOGLE_DCHECK_NE(&from, this);
  const StartOutputStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartOutputStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.StartOutputStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.StartOutputStream)
    MergeFrom(*source);
  }
}

void StartOutputStream::MergeFrom(const StartOutputStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.StartOutputStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::common::StreamAddress::MergeFrom(from._internal_address());
  }
  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
  if (from.outchn() != 0) {
    _internal_set_outchn(from._internal_outchn());
  }
}

void StartOutputStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.StartOutputStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartOutputStream::CopyFrom(const StartOutputStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.StartOutputStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartOutputStream::IsInitialized() const {
  return true;
}

void StartOutputStream::InternalSwap(StartOutputStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartOutputStream, outchn_)
      + sizeof(StartOutputStream::outchn_)
      - PROTOBUF_FIELD_OFFSET(StartOutputStream, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartOutputStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopOutputStream::_Internal {
 public:
};

StopOutputStream::StopOutputStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.StopOutputStream)
}
StopOutputStream::StopOutputStream(const StopOutputStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srcchn_, &from.srcchn_,
    static_cast<size_t>(reinterpret_cast<char*>(&outchn_) -
    reinterpret_cast<char*>(&srcchn_)) + sizeof(outchn_));
  // @@protoc_insertion_point(copy_constructor:device.StopOutputStream)
}

void StopOutputStream::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&srcchn_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&outchn_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(outchn_));
}

StopOutputStream::~StopOutputStream() {
  // @@protoc_insertion_point(destructor:device.StopOutputStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopOutputStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopOutputStream::ArenaDtor(void* object) {
  StopOutputStream* _this = reinterpret_cast< StopOutputStream* >(object);
  (void)_this;
}
void StopOutputStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopOutputStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopOutputStream& StopOutputStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopOutputStream_device_2eproto.base);
  return *internal_default_instance();
}


void StopOutputStream::Clear() {
// @@protoc_insertion_point(message_clear_start:device.StopOutputStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srcchn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outchn_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(outchn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopOutputStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 srcChn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outChn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopOutputStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.StopOutputStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srcchn(), target);
  }

  // uint32 outChn = 2;
  if (this->outchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outchn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.StopOutputStream)
  return target;
}

size_t StopOutputStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.StopOutputStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  // uint32 outChn = 2;
  if (this->outchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outchn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopOutputStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.StopOutputStream)
  GOOGLE_DCHECK_NE(&from, this);
  const StopOutputStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopOutputStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.StopOutputStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.StopOutputStream)
    MergeFrom(*source);
  }
}

void StopOutputStream::MergeFrom(const StopOutputStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.StopOutputStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
  if (from.outchn() != 0) {
    _internal_set_outchn(from._internal_outchn());
  }
}

void StopOutputStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.StopOutputStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopOutputStream::CopyFrom(const StopOutputStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.StopOutputStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopOutputStream::IsInitialized() const {
  return true;
}

void StopOutputStream::InternalSwap(StopOutputStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopOutputStream, outchn_)
      + sizeof(StopOutputStream::outchn_)
      - PROTOBUF_FIELD_OFFSET(StopOutputStream, srcchn_)>(
          reinterpret_cast<char*>(&srcchn_),
          reinterpret_cast<char*>(&other->srcchn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopOutputStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OutputStreamStatus::_Internal {
 public:
};

OutputStreamStatus::OutputStreamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.OutputStreamStatus)
}
OutputStreamStatus::OutputStreamStatus(const OutputStreamStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srcchn_, &from.srcchn_,
    static_cast<size_t>(reinterpret_cast<char*>(&lasterrcode_) -
    reinterpret_cast<char*>(&srcchn_)) + sizeof(lasterrcode_));
  // @@protoc_insertion_point(copy_constructor:device.OutputStreamStatus)
}

void OutputStreamStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&srcchn_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lasterrcode_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(lasterrcode_));
}

OutputStreamStatus::~OutputStreamStatus() {
  // @@protoc_insertion_point(destructor:device.OutputStreamStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputStreamStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OutputStreamStatus::ArenaDtor(void* object) {
  OutputStreamStatus* _this = reinterpret_cast< OutputStreamStatus* >(object);
  (void)_this;
}
void OutputStreamStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputStreamStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputStreamStatus& OutputStreamStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputStreamStatus_device_2eproto.base);
  return *internal_default_instance();
}


void OutputStreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:device.OutputStreamStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srcchn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lasterrcode_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(lasterrcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputStreamStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 srcChn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outChn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 startTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastErrCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lasterrcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputStreamStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.OutputStreamStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srcchn(), target);
  }

  // uint32 outChn = 2;
  if (this->outchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outchn(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int32 startTime = 4;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_starttime(), target);
  }

  // int32 lastErrCode = 5;
  if (this->lasterrcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lasterrcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.OutputStreamStatus)
  return target;
}

size_t OutputStreamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.OutputStreamStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  // uint32 outChn = 2;
  if (this->outchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outchn());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 startTime = 4;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 lastErrCode = 5;
  if (this->lasterrcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lasterrcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputStreamStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.OutputStreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputStreamStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputStreamStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.OutputStreamStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.OutputStreamStatus)
    MergeFrom(*source);
  }
}

void OutputStreamStatus::MergeFrom(const OutputStreamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.OutputStreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
  if (from.outchn() != 0) {
    _internal_set_outchn(from._internal_outchn());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.lasterrcode() != 0) {
    _internal_set_lasterrcode(from._internal_lasterrcode());
  }
}

void OutputStreamStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.OutputStreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputStreamStatus::CopyFrom(const OutputStreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.OutputStreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputStreamStatus::IsInitialized() const {
  return true;
}

void OutputStreamStatus::InternalSwap(OutputStreamStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputStreamStatus, lasterrcode_)
      + sizeof(OutputStreamStatus::lasterrcode_)
      - PROTOBUF_FIELD_OFFSET(OutputStreamStatus, srcchn_)>(
          reinterpret_cast<char*>(&srcchn_),
          reinterpret_cast<char*>(&other->srcchn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputStreamStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopPushingStream::_Internal {
 public:
};

StopPushingStream::StopPushingStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.StopPushingStream)
}
StopPushingStream::StopPushingStream(const StopPushingStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srcchn_, &from.srcchn_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&srcchn_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:device.StopPushingStream)
}

void StopPushingStream::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&srcchn_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(command_));
}

StopPushingStream::~StopPushingStream() {
  // @@protoc_insertion_point(destructor:device.StopPushingStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopPushingStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopPushingStream::ArenaDtor(void* object) {
  StopPushingStream* _this = reinterpret_cast< StopPushingStream* >(object);
  (void)_this;
}
void StopPushingStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopPushingStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPushingStream& StopPushingStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopPushingStream_device_2eproto.base);
  return *internal_default_instance();
}


void StopPushingStream::Clear() {
// @@protoc_insertion_point(message_clear_start:device.StopPushingStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srcchn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPushingStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 srcChn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPushingStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.StopPushingStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srcchn(), target);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.StopPushingStream)
  return target;
}

size_t StopPushingStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.StopPushingStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  // int32 command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPushingStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.StopPushingStream)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPushingStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopPushingStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.StopPushingStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.StopPushingStream)
    MergeFrom(*source);
  }
}

void StopPushingStream::MergeFrom(const StopPushingStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.StopPushingStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void StopPushingStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.StopPushingStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPushingStream::CopyFrom(const StopPushingStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.StopPushingStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPushingStream::IsInitialized() const {
  return true;
}

void StopPushingStream::InternalSwap(StopPushingStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopPushingStream, command_)
      + sizeof(StopPushingStream::command_)
      - PROTOBUF_FIELD_OFFSET(StopPushingStream, srcchn_)>(
          reinterpret_cast<char*>(&srcchn_),
          reinterpret_cast<char*>(&other->srcchn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPushingStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SyncStatusReq::_Internal {
 public:
};

SyncStatusReq::SyncStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.SyncStatusReq)
}
SyncStatusReq::SyncStatusReq(const SyncStatusReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcchn_ = from.srcchn_;
  // @@protoc_insertion_point(copy_constructor:device.SyncStatusReq)
}

void SyncStatusReq::SharedCtor() {
  srcchn_ = 0u;
}

SyncStatusReq::~SyncStatusReq() {
  // @@protoc_insertion_point(destructor:device.SyncStatusReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncStatusReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SyncStatusReq::ArenaDtor(void* object) {
  SyncStatusReq* _this = reinterpret_cast< SyncStatusReq* >(object);
  (void)_this;
}
void SyncStatusReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncStatusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncStatusReq& SyncStatusReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncStatusReq_device_2eproto.base);
  return *internal_default_instance();
}


void SyncStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:device.SyncStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcchn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncStatusReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 srcChn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncStatusReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.SyncStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srcchn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.SyncStatusReq)
  return target;
}

size_t SyncStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.SyncStatusReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 srcChn = 1;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncStatusReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.SyncStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncStatusReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncStatusReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.SyncStatusReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.SyncStatusReq)
    MergeFrom(*source);
  }
}

void SyncStatusReq::MergeFrom(const SyncStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.SyncStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
}

void SyncStatusReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.SyncStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncStatusReq::CopyFrom(const SyncStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.SyncStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncStatusReq::IsInitialized() const {
  return true;
}

void SyncStatusReq::InternalSwap(SyncStatusReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(srcchn_, other->srcchn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncStatusReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SyncStatusRsp::_Internal {
 public:
};

SyncStatusRsp::SyncStatusRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  streaminfos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.SyncStatusRsp)
}
SyncStatusRsp::SyncStatusRsp(const SyncStatusRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streaminfos_(from.streaminfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devsn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devsn().empty()) {
    devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devsn(), 
      GetArena());
  }
  ::memcpy(&srcchn_, &from.srcchn_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&srcchn_)) + sizeof(players_));
  // @@protoc_insertion_point(copy_constructor:device.SyncStatusRsp)
}

void SyncStatusRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncStatusRsp_device_2eproto.base);
  devsn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&srcchn_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&players_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(players_));
}

SyncStatusRsp::~SyncStatusRsp() {
  // @@protoc_insertion_point(destructor:device.SyncStatusRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncStatusRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  devsn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncStatusRsp::ArenaDtor(void* object) {
  SyncStatusRsp* _this = reinterpret_cast< SyncStatusRsp* >(object);
  (void)_this;
}
void SyncStatusRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncStatusRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncStatusRsp& SyncStatusRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncStatusRsp_device_2eproto.base);
  return *internal_default_instance();
}


void SyncStatusRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:device.SyncStatusRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streaminfos_.Clear();
  devsn_.ClearToEmpty();
  ::memset(&srcchn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_) -
      reinterpret_cast<char*>(&srcchn_)) + sizeof(players_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncStatusRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string devSN = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devsn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.SyncStatusRsp.devSN"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 srcChn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          currts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sndCnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sndcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chnCap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chncap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxBitrate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxbitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .device.StreamInfo streamInfos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streaminfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 maxBitrate4K = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxbitrate4k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playTotalBytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          playtotalbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 players = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncStatusRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.SyncStatusRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devSN = 1;
  if (this->devsn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devsn().data(), static_cast<int>(this->_internal_devsn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.SyncStatusRsp.devSN");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devsn(), target);
  }

  // uint32 srcChn = 2;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_srcchn(), target);
  }

  // uint32 currTs = 3;
  if (this->currts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_currts(), target);
  }

  // uint32 sndCnt = 4;
  if (this->sndcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sndcnt(), target);
  }

  // uint32 chnCap = 5;
  if (this->chncap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chncap(), target);
  }

  // uint32 maxBitrate = 6;
  if (this->maxbitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxbitrate(), target);
  }

  // repeated .device.StreamInfo streamInfos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streaminfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_streaminfos(i), target, stream);
  }

  // uint32 maxBitrate4K = 8;
  if (this->maxbitrate4k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_maxbitrate4k(), target);
  }

  // uint64 playTotalBytes = 9;
  if (this->playtotalbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_playtotalbytes(), target);
  }

  // uint32 players = 10;
  if (this->players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_players(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.SyncStatusRsp)
  return target;
}

size_t SyncStatusRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.SyncStatusRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .device.StreamInfo streamInfos = 7;
  total_size += 1UL * this->_internal_streaminfos_size();
  for (const auto& msg : this->streaminfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string devSN = 1;
  if (this->devsn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devsn());
  }

  // uint32 srcChn = 2;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  // uint32 currTs = 3;
  if (this->currts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currts());
  }

  // uint32 sndCnt = 4;
  if (this->sndcnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sndcnt());
  }

  // uint32 chnCap = 5;
  if (this->chncap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chncap());
  }

  // uint32 maxBitrate = 6;
  if (this->maxbitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbitrate());
  }

  // uint32 maxBitrate4K = 8;
  if (this->maxbitrate4k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxbitrate4k());
  }

  // uint64 playTotalBytes = 9;
  if (this->playtotalbytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playtotalbytes());
  }

  // uint32 players = 10;
  if (this->players() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_players());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncStatusRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.SyncStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncStatusRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncStatusRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.SyncStatusRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.SyncStatusRsp)
    MergeFrom(*source);
  }
}

void SyncStatusRsp::MergeFrom(const SyncStatusRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.SyncStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streaminfos_.MergeFrom(from.streaminfos_);
  if (from.devsn().size() > 0) {
    _internal_set_devsn(from._internal_devsn());
  }
  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
  if (from.currts() != 0) {
    _internal_set_currts(from._internal_currts());
  }
  if (from.sndcnt() != 0) {
    _internal_set_sndcnt(from._internal_sndcnt());
  }
  if (from.chncap() != 0) {
    _internal_set_chncap(from._internal_chncap());
  }
  if (from.maxbitrate() != 0) {
    _internal_set_maxbitrate(from._internal_maxbitrate());
  }
  if (from.maxbitrate4k() != 0) {
    _internal_set_maxbitrate4k(from._internal_maxbitrate4k());
  }
  if (from.playtotalbytes() != 0) {
    _internal_set_playtotalbytes(from._internal_playtotalbytes());
  }
  if (from.players() != 0) {
    _internal_set_players(from._internal_players());
  }
}

void SyncStatusRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.SyncStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncStatusRsp::CopyFrom(const SyncStatusRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.SyncStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncStatusRsp::IsInitialized() const {
  return true;
}

void SyncStatusRsp::InternalSwap(SyncStatusRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  streaminfos_.InternalSwap(&other->streaminfos_);
  devsn_.Swap(&other->devsn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncStatusRsp, players_)
      + sizeof(SyncStatusRsp::players_)
      - PROTOBUF_FIELD_OFFSET(SyncStatusRsp, srcchn_)>(
          reinterpret_cast<char*>(&srcchn_),
          reinterpret_cast<char*>(&other->srcchn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncStatusRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuerySource::_Internal {
 public:
};

QuerySource::QuerySource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.QuerySource)
}
QuerySource::QuerySource(const QuerySource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devsn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devsn().empty()) {
    devsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devsn(), 
      GetArena());
  }
  srcchn_ = from.srcchn_;
  // @@protoc_insertion_point(copy_constructor:device.QuerySource)
}

void QuerySource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuerySource_device_2eproto.base);
  devsn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcchn_ = 0u;
}

QuerySource::~QuerySource() {
  // @@protoc_insertion_point(destructor:device.QuerySource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuerySource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  devsn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuerySource::ArenaDtor(void* object) {
  QuerySource* _this = reinterpret_cast< QuerySource* >(object);
  (void)_this;
}
void QuerySource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuerySource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuerySource& QuerySource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuerySource_device_2eproto.base);
  return *internal_default_instance();
}


void QuerySource::Clear() {
// @@protoc_insertion_point(message_clear_start:device.QuerySource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devsn_.ClearToEmpty();
  srcchn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string devSN = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devsn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.QuerySource.devSN"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 srcChn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          srcchn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuerySource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.QuerySource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devSN = 1;
  if (this->devsn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devsn().data(), static_cast<int>(this->_internal_devsn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.QuerySource.devSN");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devsn(), target);
  }

  // uint32 srcChn = 2;
  if (this->srcchn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_srcchn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.QuerySource)
  return target;
}

size_t QuerySource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.QuerySource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devSN = 1;
  if (this->devsn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devsn());
  }

  // uint32 srcChn = 2;
  if (this->srcchn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcchn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuerySource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.QuerySource)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuerySource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.QuerySource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.QuerySource)
    MergeFrom(*source);
  }
}

void QuerySource::MergeFrom(const QuerySource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.QuerySource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devsn().size() > 0) {
    _internal_set_devsn(from._internal_devsn());
  }
  if (from.srcchn() != 0) {
    _internal_set_srcchn(from._internal_srcchn());
  }
}

void QuerySource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.QuerySource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySource::CopyFrom(const QuerySource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.QuerySource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySource::IsInitialized() const {
  return true;
}

void QuerySource::InternalSwap(QuerySource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devsn_.Swap(&other->devsn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(srcchn_, other->srcchn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetPullAttr::_Internal {
 public:
};

SetPullAttr::SetPullAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.SetPullAttr)
}
SetPullAttr::SetPullAttr(const SetPullAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&proto_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(proto_));
  // @@protoc_insertion_point(copy_constructor:device.SetPullAttr)
}

void SetPullAttr::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&proto_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(proto_));
}

SetPullAttr::~SetPullAttr() {
  // @@protoc_insertion_point(destructor:device.SetPullAttr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPullAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPullAttr::ArenaDtor(void* object) {
  SetPullAttr* _this = reinterpret_cast< SetPullAttr* >(object);
  (void)_this;
}
void SetPullAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPullAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPullAttr& SetPullAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPullAttr_device_2eproto.base);
  return *internal_default_instance();
}


void SetPullAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:device.SetPullAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proto_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPullAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool forceStop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          forcestop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPullAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.SetPullAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // bool forceStop = 2;
  if (this->forcestop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_forcestop(), target);
  }

  // uint32 proto = 3;
  if (this->proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.SetPullAttr)
  return target;
}

size_t SetPullAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.SetPullAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool forceStop = 2;
  if (this->forcestop() != 0) {
    total_size += 1 + 1;
  }

  // uint32 proto = 3;
  if (this->proto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proto());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPullAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.SetPullAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPullAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPullAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.SetPullAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.SetPullAttr)
    MergeFrom(*source);
  }
}

void SetPullAttr::MergeFrom(const SetPullAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.SetPullAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.forcestop() != 0) {
    _internal_set_forcestop(from._internal_forcestop());
  }
  if (from.proto() != 0) {
    _internal_set_proto(from._internal_proto());
  }
}

void SetPullAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.SetPullAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPullAttr::CopyFrom(const SetPullAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.SetPullAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPullAttr::IsInitialized() const {
  return true;
}

void SetPullAttr::InternalSwap(SetPullAttr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPullAttr, proto_)
      + sizeof(SetPullAttr::proto_)
      - PROTOBUF_FIELD_OFFSET(SetPullAttr, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPullAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerSessionReq::_Internal {
 public:
};

ServerSessionReq::ServerSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.ServerSessionReq)
}
ServerSessionReq::ServerSessionReq(const ServerSessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverhost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverhost().empty()) {
    serverhost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverhost(), 
      GetArena());
  }
  serverpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverpath().empty()) {
    serverpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverpath(), 
      GetArena());
  }
  secretkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secretkey().empty()) {
    secretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secretkey(), 
      GetArena());
  }
  serverver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverver().empty()) {
    serverver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverver(), 
      GetArena());
  }
  ::memcpy(&hbinterval_, &from.hbinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&uptime_) -
    reinterpret_cast<char*>(&hbinterval_)) + sizeof(uptime_));
  // @@protoc_insertion_point(copy_constructor:device.ServerSessionReq)
}

void ServerSessionReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerSessionReq_device_2eproto.base);
  serverhost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secretkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hbinterval_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&hbinterval_)) + sizeof(uptime_));
}

ServerSessionReq::~ServerSessionReq() {
  // @@protoc_insertion_point(destructor:device.ServerSessionReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerSessionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serverhost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secretkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerSessionReq::ArenaDtor(void* object) {
  ServerSessionReq* _this = reinterpret_cast< ServerSessionReq* >(object);
  (void)_this;
}
void ServerSessionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerSessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerSessionReq& ServerSessionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerSessionReq_device_2eproto.base);
  return *internal_default_instance();
}


void ServerSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:device.ServerSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverhost_.ClearToEmpty();
  serverpath_.ClearToEmpty();
  secretkey_.ClearToEmpty();
  serverver_.ClearToEmpty();
  ::memset(&hbinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&hbinterval_)) + sizeof(uptime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerSessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 hbInterval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hbinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serverPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverHost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serverhost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.ServerSessionReq.serverHost"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serverpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.ServerSessionReq.serverPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secretKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_secretkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.ServerSessionReq.secretKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverVer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_serverver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "device.ServerSessionReq.serverVer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 uptime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerSessionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.ServerSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hbInterval = 1;
  if (this->hbinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hbinterval(), target);
  }

  // uint32 serverPort = 2;
  if (this->serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverport(), target);
  }

  // string serverHost = 3;
  if (this->serverhost().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverhost().data(), static_cast<int>(this->_internal_serverhost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.ServerSessionReq.serverHost");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serverhost(), target);
  }

  // string serverPath = 4;
  if (this->serverpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverpath().data(), static_cast<int>(this->_internal_serverpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.ServerSessionReq.serverPath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serverpath(), target);
  }

  // string secretKey = 5;
  if (this->secretkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secretkey().data(), static_cast<int>(this->_internal_secretkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.ServerSessionReq.secretKey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secretkey(), target);
  }

  // string serverVer = 6;
  if (this->serverver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverver().data(), static_cast<int>(this->_internal_serverver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "device.ServerSessionReq.serverVer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_serverver(), target);
  }

  // int64 uptime = 7;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_uptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.ServerSessionReq)
  return target;
}

size_t ServerSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.ServerSessionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverHost = 3;
  if (this->serverhost().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverhost());
  }

  // string serverPath = 4;
  if (this->serverpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverpath());
  }

  // string secretKey = 5;
  if (this->secretkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secretkey());
  }

  // string serverVer = 6;
  if (this->serverver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverver());
  }

  // uint32 hbInterval = 1;
  if (this->hbinterval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hbinterval());
  }

  // uint32 serverPort = 2;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverport());
  }

  // int64 uptime = 7;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerSessionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.ServerSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSessionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerSessionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.ServerSessionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.ServerSessionReq)
    MergeFrom(*source);
  }
}

void ServerSessionReq::MergeFrom(const ServerSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.ServerSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverhost().size() > 0) {
    _internal_set_serverhost(from._internal_serverhost());
  }
  if (from.serverpath().size() > 0) {
    _internal_set_serverpath(from._internal_serverpath());
  }
  if (from.secretkey().size() > 0) {
    _internal_set_secretkey(from._internal_secretkey());
  }
  if (from.serverver().size() > 0) {
    _internal_set_serverver(from._internal_serverver());
  }
  if (from.hbinterval() != 0) {
    _internal_set_hbinterval(from._internal_hbinterval());
  }
  if (from.serverport() != 0) {
    _internal_set_serverport(from._internal_serverport());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
}

void ServerSessionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.ServerSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSessionReq::CopyFrom(const ServerSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.ServerSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSessionReq::IsInitialized() const {
  return true;
}

void ServerSessionReq::InternalSwap(ServerSessionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serverhost_.Swap(&other->serverhost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serverpath_.Swap(&other->serverpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secretkey_.Swap(&other->secretkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serverver_.Swap(&other->serverver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerSessionReq, uptime_)
      + sizeof(ServerSessionReq::uptime_)
      - PROTOBUF_FIELD_OFFSET(ServerSessionReq, hbinterval_)>(
          reinterpret_cast<char*>(&hbinterval_),
          reinterpret_cast<char*>(&other->hbinterval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSessionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerSessionRsp::_Internal {
 public:
};

ServerSessionRsp::ServerSessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.ServerSessionRsp)
}
ServerSessionRsp::ServerSessionRsp(const ServerSessionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionresult_ = from.sessionresult_;
  // @@protoc_insertion_point(copy_constructor:device.ServerSessionRsp)
}

void ServerSessionRsp::SharedCtor() {
  sessionresult_ = 0u;
}

ServerSessionRsp::~ServerSessionRsp() {
  // @@protoc_insertion_point(destructor:device.ServerSessionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerSessionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerSessionRsp::ArenaDtor(void* object) {
  ServerSessionRsp* _this = reinterpret_cast< ServerSessionRsp* >(object);
  (void)_this;
}
void ServerSessionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerSessionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerSessionRsp& ServerSessionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerSessionRsp_device_2eproto.base);
  return *internal_default_instance();
}


void ServerSessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:device.ServerSessionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionresult_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerSessionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sessionResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerSessionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.ServerSessionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sessionResult = 1;
  if (this->sessionresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sessionresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.ServerSessionRsp)
  return target;
}

size_t ServerSessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.ServerSessionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sessionResult = 1;
  if (this->sessionresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sessionresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerSessionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.ServerSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSessionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerSessionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.ServerSessionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.ServerSessionRsp)
    MergeFrom(*source);
  }
}

void ServerSessionRsp::MergeFrom(const ServerSessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.ServerSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionresult() != 0) {
    _internal_set_sessionresult(from._internal_sessionresult());
  }
}

void ServerSessionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.ServerSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSessionRsp::CopyFrom(const ServerSessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.ServerSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSessionRsp::IsInitialized() const {
  return true;
}

void ServerSessionRsp::InternalSwap(ServerSessionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sessionresult_, other->sessionresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSessionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerKeepAlive::_Internal {
 public:
};

ServerKeepAlive::ServerKeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:device.ServerKeepAlive)
}
ServerKeepAlive::ServerKeepAlive(const ServerKeepAlive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uptime_, &from.uptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_time_) -
    reinterpret_cast<char*>(&uptime_)) + sizeof(cur_time_));
  // @@protoc_insertion_point(copy_constructor:device.ServerKeepAlive)
}

void ServerKeepAlive::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_time_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(cur_time_));
}

ServerKeepAlive::~ServerKeepAlive() {
  // @@protoc_insertion_point(destructor:device.ServerKeepAlive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerKeepAlive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerKeepAlive::ArenaDtor(void* object) {
  ServerKeepAlive* _this = reinterpret_cast< ServerKeepAlive* >(object);
  (void)_this;
}
void ServerKeepAlive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerKeepAlive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerKeepAlive& ServerKeepAlive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerKeepAlive_device_2eproto.base);
  return *internal_default_instance();
}


void ServerKeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:device.ServerKeepAlive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_time_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(cur_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerKeepAlive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 uptime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerKeepAlive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device.ServerKeepAlive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uptime = 1;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uptime(), target);
  }

  // int64 cur_time = 2;
  if (this->cur_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cur_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.ServerKeepAlive)
  return target;
}

size_t ServerKeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.ServerKeepAlive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uptime = 1;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uptime());
  }

  // int64 cur_time = 2;
  if (this->cur_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerKeepAlive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.ServerKeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerKeepAlive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerKeepAlive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.ServerKeepAlive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.ServerKeepAlive)
    MergeFrom(*source);
  }
}

void ServerKeepAlive::MergeFrom(const ServerKeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.ServerKeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (from.cur_time() != 0) {
    _internal_set_cur_time(from._internal_cur_time());
  }
}

void ServerKeepAlive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.ServerKeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerKeepAlive::CopyFrom(const ServerKeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.ServerKeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerKeepAlive::IsInitialized() const {
  return true;
}

void ServerKeepAlive::InternalSwap(ServerKeepAlive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerKeepAlive, cur_time_)
      + sizeof(ServerKeepAlive::cur_time_)
      - PROTOBUF_FIELD_OFFSET(ServerKeepAlive, uptime_)>(
          reinterpret_cast<char*>(&uptime_),
          reinterpret_cast<char*>(&other->uptime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerKeepAlive::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace device
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::device::StreamInfo* Arena::CreateMaybeMessage< ::device::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::device::CommonRsp* Arena::CreateMaybeMessage< ::device::CommonRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::CommonRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::device::SessionReq* Arena::CreateMaybeMessage< ::device::SessionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::SessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::device::SessionRsp* Arena::CreateMaybeMessage< ::device::SessionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::SessionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::device::PushStreamReq* Arena::CreateMaybeMessage< ::device::PushStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::PushStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::device::StartOutputStream* Arena::CreateMaybeMessage< ::device::StartOutputStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::StartOutputStream >(arena);
}
template<> PROTOBUF_NOINLINE ::device::StopOutputStream* Arena::CreateMaybeMessage< ::device::StopOutputStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::StopOutputStream >(arena);
}
template<> PROTOBUF_NOINLINE ::device::OutputStreamStatus* Arena::CreateMaybeMessage< ::device::OutputStreamStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::OutputStreamStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::device::StopPushingStream* Arena::CreateMaybeMessage< ::device::StopPushingStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::StopPushingStream >(arena);
}
template<> PROTOBUF_NOINLINE ::device::SyncStatusReq* Arena::CreateMaybeMessage< ::device::SyncStatusReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::SyncStatusReq >(arena);
}
template<> PROTOBUF_NOINLINE ::device::SyncStatusRsp* Arena::CreateMaybeMessage< ::device::SyncStatusRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::SyncStatusRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::device::QuerySource* Arena::CreateMaybeMessage< ::device::QuerySource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::QuerySource >(arena);
}
template<> PROTOBUF_NOINLINE ::device::SetPullAttr* Arena::CreateMaybeMessage< ::device::SetPullAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::SetPullAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::device::ServerSessionReq* Arena::CreateMaybeMessage< ::device::ServerSessionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::ServerSessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::device::ServerSessionRsp* Arena::CreateMaybeMessage< ::device::ServerSessionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::ServerSessionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::device::ServerKeepAlive* Arena::CreateMaybeMessage< ::device::ServerKeepAlive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device::ServerKeepAlive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
