// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mgw.proto

#include "mgw.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonRsp_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputStreamStatus_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushStreamReq_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySource_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerKeepAlive_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerSessionReq_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerSessionRsp_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionReq_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionRsp_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPullAttr_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartOutputStream_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopOutputStream_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPushingStream_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncStatusReq_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncStatusRsp_device_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevStartStreamNotify_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevStopStreamNotify_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocalSvcPortReply_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocalSvcPortReq_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepAlive_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MgwDevOfflineNotify_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MgwDevOnlineNotify_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryOnlineDevReply_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryOnlineDevReq_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetDevBlacklist_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLocalSvcPortReply_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLocalSvcPortReq_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartStreamReply_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartStreamReq_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopStreamReq_u727_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_u727_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamStatusNotify_u727_2eproto;
namespace mgw {
class MgwMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MgwMsg> _instance;
} _MgwMsg_default_instance_;
}  // namespace mgw
static void InitDefaultsscc_info_MgwMsg_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_MgwMsg_default_instance_;
    new (ptr) ::mgw::MgwMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_MgwMsg_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, 0, InitDefaultsscc_info_MgwMsg_mgw_2eproto}, {
      &scc_info_CommonRsp_device_2eproto.base,
      &scc_info_SessionReq_device_2eproto.base,
      &scc_info_SessionRsp_device_2eproto.base,
      &scc_info_StartOutputStream_device_2eproto.base,
      &scc_info_StopOutputStream_device_2eproto.base,
      &scc_info_OutputStreamStatus_device_2eproto.base,
      &scc_info_StopPushingStream_device_2eproto.base,
      &scc_info_SyncStatusReq_device_2eproto.base,
      &scc_info_SyncStatusRsp_device_2eproto.base,
      &scc_info_ServerSessionReq_device_2eproto.base,
      &scc_info_ServerSessionRsp_device_2eproto.base,
      &scc_info_QuerySource_device_2eproto.base,
      &scc_info_SetPullAttr_device_2eproto.base,
      &scc_info_PushStreamReq_device_2eproto.base,
      &scc_info_ServerKeepAlive_device_2eproto.base,
      &scc_info_SetDevBlacklist_u727_2eproto.base,
      &scc_info_SetLocalSvcPortReq_u727_2eproto.base,
      &scc_info_SetLocalSvcPortReply_u727_2eproto.base,
      &scc_info_GetLocalSvcPortReq_u727_2eproto.base,
      &scc_info_GetLocalSvcPortReply_u727_2eproto.base,
      &scc_info_StartStreamReq_u727_2eproto.base,
      &scc_info_StartStreamReply_u727_2eproto.base,
      &scc_info_StopStreamReq_u727_2eproto.base,
      &scc_info_MgwDevOnlineNotify_u727_2eproto.base,
      &scc_info_MgwDevOfflineNotify_u727_2eproto.base,
      &scc_info_StreamStatusNotify_u727_2eproto.base,
      &scc_info_DevStartStreamNotify_u727_2eproto.base,
      &scc_info_DevStopStreamNotify_u727_2eproto.base,
      &scc_info_KeepAlive_u727_2eproto.base,
      &scc_info_QueryOnlineDevReq_u727_2eproto.base,
      &scc_info_QueryOnlineDevReply_u727_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mgw_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mgw_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mgw_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mgw_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::MgwMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mgw::MgwMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mgw::MgwMsg, Message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mgw::MgwMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_MgwMsg_default_instance_),
};

const char descriptor_table_protodef_mgw_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmgw.proto\022\003mgw\032\014device.proto\032\nu727.pro"
  "to\"\207\014\n\006MgwMsg\022%\n\010response\030\024 \001(\0132\021.device"
  ".CommonRspH\000\022(\n\nsessionReq\030\025 \001(\0132\022.devic"
  "e.SessionReqH\000\022(\n\nsessionRsp\030\026 \001(\0132\022.dev"
  "ice.SessionRspH\000\0220\n\013startOutput\030\027 \001(\0132\031."
  "device.StartOutputStreamH\000\022.\n\nstopOutput"
  "\030\030 \001(\0132\030.device.StopOutputStreamH\000\022/\n\tou"
  "tputSta\030\031 \001(\0132\032.device.OutputStreamStatu"
  "sH\000\0220\n\013stopPushing\030\032 \001(\0132\031.device.StopPu"
  "shingStreamH\000\022(\n\007syncReq\030\033 \001(\0132\025.device."
  "SyncStatusReqH\000\022(\n\007syncRsp\030\034 \001(\0132\025.devic"
  "e.SyncStatusRspH\000\0221\n\rserSessionReq\030\035 \001(\013"
  "2\030.device.ServerSessionReqH\000\0221\n\rserSessi"
  "onRsp\030\036 \001(\0132\030.device.ServerSessionRspH\000\022"
  "*\n\013querySource\030\037 \001(\0132\023.device.QuerySourc"
  "eH\000\022*\n\013setPullAttr\030  \001(\0132\023.device.SetPul"
  "lAttrH\000\022.\n\rpushStreamReq\030! \001(\0132\025.device."
  "PushStreamReqH\000\022,\n\tkeepAlive\030\" \001(\0132\027.dev"
  "ice.ServerKeepAliveH\000\022.\n\014setBlackList\030\350\007"
  " \001(\0132\025.u727.SetDevBlacklistH\000\0222\n\rsetSvcP"
  "ortReq\030\351\007 \001(\0132\030.u727.SetLocalSvcPortReqH"
  "\000\0226\n\017setSvcPortReply\030\352\007 \001(\0132\032.u727.SetLo"
  "calSvcPortReplyH\000\0222\n\rgetSvcPortReq\030\353\007 \001("
  "\0132\030.u727.GetLocalSvcPortReqH\000\0226\n\017getSvcP"
  "ortReply\030\354\007 \001(\0132\032.u727.GetLocalSvcPortRe"
  "plyH\000\022/\n\016startStreamReq\030\355\007 \001(\0132\024.u727.St"
  "artStreamReqH\000\0223\n\020startStreamReply\030\356\007 \001("
  "\0132\026.u727.StartStreamReplyH\000\022*\n\nstopStrea"
  "m\030\357\007 \001(\0132\023.u727.StopStreamReqH\000\022.\n\tdevOn"
  "line\030\360\007 \001(\0132\030.u727.MgwDevOnlineNotifyH\000\022"
  "0\n\ndevOffline\030\361\007 \001(\0132\031.u727.MgwDevOfflin"
  "eNotifyH\000\0221\n\014streamStatus\030\362\007 \001(\0132\030.u727."
  "StreamStatusNotifyH\000\022;\n\024devStartStreamNo"
  "tify\030\363\007 \001(\0132\032.u727.DevStartStreamNotifyH"
  "\000\0229\n\023devStopStreamNotify\030\364\007 \001(\0132\031.u727.D"
  "evStopStreamNotifyH\000\022)\n\ru727keepAlive\030\365\007"
  " \001(\0132\017.u727.KeepAliveH\000\0225\n\021queryOnlineDe"
  "vReq\030\366\007 \001(\0132\027.u727.QueryOnlineDevReqH\000\0229"
  "\n\023queryOnlineDevReply\030\367\007 \001(\0132\031.u727.Quer"
  "yOnlineDevReplyH\000B\t\n\007Messageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mgw_2eproto_deps[2] = {
  &::descriptor_table_device_2eproto,
  &::descriptor_table_u727_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mgw_2eproto_sccs[1] = {
  &scc_info_MgwMsg_mgw_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mgw_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mgw_2eproto = {
  false, false, descriptor_table_protodef_mgw_2eproto, "mgw.proto", 1596,
  &descriptor_table_mgw_2eproto_once, descriptor_table_mgw_2eproto_sccs, descriptor_table_mgw_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_mgw_2eproto::offsets,
  file_level_metadata_mgw_2eproto, 1, file_level_enum_descriptors_mgw_2eproto, file_level_service_descriptors_mgw_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mgw_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mgw_2eproto)), true);
namespace mgw {

// ===================================================================

class MgwMsg::_Internal {
 public:
  static const ::device::CommonRsp& response(const MgwMsg* msg);
  static const ::device::SessionReq& sessionreq(const MgwMsg* msg);
  static const ::device::SessionRsp& sessionrsp(const MgwMsg* msg);
  static const ::device::StartOutputStream& startoutput(const MgwMsg* msg);
  static const ::device::StopOutputStream& stopoutput(const MgwMsg* msg);
  static const ::device::OutputStreamStatus& outputsta(const MgwMsg* msg);
  static const ::device::StopPushingStream& stoppushing(const MgwMsg* msg);
  static const ::device::SyncStatusReq& syncreq(const MgwMsg* msg);
  static const ::device::SyncStatusRsp& syncrsp(const MgwMsg* msg);
  static const ::device::ServerSessionReq& sersessionreq(const MgwMsg* msg);
  static const ::device::ServerSessionRsp& sersessionrsp(const MgwMsg* msg);
  static const ::device::QuerySource& querysource(const MgwMsg* msg);
  static const ::device::SetPullAttr& setpullattr(const MgwMsg* msg);
  static const ::device::PushStreamReq& pushstreamreq(const MgwMsg* msg);
  static const ::device::ServerKeepAlive& keepalive(const MgwMsg* msg);
  static const ::u727::SetDevBlacklist& setblacklist(const MgwMsg* msg);
  static const ::u727::SetLocalSvcPortReq& setsvcportreq(const MgwMsg* msg);
  static const ::u727::SetLocalSvcPortReply& setsvcportreply(const MgwMsg* msg);
  static const ::u727::GetLocalSvcPortReq& getsvcportreq(const MgwMsg* msg);
  static const ::u727::GetLocalSvcPortReply& getsvcportreply(const MgwMsg* msg);
  static const ::u727::StartStreamReq& startstreamreq(const MgwMsg* msg);
  static const ::u727::StartStreamReply& startstreamreply(const MgwMsg* msg);
  static const ::u727::StopStreamReq& stopstream(const MgwMsg* msg);
  static const ::u727::MgwDevOnlineNotify& devonline(const MgwMsg* msg);
  static const ::u727::MgwDevOfflineNotify& devoffline(const MgwMsg* msg);
  static const ::u727::StreamStatusNotify& streamstatus(const MgwMsg* msg);
  static const ::u727::DevStartStreamNotify& devstartstreamnotify(const MgwMsg* msg);
  static const ::u727::DevStopStreamNotify& devstopstreamnotify(const MgwMsg* msg);
  static const ::u727::KeepAlive& u727keepalive(const MgwMsg* msg);
  static const ::u727::QueryOnlineDevReq& queryonlinedevreq(const MgwMsg* msg);
  static const ::u727::QueryOnlineDevReply& queryonlinedevreply(const MgwMsg* msg);
};

const ::device::CommonRsp&
MgwMsg::_Internal::response(const MgwMsg* msg) {
  return *msg->Message_.response_;
}
const ::device::SessionReq&
MgwMsg::_Internal::sessionreq(const MgwMsg* msg) {
  return *msg->Message_.sessionreq_;
}
const ::device::SessionRsp&
MgwMsg::_Internal::sessionrsp(const MgwMsg* msg) {
  return *msg->Message_.sessionrsp_;
}
const ::device::StartOutputStream&
MgwMsg::_Internal::startoutput(const MgwMsg* msg) {
  return *msg->Message_.startoutput_;
}
const ::device::StopOutputStream&
MgwMsg::_Internal::stopoutput(const MgwMsg* msg) {
  return *msg->Message_.stopoutput_;
}
const ::device::OutputStreamStatus&
MgwMsg::_Internal::outputsta(const MgwMsg* msg) {
  return *msg->Message_.outputsta_;
}
const ::device::StopPushingStream&
MgwMsg::_Internal::stoppushing(const MgwMsg* msg) {
  return *msg->Message_.stoppushing_;
}
const ::device::SyncStatusReq&
MgwMsg::_Internal::syncreq(const MgwMsg* msg) {
  return *msg->Message_.syncreq_;
}
const ::device::SyncStatusRsp&
MgwMsg::_Internal::syncrsp(const MgwMsg* msg) {
  return *msg->Message_.syncrsp_;
}
const ::device::ServerSessionReq&
MgwMsg::_Internal::sersessionreq(const MgwMsg* msg) {
  return *msg->Message_.sersessionreq_;
}
const ::device::ServerSessionRsp&
MgwMsg::_Internal::sersessionrsp(const MgwMsg* msg) {
  return *msg->Message_.sersessionrsp_;
}
const ::device::QuerySource&
MgwMsg::_Internal::querysource(const MgwMsg* msg) {
  return *msg->Message_.querysource_;
}
const ::device::SetPullAttr&
MgwMsg::_Internal::setpullattr(const MgwMsg* msg) {
  return *msg->Message_.setpullattr_;
}
const ::device::PushStreamReq&
MgwMsg::_Internal::pushstreamreq(const MgwMsg* msg) {
  return *msg->Message_.pushstreamreq_;
}
const ::device::ServerKeepAlive&
MgwMsg::_Internal::keepalive(const MgwMsg* msg) {
  return *msg->Message_.keepalive_;
}
const ::u727::SetDevBlacklist&
MgwMsg::_Internal::setblacklist(const MgwMsg* msg) {
  return *msg->Message_.setblacklist_;
}
const ::u727::SetLocalSvcPortReq&
MgwMsg::_Internal::setsvcportreq(const MgwMsg* msg) {
  return *msg->Message_.setsvcportreq_;
}
const ::u727::SetLocalSvcPortReply&
MgwMsg::_Internal::setsvcportreply(const MgwMsg* msg) {
  return *msg->Message_.setsvcportreply_;
}
const ::u727::GetLocalSvcPortReq&
MgwMsg::_Internal::getsvcportreq(const MgwMsg* msg) {
  return *msg->Message_.getsvcportreq_;
}
const ::u727::GetLocalSvcPortReply&
MgwMsg::_Internal::getsvcportreply(const MgwMsg* msg) {
  return *msg->Message_.getsvcportreply_;
}
const ::u727::StartStreamReq&
MgwMsg::_Internal::startstreamreq(const MgwMsg* msg) {
  return *msg->Message_.startstreamreq_;
}
const ::u727::StartStreamReply&
MgwMsg::_Internal::startstreamreply(const MgwMsg* msg) {
  return *msg->Message_.startstreamreply_;
}
const ::u727::StopStreamReq&
MgwMsg::_Internal::stopstream(const MgwMsg* msg) {
  return *msg->Message_.stopstream_;
}
const ::u727::MgwDevOnlineNotify&
MgwMsg::_Internal::devonline(const MgwMsg* msg) {
  return *msg->Message_.devonline_;
}
const ::u727::MgwDevOfflineNotify&
MgwMsg::_Internal::devoffline(const MgwMsg* msg) {
  return *msg->Message_.devoffline_;
}
const ::u727::StreamStatusNotify&
MgwMsg::_Internal::streamstatus(const MgwMsg* msg) {
  return *msg->Message_.streamstatus_;
}
const ::u727::DevStartStreamNotify&
MgwMsg::_Internal::devstartstreamnotify(const MgwMsg* msg) {
  return *msg->Message_.devstartstreamnotify_;
}
const ::u727::DevStopStreamNotify&
MgwMsg::_Internal::devstopstreamnotify(const MgwMsg* msg) {
  return *msg->Message_.devstopstreamnotify_;
}
const ::u727::KeepAlive&
MgwMsg::_Internal::u727keepalive(const MgwMsg* msg) {
  return *msg->Message_.u727keepalive_;
}
const ::u727::QueryOnlineDevReq&
MgwMsg::_Internal::queryonlinedevreq(const MgwMsg* msg) {
  return *msg->Message_.queryonlinedevreq_;
}
const ::u727::QueryOnlineDevReply&
MgwMsg::_Internal::queryonlinedevreply(const MgwMsg* msg) {
  return *msg->Message_.queryonlinedevreply_;
}
void MgwMsg::set_allocated_response(::device::CommonRsp* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    Message_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.response)
}
void MgwMsg::clear_response() {
  if (_internal_has_response()) {
    if (GetArena() == nullptr) {
      delete Message_.response_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_sessionreq(::device::SessionReq* sessionreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (sessionreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sessionreq)->GetArena();
    if (message_arena != submessage_arena) {
      sessionreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sessionreq, submessage_arena);
    }
    set_has_sessionreq();
    Message_.sessionreq_ = sessionreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.sessionReq)
}
void MgwMsg::clear_sessionreq() {
  if (_internal_has_sessionreq()) {
    if (GetArena() == nullptr) {
      delete Message_.sessionreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_sessionrsp(::device::SessionRsp* sessionrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (sessionrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sessionrsp)->GetArena();
    if (message_arena != submessage_arena) {
      sessionrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sessionrsp, submessage_arena);
    }
    set_has_sessionrsp();
    Message_.sessionrsp_ = sessionrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.sessionRsp)
}
void MgwMsg::clear_sessionrsp() {
  if (_internal_has_sessionrsp()) {
    if (GetArena() == nullptr) {
      delete Message_.sessionrsp_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_startoutput(::device::StartOutputStream* startoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (startoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startoutput)->GetArena();
    if (message_arena != submessage_arena) {
      startoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startoutput, submessage_arena);
    }
    set_has_startoutput();
    Message_.startoutput_ = startoutput;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.startOutput)
}
void MgwMsg::clear_startoutput() {
  if (_internal_has_startoutput()) {
    if (GetArena() == nullptr) {
      delete Message_.startoutput_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_stopoutput(::device::StopOutputStream* stopoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (stopoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopoutput)->GetArena();
    if (message_arena != submessage_arena) {
      stopoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopoutput, submessage_arena);
    }
    set_has_stopoutput();
    Message_.stopoutput_ = stopoutput;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.stopOutput)
}
void MgwMsg::clear_stopoutput() {
  if (_internal_has_stopoutput()) {
    if (GetArena() == nullptr) {
      delete Message_.stopoutput_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_outputsta(::device::OutputStreamStatus* outputsta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (outputsta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outputsta)->GetArena();
    if (message_arena != submessage_arena) {
      outputsta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputsta, submessage_arena);
    }
    set_has_outputsta();
    Message_.outputsta_ = outputsta;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.outputSta)
}
void MgwMsg::clear_outputsta() {
  if (_internal_has_outputsta()) {
    if (GetArena() == nullptr) {
      delete Message_.outputsta_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_stoppushing(::device::StopPushingStream* stoppushing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (stoppushing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoppushing)->GetArena();
    if (message_arena != submessage_arena) {
      stoppushing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stoppushing, submessage_arena);
    }
    set_has_stoppushing();
    Message_.stoppushing_ = stoppushing;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.stopPushing)
}
void MgwMsg::clear_stoppushing() {
  if (_internal_has_stoppushing()) {
    if (GetArena() == nullptr) {
      delete Message_.stoppushing_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_syncreq(::device::SyncStatusReq* syncreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (syncreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncreq)->GetArena();
    if (message_arena != submessage_arena) {
      syncreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncreq, submessage_arena);
    }
    set_has_syncreq();
    Message_.syncreq_ = syncreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.syncReq)
}
void MgwMsg::clear_syncreq() {
  if (_internal_has_syncreq()) {
    if (GetArena() == nullptr) {
      delete Message_.syncreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_syncrsp(::device::SyncStatusRsp* syncrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (syncrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncrsp)->GetArena();
    if (message_arena != submessage_arena) {
      syncrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncrsp, submessage_arena);
    }
    set_has_syncrsp();
    Message_.syncrsp_ = syncrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.syncRsp)
}
void MgwMsg::clear_syncrsp() {
  if (_internal_has_syncrsp()) {
    if (GetArena() == nullptr) {
      delete Message_.syncrsp_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_sersessionreq(::device::ServerSessionReq* sersessionreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (sersessionreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sersessionreq)->GetArena();
    if (message_arena != submessage_arena) {
      sersessionreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sersessionreq, submessage_arena);
    }
    set_has_sersessionreq();
    Message_.sersessionreq_ = sersessionreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.serSessionReq)
}
void MgwMsg::clear_sersessionreq() {
  if (_internal_has_sersessionreq()) {
    if (GetArena() == nullptr) {
      delete Message_.sersessionreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_sersessionrsp(::device::ServerSessionRsp* sersessionrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (sersessionrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sersessionrsp)->GetArena();
    if (message_arena != submessage_arena) {
      sersessionrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sersessionrsp, submessage_arena);
    }
    set_has_sersessionrsp();
    Message_.sersessionrsp_ = sersessionrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.serSessionRsp)
}
void MgwMsg::clear_sersessionrsp() {
  if (_internal_has_sersessionrsp()) {
    if (GetArena() == nullptr) {
      delete Message_.sersessionrsp_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_querysource(::device::QuerySource* querysource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (querysource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(querysource)->GetArena();
    if (message_arena != submessage_arena) {
      querysource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, querysource, submessage_arena);
    }
    set_has_querysource();
    Message_.querysource_ = querysource;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.querySource)
}
void MgwMsg::clear_querysource() {
  if (_internal_has_querysource()) {
    if (GetArena() == nullptr) {
      delete Message_.querysource_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_setpullattr(::device::SetPullAttr* setpullattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (setpullattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setpullattr)->GetArena();
    if (message_arena != submessage_arena) {
      setpullattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpullattr, submessage_arena);
    }
    set_has_setpullattr();
    Message_.setpullattr_ = setpullattr;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.setPullAttr)
}
void MgwMsg::clear_setpullattr() {
  if (_internal_has_setpullattr()) {
    if (GetArena() == nullptr) {
      delete Message_.setpullattr_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_pushstreamreq(::device::PushStreamReq* pushstreamreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (pushstreamreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pushstreamreq)->GetArena();
    if (message_arena != submessage_arena) {
      pushstreamreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushstreamreq, submessage_arena);
    }
    set_has_pushstreamreq();
    Message_.pushstreamreq_ = pushstreamreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.pushStreamReq)
}
void MgwMsg::clear_pushstreamreq() {
  if (_internal_has_pushstreamreq()) {
    if (GetArena() == nullptr) {
      delete Message_.pushstreamreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_keepalive(::device::ServerKeepAlive* keepalive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (keepalive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keepalive)->GetArena();
    if (message_arena != submessage_arena) {
      keepalive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keepalive, submessage_arena);
    }
    set_has_keepalive();
    Message_.keepalive_ = keepalive;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.keepAlive)
}
void MgwMsg::clear_keepalive() {
  if (_internal_has_keepalive()) {
    if (GetArena() == nullptr) {
      delete Message_.keepalive_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_setblacklist(::u727::SetDevBlacklist* setblacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (setblacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setblacklist)->GetArena();
    if (message_arena != submessage_arena) {
      setblacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setblacklist, submessage_arena);
    }
    set_has_setblacklist();
    Message_.setblacklist_ = setblacklist;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.setBlackList)
}
void MgwMsg::clear_setblacklist() {
  if (_internal_has_setblacklist()) {
    if (GetArena() == nullptr) {
      delete Message_.setblacklist_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_setsvcportreq(::u727::SetLocalSvcPortReq* setsvcportreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (setsvcportreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setsvcportreq)->GetArena();
    if (message_arena != submessage_arena) {
      setsvcportreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setsvcportreq, submessage_arena);
    }
    set_has_setsvcportreq();
    Message_.setsvcportreq_ = setsvcportreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.setSvcPortReq)
}
void MgwMsg::clear_setsvcportreq() {
  if (_internal_has_setsvcportreq()) {
    if (GetArena() == nullptr) {
      delete Message_.setsvcportreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_setsvcportreply(::u727::SetLocalSvcPortReply* setsvcportreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (setsvcportreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setsvcportreply)->GetArena();
    if (message_arena != submessage_arena) {
      setsvcportreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setsvcportreply, submessage_arena);
    }
    set_has_setsvcportreply();
    Message_.setsvcportreply_ = setsvcportreply;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.setSvcPortReply)
}
void MgwMsg::clear_setsvcportreply() {
  if (_internal_has_setsvcportreply()) {
    if (GetArena() == nullptr) {
      delete Message_.setsvcportreply_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_getsvcportreq(::u727::GetLocalSvcPortReq* getsvcportreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (getsvcportreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getsvcportreq)->GetArena();
    if (message_arena != submessage_arena) {
      getsvcportreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsvcportreq, submessage_arena);
    }
    set_has_getsvcportreq();
    Message_.getsvcportreq_ = getsvcportreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.getSvcPortReq)
}
void MgwMsg::clear_getsvcportreq() {
  if (_internal_has_getsvcportreq()) {
    if (GetArena() == nullptr) {
      delete Message_.getsvcportreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_getsvcportreply(::u727::GetLocalSvcPortReply* getsvcportreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (getsvcportreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getsvcportreply)->GetArena();
    if (message_arena != submessage_arena) {
      getsvcportreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsvcportreply, submessage_arena);
    }
    set_has_getsvcportreply();
    Message_.getsvcportreply_ = getsvcportreply;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.getSvcPortReply)
}
void MgwMsg::clear_getsvcportreply() {
  if (_internal_has_getsvcportreply()) {
    if (GetArena() == nullptr) {
      delete Message_.getsvcportreply_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_startstreamreq(::u727::StartStreamReq* startstreamreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (startstreamreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startstreamreq)->GetArena();
    if (message_arena != submessage_arena) {
      startstreamreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startstreamreq, submessage_arena);
    }
    set_has_startstreamreq();
    Message_.startstreamreq_ = startstreamreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.startStreamReq)
}
void MgwMsg::clear_startstreamreq() {
  if (_internal_has_startstreamreq()) {
    if (GetArena() == nullptr) {
      delete Message_.startstreamreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_startstreamreply(::u727::StartStreamReply* startstreamreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (startstreamreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startstreamreply)->GetArena();
    if (message_arena != submessage_arena) {
      startstreamreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startstreamreply, submessage_arena);
    }
    set_has_startstreamreply();
    Message_.startstreamreply_ = startstreamreply;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.startStreamReply)
}
void MgwMsg::clear_startstreamreply() {
  if (_internal_has_startstreamreply()) {
    if (GetArena() == nullptr) {
      delete Message_.startstreamreply_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_stopstream(::u727::StopStreamReq* stopstream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (stopstream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopstream)->GetArena();
    if (message_arena != submessage_arena) {
      stopstream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopstream, submessage_arena);
    }
    set_has_stopstream();
    Message_.stopstream_ = stopstream;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.stopStream)
}
void MgwMsg::clear_stopstream() {
  if (_internal_has_stopstream()) {
    if (GetArena() == nullptr) {
      delete Message_.stopstream_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_devonline(::u727::MgwDevOnlineNotify* devonline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (devonline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devonline)->GetArena();
    if (message_arena != submessage_arena) {
      devonline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devonline, submessage_arena);
    }
    set_has_devonline();
    Message_.devonline_ = devonline;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.devOnline)
}
void MgwMsg::clear_devonline() {
  if (_internal_has_devonline()) {
    if (GetArena() == nullptr) {
      delete Message_.devonline_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_devoffline(::u727::MgwDevOfflineNotify* devoffline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (devoffline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devoffline)->GetArena();
    if (message_arena != submessage_arena) {
      devoffline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devoffline, submessage_arena);
    }
    set_has_devoffline();
    Message_.devoffline_ = devoffline;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.devOffline)
}
void MgwMsg::clear_devoffline() {
  if (_internal_has_devoffline()) {
    if (GetArena() == nullptr) {
      delete Message_.devoffline_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_streamstatus(::u727::StreamStatusNotify* streamstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (streamstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamstatus)->GetArena();
    if (message_arena != submessage_arena) {
      streamstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streamstatus, submessage_arena);
    }
    set_has_streamstatus();
    Message_.streamstatus_ = streamstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.streamStatus)
}
void MgwMsg::clear_streamstatus() {
  if (_internal_has_streamstatus()) {
    if (GetArena() == nullptr) {
      delete Message_.streamstatus_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_devstartstreamnotify(::u727::DevStartStreamNotify* devstartstreamnotify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (devstartstreamnotify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devstartstreamnotify)->GetArena();
    if (message_arena != submessage_arena) {
      devstartstreamnotify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devstartstreamnotify, submessage_arena);
    }
    set_has_devstartstreamnotify();
    Message_.devstartstreamnotify_ = devstartstreamnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.devStartStreamNotify)
}
void MgwMsg::clear_devstartstreamnotify() {
  if (_internal_has_devstartstreamnotify()) {
    if (GetArena() == nullptr) {
      delete Message_.devstartstreamnotify_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_devstopstreamnotify(::u727::DevStopStreamNotify* devstopstreamnotify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (devstopstreamnotify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devstopstreamnotify)->GetArena();
    if (message_arena != submessage_arena) {
      devstopstreamnotify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devstopstreamnotify, submessage_arena);
    }
    set_has_devstopstreamnotify();
    Message_.devstopstreamnotify_ = devstopstreamnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.devStopStreamNotify)
}
void MgwMsg::clear_devstopstreamnotify() {
  if (_internal_has_devstopstreamnotify()) {
    if (GetArena() == nullptr) {
      delete Message_.devstopstreamnotify_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_u727keepalive(::u727::KeepAlive* u727keepalive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (u727keepalive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(u727keepalive)->GetArena();
    if (message_arena != submessage_arena) {
      u727keepalive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u727keepalive, submessage_arena);
    }
    set_has_u727keepalive();
    Message_.u727keepalive_ = u727keepalive;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.u727keepAlive)
}
void MgwMsg::clear_u727keepalive() {
  if (_internal_has_u727keepalive()) {
    if (GetArena() == nullptr) {
      delete Message_.u727keepalive_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_queryonlinedevreq(::u727::QueryOnlineDevReq* queryonlinedevreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (queryonlinedevreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryonlinedevreq)->GetArena();
    if (message_arena != submessage_arena) {
      queryonlinedevreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryonlinedevreq, submessage_arena);
    }
    set_has_queryonlinedevreq();
    Message_.queryonlinedevreq_ = queryonlinedevreq;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.queryOnlineDevReq)
}
void MgwMsg::clear_queryonlinedevreq() {
  if (_internal_has_queryonlinedevreq()) {
    if (GetArena() == nullptr) {
      delete Message_.queryonlinedevreq_;
    }
    clear_has_Message();
  }
}
void MgwMsg::set_allocated_queryonlinedevreply(::u727::QueryOnlineDevReply* queryonlinedevreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Message();
  if (queryonlinedevreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryonlinedevreply)->GetArena();
    if (message_arena != submessage_arena) {
      queryonlinedevreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryonlinedevreply, submessage_arena);
    }
    set_has_queryonlinedevreply();
    Message_.queryonlinedevreply_ = queryonlinedevreply;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.queryOnlineDevReply)
}
void MgwMsg::clear_queryonlinedevreply() {
  if (_internal_has_queryonlinedevreply()) {
    if (GetArena() == nullptr) {
      delete Message_.queryonlinedevreply_;
    }
    clear_has_Message();
  }
}
MgwMsg::MgwMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.MgwMsg)
}
MgwMsg::MgwMsg(const MgwMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Message();
  switch (from.Message_case()) {
    case kResponse: {
      _internal_mutable_response()->::device::CommonRsp::MergeFrom(from._internal_response());
      break;
    }
    case kSessionReq: {
      _internal_mutable_sessionreq()->::device::SessionReq::MergeFrom(from._internal_sessionreq());
      break;
    }
    case kSessionRsp: {
      _internal_mutable_sessionrsp()->::device::SessionRsp::MergeFrom(from._internal_sessionrsp());
      break;
    }
    case kStartOutput: {
      _internal_mutable_startoutput()->::device::StartOutputStream::MergeFrom(from._internal_startoutput());
      break;
    }
    case kStopOutput: {
      _internal_mutable_stopoutput()->::device::StopOutputStream::MergeFrom(from._internal_stopoutput());
      break;
    }
    case kOutputSta: {
      _internal_mutable_outputsta()->::device::OutputStreamStatus::MergeFrom(from._internal_outputsta());
      break;
    }
    case kStopPushing: {
      _internal_mutable_stoppushing()->::device::StopPushingStream::MergeFrom(from._internal_stoppushing());
      break;
    }
    case kSyncReq: {
      _internal_mutable_syncreq()->::device::SyncStatusReq::MergeFrom(from._internal_syncreq());
      break;
    }
    case kSyncRsp: {
      _internal_mutable_syncrsp()->::device::SyncStatusRsp::MergeFrom(from._internal_syncrsp());
      break;
    }
    case kSerSessionReq: {
      _internal_mutable_sersessionreq()->::device::ServerSessionReq::MergeFrom(from._internal_sersessionreq());
      break;
    }
    case kSerSessionRsp: {
      _internal_mutable_sersessionrsp()->::device::ServerSessionRsp::MergeFrom(from._internal_sersessionrsp());
      break;
    }
    case kQuerySource: {
      _internal_mutable_querysource()->::device::QuerySource::MergeFrom(from._internal_querysource());
      break;
    }
    case kSetPullAttr: {
      _internal_mutable_setpullattr()->::device::SetPullAttr::MergeFrom(from._internal_setpullattr());
      break;
    }
    case kPushStreamReq: {
      _internal_mutable_pushstreamreq()->::device::PushStreamReq::MergeFrom(from._internal_pushstreamreq());
      break;
    }
    case kKeepAlive: {
      _internal_mutable_keepalive()->::device::ServerKeepAlive::MergeFrom(from._internal_keepalive());
      break;
    }
    case kSetBlackList: {
      _internal_mutable_setblacklist()->::u727::SetDevBlacklist::MergeFrom(from._internal_setblacklist());
      break;
    }
    case kSetSvcPortReq: {
      _internal_mutable_setsvcportreq()->::u727::SetLocalSvcPortReq::MergeFrom(from._internal_setsvcportreq());
      break;
    }
    case kSetSvcPortReply: {
      _internal_mutable_setsvcportreply()->::u727::SetLocalSvcPortReply::MergeFrom(from._internal_setsvcportreply());
      break;
    }
    case kGetSvcPortReq: {
      _internal_mutable_getsvcportreq()->::u727::GetLocalSvcPortReq::MergeFrom(from._internal_getsvcportreq());
      break;
    }
    case kGetSvcPortReply: {
      _internal_mutable_getsvcportreply()->::u727::GetLocalSvcPortReply::MergeFrom(from._internal_getsvcportreply());
      break;
    }
    case kStartStreamReq: {
      _internal_mutable_startstreamreq()->::u727::StartStreamReq::MergeFrom(from._internal_startstreamreq());
      break;
    }
    case kStartStreamReply: {
      _internal_mutable_startstreamreply()->::u727::StartStreamReply::MergeFrom(from._internal_startstreamreply());
      break;
    }
    case kStopStream: {
      _internal_mutable_stopstream()->::u727::StopStreamReq::MergeFrom(from._internal_stopstream());
      break;
    }
    case kDevOnline: {
      _internal_mutable_devonline()->::u727::MgwDevOnlineNotify::MergeFrom(from._internal_devonline());
      break;
    }
    case kDevOffline: {
      _internal_mutable_devoffline()->::u727::MgwDevOfflineNotify::MergeFrom(from._internal_devoffline());
      break;
    }
    case kStreamStatus: {
      _internal_mutable_streamstatus()->::u727::StreamStatusNotify::MergeFrom(from._internal_streamstatus());
      break;
    }
    case kDevStartStreamNotify: {
      _internal_mutable_devstartstreamnotify()->::u727::DevStartStreamNotify::MergeFrom(from._internal_devstartstreamnotify());
      break;
    }
    case kDevStopStreamNotify: {
      _internal_mutable_devstopstreamnotify()->::u727::DevStopStreamNotify::MergeFrom(from._internal_devstopstreamnotify());
      break;
    }
    case kU727KeepAlive: {
      _internal_mutable_u727keepalive()->::u727::KeepAlive::MergeFrom(from._internal_u727keepalive());
      break;
    }
    case kQueryOnlineDevReq: {
      _internal_mutable_queryonlinedevreq()->::u727::QueryOnlineDevReq::MergeFrom(from._internal_queryonlinedevreq());
      break;
    }
    case kQueryOnlineDevReply: {
      _internal_mutable_queryonlinedevreply()->::u727::QueryOnlineDevReply::MergeFrom(from._internal_queryonlinedevreply());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mgw.MgwMsg)
}

void MgwMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MgwMsg_mgw_2eproto.base);
  clear_has_Message();
}

MgwMsg::~MgwMsg() {
  // @@protoc_insertion_point(destructor:mgw.MgwMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MgwMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void MgwMsg::ArenaDtor(void* object) {
  MgwMsg* _this = reinterpret_cast< MgwMsg* >(object);
  (void)_this;
}
void MgwMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MgwMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MgwMsg& MgwMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MgwMsg_mgw_2eproto.base);
  return *internal_default_instance();
}


void MgwMsg::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:mgw.MgwMsg)
  switch (Message_case()) {
    case kResponse: {
      if (GetArena() == nullptr) {
        delete Message_.response_;
      }
      break;
    }
    case kSessionReq: {
      if (GetArena() == nullptr) {
        delete Message_.sessionreq_;
      }
      break;
    }
    case kSessionRsp: {
      if (GetArena() == nullptr) {
        delete Message_.sessionrsp_;
      }
      break;
    }
    case kStartOutput: {
      if (GetArena() == nullptr) {
        delete Message_.startoutput_;
      }
      break;
    }
    case kStopOutput: {
      if (GetArena() == nullptr) {
        delete Message_.stopoutput_;
      }
      break;
    }
    case kOutputSta: {
      if (GetArena() == nullptr) {
        delete Message_.outputsta_;
      }
      break;
    }
    case kStopPushing: {
      if (GetArena() == nullptr) {
        delete Message_.stoppushing_;
      }
      break;
    }
    case kSyncReq: {
      if (GetArena() == nullptr) {
        delete Message_.syncreq_;
      }
      break;
    }
    case kSyncRsp: {
      if (GetArena() == nullptr) {
        delete Message_.syncrsp_;
      }
      break;
    }
    case kSerSessionReq: {
      if (GetArena() == nullptr) {
        delete Message_.sersessionreq_;
      }
      break;
    }
    case kSerSessionRsp: {
      if (GetArena() == nullptr) {
        delete Message_.sersessionrsp_;
      }
      break;
    }
    case kQuerySource: {
      if (GetArena() == nullptr) {
        delete Message_.querysource_;
      }
      break;
    }
    case kSetPullAttr: {
      if (GetArena() == nullptr) {
        delete Message_.setpullattr_;
      }
      break;
    }
    case kPushStreamReq: {
      if (GetArena() == nullptr) {
        delete Message_.pushstreamreq_;
      }
      break;
    }
    case kKeepAlive: {
      if (GetArena() == nullptr) {
        delete Message_.keepalive_;
      }
      break;
    }
    case kSetBlackList: {
      if (GetArena() == nullptr) {
        delete Message_.setblacklist_;
      }
      break;
    }
    case kSetSvcPortReq: {
      if (GetArena() == nullptr) {
        delete Message_.setsvcportreq_;
      }
      break;
    }
    case kSetSvcPortReply: {
      if (GetArena() == nullptr) {
        delete Message_.setsvcportreply_;
      }
      break;
    }
    case kGetSvcPortReq: {
      if (GetArena() == nullptr) {
        delete Message_.getsvcportreq_;
      }
      break;
    }
    case kGetSvcPortReply: {
      if (GetArena() == nullptr) {
        delete Message_.getsvcportreply_;
      }
      break;
    }
    case kStartStreamReq: {
      if (GetArena() == nullptr) {
        delete Message_.startstreamreq_;
      }
      break;
    }
    case kStartStreamReply: {
      if (GetArena() == nullptr) {
        delete Message_.startstreamreply_;
      }
      break;
    }
    case kStopStream: {
      if (GetArena() == nullptr) {
        delete Message_.stopstream_;
      }
      break;
    }
    case kDevOnline: {
      if (GetArena() == nullptr) {
        delete Message_.devonline_;
      }
      break;
    }
    case kDevOffline: {
      if (GetArena() == nullptr) {
        delete Message_.devoffline_;
      }
      break;
    }
    case kStreamStatus: {
      if (GetArena() == nullptr) {
        delete Message_.streamstatus_;
      }
      break;
    }
    case kDevStartStreamNotify: {
      if (GetArena() == nullptr) {
        delete Message_.devstartstreamnotify_;
      }
      break;
    }
    case kDevStopStreamNotify: {
      if (GetArena() == nullptr) {
        delete Message_.devstopstreamnotify_;
      }
      break;
    }
    case kU727KeepAlive: {
      if (GetArena() == nullptr) {
        delete Message_.u727keepalive_;
      }
      break;
    }
    case kQueryOnlineDevReq: {
      if (GetArena() == nullptr) {
        delete Message_.queryonlinedevreq_;
      }
      break;
    }
    case kQueryOnlineDevReply: {
      if (GetArena() == nullptr) {
        delete Message_.queryonlinedevreply_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void MgwMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.MgwMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MgwMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .device.CommonRsp response = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.SessionReq sessionReq = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.SessionRsp sessionRsp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessionrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.StartOutputStream startOutput = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_startoutput(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.StopOutputStream stopOutput = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopoutput(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.OutputStreamStatus outputSta = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_outputsta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.StopPushingStream stopPushing = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoppushing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.SyncStatusReq syncReq = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.SyncStatusRsp syncRsp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.ServerSessionReq serSessionReq = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_sersessionreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.ServerSessionRsp serSessionRsp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_sersessionrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.QuerySource querySource = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_querysource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.SetPullAttr setPullAttr = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpullattr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.PushStreamReq pushStreamReq = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushstreamreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .device.ServerKeepAlive keepAlive = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_keepalive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.SetDevBlacklist setBlackList = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_setblacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.SetLocalSvcPortReq setSvcPortReq = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_setsvcportreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.SetLocalSvcPortReply setSvcPortReply = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_setsvcportreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.GetLocalSvcPortReq getSvcPortReq = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsvcportreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.GetLocalSvcPortReply getSvcPortReply = 1004;
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsvcportreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.StartStreamReq startStreamReq = 1005;
      case 1005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_startstreamreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.StartStreamReply startStreamReply = 1006;
      case 1006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_startstreamreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.StopStreamReq stopStream = 1007;
      case 1007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopstream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.MgwDevOnlineNotify devOnline = 1008;
      case 1008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_devonline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.MgwDevOfflineNotify devOffline = 1009;
      case 1009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_devoffline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.StreamStatusNotify streamStatus = 1010;
      case 1010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_streamstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.DevStartStreamNotify devStartStreamNotify = 1011;
      case 1011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_devstartstreamnotify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.DevStopStreamNotify devStopStreamNotify = 1012;
      case 1012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_devstopstreamnotify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.KeepAlive u727keepAlive = 1013;
      case 1013:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_u727keepalive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.QueryOnlineDevReq queryOnlineDevReq = 1014;
      case 1014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryonlinedevreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .u727.QueryOnlineDevReply queryOnlineDevReply = 1015;
      case 1015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryonlinedevreply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MgwMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.MgwMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .device.CommonRsp response = 20;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::response(this), target, stream);
  }

  // .device.SessionReq sessionReq = 21;
  if (_internal_has_sessionreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::sessionreq(this), target, stream);
  }

  // .device.SessionRsp sessionRsp = 22;
  if (_internal_has_sessionrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::sessionrsp(this), target, stream);
  }

  // .device.StartOutputStream startOutput = 23;
  if (_internal_has_startoutput()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::startoutput(this), target, stream);
  }

  // .device.StopOutputStream stopOutput = 24;
  if (_internal_has_stopoutput()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::stopoutput(this), target, stream);
  }

  // .device.OutputStreamStatus outputSta = 25;
  if (_internal_has_outputsta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::outputsta(this), target, stream);
  }

  // .device.StopPushingStream stopPushing = 26;
  if (_internal_has_stoppushing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::stoppushing(this), target, stream);
  }

  // .device.SyncStatusReq syncReq = 27;
  if (_internal_has_syncreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::syncreq(this), target, stream);
  }

  // .device.SyncStatusRsp syncRsp = 28;
  if (_internal_has_syncrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::syncrsp(this), target, stream);
  }

  // .device.ServerSessionReq serSessionReq = 29;
  if (_internal_has_sersessionreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::sersessionreq(this), target, stream);
  }

  // .device.ServerSessionRsp serSessionRsp = 30;
  if (_internal_has_sersessionrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::sersessionrsp(this), target, stream);
  }

  // .device.QuerySource querySource = 31;
  if (_internal_has_querysource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::querysource(this), target, stream);
  }

  // .device.SetPullAttr setPullAttr = 32;
  if (_internal_has_setpullattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::setpullattr(this), target, stream);
  }

  // .device.PushStreamReq pushStreamReq = 33;
  if (_internal_has_pushstreamreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::pushstreamreq(this), target, stream);
  }

  // .device.ServerKeepAlive keepAlive = 34;
  if (_internal_has_keepalive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::keepalive(this), target, stream);
  }

  // .u727.SetDevBlacklist setBlackList = 1000;
  if (_internal_has_setblacklist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::setblacklist(this), target, stream);
  }

  // .u727.SetLocalSvcPortReq setSvcPortReq = 1001;
  if (_internal_has_setsvcportreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::setsvcportreq(this), target, stream);
  }

  // .u727.SetLocalSvcPortReply setSvcPortReply = 1002;
  if (_internal_has_setsvcportreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::setsvcportreply(this), target, stream);
  }

  // .u727.GetLocalSvcPortReq getSvcPortReq = 1003;
  if (_internal_has_getsvcportreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::getsvcportreq(this), target, stream);
  }

  // .u727.GetLocalSvcPortReply getSvcPortReply = 1004;
  if (_internal_has_getsvcportreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1004, _Internal::getsvcportreply(this), target, stream);
  }

  // .u727.StartStreamReq startStreamReq = 1005;
  if (_internal_has_startstreamreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1005, _Internal::startstreamreq(this), target, stream);
  }

  // .u727.StartStreamReply startStreamReply = 1006;
  if (_internal_has_startstreamreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1006, _Internal::startstreamreply(this), target, stream);
  }

  // .u727.StopStreamReq stopStream = 1007;
  if (_internal_has_stopstream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1007, _Internal::stopstream(this), target, stream);
  }

  // .u727.MgwDevOnlineNotify devOnline = 1008;
  if (_internal_has_devonline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1008, _Internal::devonline(this), target, stream);
  }

  // .u727.MgwDevOfflineNotify devOffline = 1009;
  if (_internal_has_devoffline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1009, _Internal::devoffline(this), target, stream);
  }

  // .u727.StreamStatusNotify streamStatus = 1010;
  if (_internal_has_streamstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1010, _Internal::streamstatus(this), target, stream);
  }

  // .u727.DevStartStreamNotify devStartStreamNotify = 1011;
  if (_internal_has_devstartstreamnotify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1011, _Internal::devstartstreamnotify(this), target, stream);
  }

  // .u727.DevStopStreamNotify devStopStreamNotify = 1012;
  if (_internal_has_devstopstreamnotify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1012, _Internal::devstopstreamnotify(this), target, stream);
  }

  // .u727.KeepAlive u727keepAlive = 1013;
  if (_internal_has_u727keepalive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1013, _Internal::u727keepalive(this), target, stream);
  }

  // .u727.QueryOnlineDevReq queryOnlineDevReq = 1014;
  if (_internal_has_queryonlinedevreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1014, _Internal::queryonlinedevreq(this), target, stream);
  }

  // .u727.QueryOnlineDevReply queryOnlineDevReply = 1015;
  if (_internal_has_queryonlinedevreply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1015, _Internal::queryonlinedevreply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.MgwMsg)
  return target;
}

size_t MgwMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.MgwMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Message_case()) {
    // .device.CommonRsp response = 20;
    case kResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.response_);
      break;
    }
    // .device.SessionReq sessionReq = 21;
    case kSessionReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.sessionreq_);
      break;
    }
    // .device.SessionRsp sessionRsp = 22;
    case kSessionRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.sessionrsp_);
      break;
    }
    // .device.StartOutputStream startOutput = 23;
    case kStartOutput: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.startoutput_);
      break;
    }
    // .device.StopOutputStream stopOutput = 24;
    case kStopOutput: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.stopoutput_);
      break;
    }
    // .device.OutputStreamStatus outputSta = 25;
    case kOutputSta: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.outputsta_);
      break;
    }
    // .device.StopPushingStream stopPushing = 26;
    case kStopPushing: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.stoppushing_);
      break;
    }
    // .device.SyncStatusReq syncReq = 27;
    case kSyncReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.syncreq_);
      break;
    }
    // .device.SyncStatusRsp syncRsp = 28;
    case kSyncRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.syncrsp_);
      break;
    }
    // .device.ServerSessionReq serSessionReq = 29;
    case kSerSessionReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.sersessionreq_);
      break;
    }
    // .device.ServerSessionRsp serSessionRsp = 30;
    case kSerSessionRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.sersessionrsp_);
      break;
    }
    // .device.QuerySource querySource = 31;
    case kQuerySource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.querysource_);
      break;
    }
    // .device.SetPullAttr setPullAttr = 32;
    case kSetPullAttr: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.setpullattr_);
      break;
    }
    // .device.PushStreamReq pushStreamReq = 33;
    case kPushStreamReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.pushstreamreq_);
      break;
    }
    // .device.ServerKeepAlive keepAlive = 34;
    case kKeepAlive: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.keepalive_);
      break;
    }
    // .u727.SetDevBlacklist setBlackList = 1000;
    case kSetBlackList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.setblacklist_);
      break;
    }
    // .u727.SetLocalSvcPortReq setSvcPortReq = 1001;
    case kSetSvcPortReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.setsvcportreq_);
      break;
    }
    // .u727.SetLocalSvcPortReply setSvcPortReply = 1002;
    case kSetSvcPortReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.setsvcportreply_);
      break;
    }
    // .u727.GetLocalSvcPortReq getSvcPortReq = 1003;
    case kGetSvcPortReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.getsvcportreq_);
      break;
    }
    // .u727.GetLocalSvcPortReply getSvcPortReply = 1004;
    case kGetSvcPortReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.getsvcportreply_);
      break;
    }
    // .u727.StartStreamReq startStreamReq = 1005;
    case kStartStreamReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.startstreamreq_);
      break;
    }
    // .u727.StartStreamReply startStreamReply = 1006;
    case kStartStreamReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.startstreamreply_);
      break;
    }
    // .u727.StopStreamReq stopStream = 1007;
    case kStopStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.stopstream_);
      break;
    }
    // .u727.MgwDevOnlineNotify devOnline = 1008;
    case kDevOnline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.devonline_);
      break;
    }
    // .u727.MgwDevOfflineNotify devOffline = 1009;
    case kDevOffline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.devoffline_);
      break;
    }
    // .u727.StreamStatusNotify streamStatus = 1010;
    case kStreamStatus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.streamstatus_);
      break;
    }
    // .u727.DevStartStreamNotify devStartStreamNotify = 1011;
    case kDevStartStreamNotify: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.devstartstreamnotify_);
      break;
    }
    // .u727.DevStopStreamNotify devStopStreamNotify = 1012;
    case kDevStopStreamNotify: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.devstopstreamnotify_);
      break;
    }
    // .u727.KeepAlive u727keepAlive = 1013;
    case kU727KeepAlive: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.u727keepalive_);
      break;
    }
    // .u727.QueryOnlineDevReq queryOnlineDevReq = 1014;
    case kQueryOnlineDevReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.queryonlinedevreq_);
      break;
    }
    // .u727.QueryOnlineDevReply queryOnlineDevReply = 1015;
    case kQueryOnlineDevReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.queryonlinedevreply_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MgwMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.MgwMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MgwMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MgwMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.MgwMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.MgwMsg)
    MergeFrom(*source);
  }
}

void MgwMsg::MergeFrom(const MgwMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.MgwMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Message_case()) {
    case kResponse: {
      _internal_mutable_response()->::device::CommonRsp::MergeFrom(from._internal_response());
      break;
    }
    case kSessionReq: {
      _internal_mutable_sessionreq()->::device::SessionReq::MergeFrom(from._internal_sessionreq());
      break;
    }
    case kSessionRsp: {
      _internal_mutable_sessionrsp()->::device::SessionRsp::MergeFrom(from._internal_sessionrsp());
      break;
    }
    case kStartOutput: {
      _internal_mutable_startoutput()->::device::StartOutputStream::MergeFrom(from._internal_startoutput());
      break;
    }
    case kStopOutput: {
      _internal_mutable_stopoutput()->::device::StopOutputStream::MergeFrom(from._internal_stopoutput());
      break;
    }
    case kOutputSta: {
      _internal_mutable_outputsta()->::device::OutputStreamStatus::MergeFrom(from._internal_outputsta());
      break;
    }
    case kStopPushing: {
      _internal_mutable_stoppushing()->::device::StopPushingStream::MergeFrom(from._internal_stoppushing());
      break;
    }
    case kSyncReq: {
      _internal_mutable_syncreq()->::device::SyncStatusReq::MergeFrom(from._internal_syncreq());
      break;
    }
    case kSyncRsp: {
      _internal_mutable_syncrsp()->::device::SyncStatusRsp::MergeFrom(from._internal_syncrsp());
      break;
    }
    case kSerSessionReq: {
      _internal_mutable_sersessionreq()->::device::ServerSessionReq::MergeFrom(from._internal_sersessionreq());
      break;
    }
    case kSerSessionRsp: {
      _internal_mutable_sersessionrsp()->::device::ServerSessionRsp::MergeFrom(from._internal_sersessionrsp());
      break;
    }
    case kQuerySource: {
      _internal_mutable_querysource()->::device::QuerySource::MergeFrom(from._internal_querysource());
      break;
    }
    case kSetPullAttr: {
      _internal_mutable_setpullattr()->::device::SetPullAttr::MergeFrom(from._internal_setpullattr());
      break;
    }
    case kPushStreamReq: {
      _internal_mutable_pushstreamreq()->::device::PushStreamReq::MergeFrom(from._internal_pushstreamreq());
      break;
    }
    case kKeepAlive: {
      _internal_mutable_keepalive()->::device::ServerKeepAlive::MergeFrom(from._internal_keepalive());
      break;
    }
    case kSetBlackList: {
      _internal_mutable_setblacklist()->::u727::SetDevBlacklist::MergeFrom(from._internal_setblacklist());
      break;
    }
    case kSetSvcPortReq: {
      _internal_mutable_setsvcportreq()->::u727::SetLocalSvcPortReq::MergeFrom(from._internal_setsvcportreq());
      break;
    }
    case kSetSvcPortReply: {
      _internal_mutable_setsvcportreply()->::u727::SetLocalSvcPortReply::MergeFrom(from._internal_setsvcportreply());
      break;
    }
    case kGetSvcPortReq: {
      _internal_mutable_getsvcportreq()->::u727::GetLocalSvcPortReq::MergeFrom(from._internal_getsvcportreq());
      break;
    }
    case kGetSvcPortReply: {
      _internal_mutable_getsvcportreply()->::u727::GetLocalSvcPortReply::MergeFrom(from._internal_getsvcportreply());
      break;
    }
    case kStartStreamReq: {
      _internal_mutable_startstreamreq()->::u727::StartStreamReq::MergeFrom(from._internal_startstreamreq());
      break;
    }
    case kStartStreamReply: {
      _internal_mutable_startstreamreply()->::u727::StartStreamReply::MergeFrom(from._internal_startstreamreply());
      break;
    }
    case kStopStream: {
      _internal_mutable_stopstream()->::u727::StopStreamReq::MergeFrom(from._internal_stopstream());
      break;
    }
    case kDevOnline: {
      _internal_mutable_devonline()->::u727::MgwDevOnlineNotify::MergeFrom(from._internal_devonline());
      break;
    }
    case kDevOffline: {
      _internal_mutable_devoffline()->::u727::MgwDevOfflineNotify::MergeFrom(from._internal_devoffline());
      break;
    }
    case kStreamStatus: {
      _internal_mutable_streamstatus()->::u727::StreamStatusNotify::MergeFrom(from._internal_streamstatus());
      break;
    }
    case kDevStartStreamNotify: {
      _internal_mutable_devstartstreamnotify()->::u727::DevStartStreamNotify::MergeFrom(from._internal_devstartstreamnotify());
      break;
    }
    case kDevStopStreamNotify: {
      _internal_mutable_devstopstreamnotify()->::u727::DevStopStreamNotify::MergeFrom(from._internal_devstopstreamnotify());
      break;
    }
    case kU727KeepAlive: {
      _internal_mutable_u727keepalive()->::u727::KeepAlive::MergeFrom(from._internal_u727keepalive());
      break;
    }
    case kQueryOnlineDevReq: {
      _internal_mutable_queryonlinedevreq()->::u727::QueryOnlineDevReq::MergeFrom(from._internal_queryonlinedevreq());
      break;
    }
    case kQueryOnlineDevReply: {
      _internal_mutable_queryonlinedevreply()->::u727::QueryOnlineDevReply::MergeFrom(from._internal_queryonlinedevreply());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void MgwMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.MgwMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MgwMsg::CopyFrom(const MgwMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.MgwMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgwMsg::IsInitialized() const {
  return true;
}

void MgwMsg::InternalSwap(MgwMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MgwMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mgw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mgw::MgwMsg* Arena::CreateMaybeMessage< ::mgw::MgwMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::MgwMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
