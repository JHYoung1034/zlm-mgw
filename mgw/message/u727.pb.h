// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: u727.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_u727_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_u727_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_u727_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_u727_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_u727_2eproto;
namespace u727 {
class DevStartStreamNotify;
class DevStartStreamNotifyDefaultTypeInternal;
extern DevStartStreamNotifyDefaultTypeInternal _DevStartStreamNotify_default_instance_;
class DevStopStreamNotify;
class DevStopStreamNotifyDefaultTypeInternal;
extern DevStopStreamNotifyDefaultTypeInternal _DevStopStreamNotify_default_instance_;
class GetLocalSvcPortReply;
class GetLocalSvcPortReplyDefaultTypeInternal;
extern GetLocalSvcPortReplyDefaultTypeInternal _GetLocalSvcPortReply_default_instance_;
class GetLocalSvcPortReq;
class GetLocalSvcPortReqDefaultTypeInternal;
extern GetLocalSvcPortReqDefaultTypeInternal _GetLocalSvcPortReq_default_instance_;
class KeepAlive;
class KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class MgwDevInfo;
class MgwDevInfoDefaultTypeInternal;
extern MgwDevInfoDefaultTypeInternal _MgwDevInfo_default_instance_;
class MgwDevOfflineNotify;
class MgwDevOfflineNotifyDefaultTypeInternal;
extern MgwDevOfflineNotifyDefaultTypeInternal _MgwDevOfflineNotify_default_instance_;
class MgwDevOnlineNotify;
class MgwDevOnlineNotifyDefaultTypeInternal;
extern MgwDevOnlineNotifyDefaultTypeInternal _MgwDevOnlineNotify_default_instance_;
class QueryOnlineDevReply;
class QueryOnlineDevReplyDefaultTypeInternal;
extern QueryOnlineDevReplyDefaultTypeInternal _QueryOnlineDevReply_default_instance_;
class QueryOnlineDevReq;
class QueryOnlineDevReqDefaultTypeInternal;
extern QueryOnlineDevReqDefaultTypeInternal _QueryOnlineDevReq_default_instance_;
class SetDevBlacklist;
class SetDevBlacklistDefaultTypeInternal;
extern SetDevBlacklistDefaultTypeInternal _SetDevBlacklist_default_instance_;
class SetLocalSvcPortReply;
class SetLocalSvcPortReplyDefaultTypeInternal;
extern SetLocalSvcPortReplyDefaultTypeInternal _SetLocalSvcPortReply_default_instance_;
class SetLocalSvcPortReq;
class SetLocalSvcPortReqDefaultTypeInternal;
extern SetLocalSvcPortReqDefaultTypeInternal _SetLocalSvcPortReq_default_instance_;
class StartStreamReply;
class StartStreamReplyDefaultTypeInternal;
extern StartStreamReplyDefaultTypeInternal _StartStreamReply_default_instance_;
class StartStreamReq;
class StartStreamReqDefaultTypeInternal;
extern StartStreamReqDefaultTypeInternal _StartStreamReq_default_instance_;
class StopStreamReq;
class StopStreamReqDefaultTypeInternal;
extern StopStreamReqDefaultTypeInternal _StopStreamReq_default_instance_;
class StreamStatusNotify;
class StreamStatusNotifyDefaultTypeInternal;
extern StreamStatusNotifyDefaultTypeInternal _StreamStatusNotify_default_instance_;
}  // namespace u727
PROTOBUF_NAMESPACE_OPEN
template<> ::u727::DevStartStreamNotify* Arena::CreateMaybeMessage<::u727::DevStartStreamNotify>(Arena*);
template<> ::u727::DevStopStreamNotify* Arena::CreateMaybeMessage<::u727::DevStopStreamNotify>(Arena*);
template<> ::u727::GetLocalSvcPortReply* Arena::CreateMaybeMessage<::u727::GetLocalSvcPortReply>(Arena*);
template<> ::u727::GetLocalSvcPortReq* Arena::CreateMaybeMessage<::u727::GetLocalSvcPortReq>(Arena*);
template<> ::u727::KeepAlive* Arena::CreateMaybeMessage<::u727::KeepAlive>(Arena*);
template<> ::u727::MgwDevInfo* Arena::CreateMaybeMessage<::u727::MgwDevInfo>(Arena*);
template<> ::u727::MgwDevOfflineNotify* Arena::CreateMaybeMessage<::u727::MgwDevOfflineNotify>(Arena*);
template<> ::u727::MgwDevOnlineNotify* Arena::CreateMaybeMessage<::u727::MgwDevOnlineNotify>(Arena*);
template<> ::u727::QueryOnlineDevReply* Arena::CreateMaybeMessage<::u727::QueryOnlineDevReply>(Arena*);
template<> ::u727::QueryOnlineDevReq* Arena::CreateMaybeMessage<::u727::QueryOnlineDevReq>(Arena*);
template<> ::u727::SetDevBlacklist* Arena::CreateMaybeMessage<::u727::SetDevBlacklist>(Arena*);
template<> ::u727::SetLocalSvcPortReply* Arena::CreateMaybeMessage<::u727::SetLocalSvcPortReply>(Arena*);
template<> ::u727::SetLocalSvcPortReq* Arena::CreateMaybeMessage<::u727::SetLocalSvcPortReq>(Arena*);
template<> ::u727::StartStreamReply* Arena::CreateMaybeMessage<::u727::StartStreamReply>(Arena*);
template<> ::u727::StartStreamReq* Arena::CreateMaybeMessage<::u727::StartStreamReq>(Arena*);
template<> ::u727::StopStreamReq* Arena::CreateMaybeMessage<::u727::StopStreamReq>(Arena*);
template<> ::u727::StreamStatusNotify* Arena::CreateMaybeMessage<::u727::StreamStatusNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace u727 {

// ===================================================================

class MgwDevInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.MgwDevInfo) */ {
 public:
  inline MgwDevInfo() : MgwDevInfo(nullptr) {}
  virtual ~MgwDevInfo();

  MgwDevInfo(const MgwDevInfo& from);
  MgwDevInfo(MgwDevInfo&& from) noexcept
    : MgwDevInfo() {
    *this = ::std::move(from);
  }

  inline MgwDevInfo& operator=(const MgwDevInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MgwDevInfo& operator=(MgwDevInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MgwDevInfo& default_instance();

  static inline const MgwDevInfo* internal_default_instance() {
    return reinterpret_cast<const MgwDevInfo*>(
               &_MgwDevInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MgwDevInfo& a, MgwDevInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MgwDevInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MgwDevInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MgwDevInfo* New() const final {
    return CreateMaybeMessage<MgwDevInfo>(nullptr);
  }

  MgwDevInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MgwDevInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MgwDevInfo& from);
  void MergeFrom(const MgwDevInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MgwDevInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.MgwDevInfo";
  }
  protected:
  explicit MgwDevInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevSnFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVersionFieldNumber = 3,
    kVendorFieldNumber = 4,
  };
  // string dev_sn = 1;
  void clear_dev_sn();
  const std::string& dev_sn() const;
  void set_dev_sn(const std::string& value);
  void set_dev_sn(std::string&& value);
  void set_dev_sn(const char* value);
  void set_dev_sn(const char* value, size_t size);
  std::string* mutable_dev_sn();
  std::string* release_dev_sn();
  void set_allocated_dev_sn(std::string* dev_sn);
  private:
  const std::string& _internal_dev_sn() const;
  void _internal_set_dev_sn(const std::string& value);
  std::string* _internal_mutable_dev_sn();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string vendor = 4;
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // @@protoc_insertion_point(class_scope:u727.MgwDevInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class SetDevBlacklist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.SetDevBlacklist) */ {
 public:
  inline SetDevBlacklist() : SetDevBlacklist(nullptr) {}
  virtual ~SetDevBlacklist();

  SetDevBlacklist(const SetDevBlacklist& from);
  SetDevBlacklist(SetDevBlacklist&& from) noexcept
    : SetDevBlacklist() {
    *this = ::std::move(from);
  }

  inline SetDevBlacklist& operator=(const SetDevBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDevBlacklist& operator=(SetDevBlacklist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDevBlacklist& default_instance();

  static inline const SetDevBlacklist* internal_default_instance() {
    return reinterpret_cast<const SetDevBlacklist*>(
               &_SetDevBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetDevBlacklist& a, SetDevBlacklist& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDevBlacklist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDevBlacklist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDevBlacklist* New() const final {
    return CreateMaybeMessage<SetDevBlacklist>(nullptr);
  }

  SetDevBlacklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDevBlacklist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDevBlacklist& from);
  void MergeFrom(const SetDevBlacklist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDevBlacklist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.SetDevBlacklist";
  }
  protected:
  explicit SetDevBlacklist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevSnListFieldNumber = 1,
  };
  // repeated string dev_sn_list = 1;
  int dev_sn_list_size() const;
  private:
  int _internal_dev_sn_list_size() const;
  public:
  void clear_dev_sn_list();
  const std::string& dev_sn_list(int index) const;
  std::string* mutable_dev_sn_list(int index);
  void set_dev_sn_list(int index, const std::string& value);
  void set_dev_sn_list(int index, std::string&& value);
  void set_dev_sn_list(int index, const char* value);
  void set_dev_sn_list(int index, const char* value, size_t size);
  std::string* add_dev_sn_list();
  void add_dev_sn_list(const std::string& value);
  void add_dev_sn_list(std::string&& value);
  void add_dev_sn_list(const char* value);
  void add_dev_sn_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dev_sn_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dev_sn_list();
  private:
  const std::string& _internal_dev_sn_list(int index) const;
  std::string* _internal_add_dev_sn_list();
  public:

  // @@protoc_insertion_point(class_scope:u727.SetDevBlacklist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dev_sn_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class StartStreamReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.StartStreamReq) */ {
 public:
  inline StartStreamReq() : StartStreamReq(nullptr) {}
  virtual ~StartStreamReq();

  StartStreamReq(const StartStreamReq& from);
  StartStreamReq(StartStreamReq&& from) noexcept
    : StartStreamReq() {
    *this = ::std::move(from);
  }

  inline StartStreamReq& operator=(const StartStreamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartStreamReq& operator=(StartStreamReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartStreamReq& default_instance();

  enum SrcCase {
    kSrcSock = 11,
    kSrcDevSn = 12,
    kSrcPullAddr = 13,
    kSrcPushAddr = 14,
    kSrcFilePath = 15,
    SRC_NOT_SET = 0,
  };

  enum DestCase {
    kDestSock = 21,
    kDestPushAddr = 23,
    kDestPullAddr = 24,
    kDestFilePath = 25,
    DEST_NOT_SET = 0,
  };

  static inline const StartStreamReq* internal_default_instance() {
    return reinterpret_cast<const StartStreamReq*>(
               &_StartStreamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartStreamReq& a, StartStreamReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StartStreamReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartStreamReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartStreamReq* New() const final {
    return CreateMaybeMessage<StartStreamReq>(nullptr);
  }

  StartStreamReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartStreamReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartStreamReq& from);
  void MergeFrom(const StartStreamReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartStreamReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.StartStreamReq";
  }
  protected:
  explicit StartStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kDelayMsFieldNumber = 31,
    kSrcSockFieldNumber = 11,
    kSrcDevSnFieldNumber = 12,
    kSrcPullAddrFieldNumber = 13,
    kSrcPushAddrFieldNumber = 14,
    kSrcFilePathFieldNumber = 15,
    kDestSockFieldNumber = 21,
    kDestPushAddrFieldNumber = 23,
    kDestPullAddrFieldNumber = 24,
    kDestFilePathFieldNumber = 25,
  };
  // string stream_id = 1;
  void clear_stream_id();
  const std::string& stream_id() const;
  void set_stream_id(const std::string& value);
  void set_stream_id(std::string&& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  std::string* mutable_stream_id();
  std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // uint32 delay_ms = 31;
  void clear_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_ms() const;
  void set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay_ms() const;
  void _internal_set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // string src_sock = 11;
  private:
  bool _internal_has_src_sock() const;
  public:
  void clear_src_sock();
  const std::string& src_sock() const;
  void set_src_sock(const std::string& value);
  void set_src_sock(std::string&& value);
  void set_src_sock(const char* value);
  void set_src_sock(const char* value, size_t size);
  std::string* mutable_src_sock();
  std::string* release_src_sock();
  void set_allocated_src_sock(std::string* src_sock);
  private:
  const std::string& _internal_src_sock() const;
  void _internal_set_src_sock(const std::string& value);
  std::string* _internal_mutable_src_sock();
  public:

  // string src_dev_sn = 12;
  private:
  bool _internal_has_src_dev_sn() const;
  public:
  void clear_src_dev_sn();
  const std::string& src_dev_sn() const;
  void set_src_dev_sn(const std::string& value);
  void set_src_dev_sn(std::string&& value);
  void set_src_dev_sn(const char* value);
  void set_src_dev_sn(const char* value, size_t size);
  std::string* mutable_src_dev_sn();
  std::string* release_src_dev_sn();
  void set_allocated_src_dev_sn(std::string* src_dev_sn);
  private:
  const std::string& _internal_src_dev_sn() const;
  void _internal_set_src_dev_sn(const std::string& value);
  std::string* _internal_mutable_src_dev_sn();
  public:

  // .common.StreamAddress src_pull_addr = 13;
  bool has_src_pull_addr() const;
  private:
  bool _internal_has_src_pull_addr() const;
  public:
  void clear_src_pull_addr();
  const ::common::StreamAddress& src_pull_addr() const;
  ::common::StreamAddress* release_src_pull_addr();
  ::common::StreamAddress* mutable_src_pull_addr();
  void set_allocated_src_pull_addr(::common::StreamAddress* src_pull_addr);
  private:
  const ::common::StreamAddress& _internal_src_pull_addr() const;
  ::common::StreamAddress* _internal_mutable_src_pull_addr();
  public:
  void unsafe_arena_set_allocated_src_pull_addr(
      ::common::StreamAddress* src_pull_addr);
  ::common::StreamAddress* unsafe_arena_release_src_pull_addr();

  // .common.StreamAddress src_push_addr = 14;
  bool has_src_push_addr() const;
  private:
  bool _internal_has_src_push_addr() const;
  public:
  void clear_src_push_addr();
  const ::common::StreamAddress& src_push_addr() const;
  ::common::StreamAddress* release_src_push_addr();
  ::common::StreamAddress* mutable_src_push_addr();
  void set_allocated_src_push_addr(::common::StreamAddress* src_push_addr);
  private:
  const ::common::StreamAddress& _internal_src_push_addr() const;
  ::common::StreamAddress* _internal_mutable_src_push_addr();
  public:
  void unsafe_arena_set_allocated_src_push_addr(
      ::common::StreamAddress* src_push_addr);
  ::common::StreamAddress* unsafe_arena_release_src_push_addr();

  // string src_file_path = 15;
  private:
  bool _internal_has_src_file_path() const;
  public:
  void clear_src_file_path();
  const std::string& src_file_path() const;
  void set_src_file_path(const std::string& value);
  void set_src_file_path(std::string&& value);
  void set_src_file_path(const char* value);
  void set_src_file_path(const char* value, size_t size);
  std::string* mutable_src_file_path();
  std::string* release_src_file_path();
  void set_allocated_src_file_path(std::string* src_file_path);
  private:
  const std::string& _internal_src_file_path() const;
  void _internal_set_src_file_path(const std::string& value);
  std::string* _internal_mutable_src_file_path();
  public:

  // string dest_sock = 21;
  private:
  bool _internal_has_dest_sock() const;
  public:
  void clear_dest_sock();
  const std::string& dest_sock() const;
  void set_dest_sock(const std::string& value);
  void set_dest_sock(std::string&& value);
  void set_dest_sock(const char* value);
  void set_dest_sock(const char* value, size_t size);
  std::string* mutable_dest_sock();
  std::string* release_dest_sock();
  void set_allocated_dest_sock(std::string* dest_sock);
  private:
  const std::string& _internal_dest_sock() const;
  void _internal_set_dest_sock(const std::string& value);
  std::string* _internal_mutable_dest_sock();
  public:

  // .common.StreamAddress dest_push_addr = 23;
  bool has_dest_push_addr() const;
  private:
  bool _internal_has_dest_push_addr() const;
  public:
  void clear_dest_push_addr();
  const ::common::StreamAddress& dest_push_addr() const;
  ::common::StreamAddress* release_dest_push_addr();
  ::common::StreamAddress* mutable_dest_push_addr();
  void set_allocated_dest_push_addr(::common::StreamAddress* dest_push_addr);
  private:
  const ::common::StreamAddress& _internal_dest_push_addr() const;
  ::common::StreamAddress* _internal_mutable_dest_push_addr();
  public:
  void unsafe_arena_set_allocated_dest_push_addr(
      ::common::StreamAddress* dest_push_addr);
  ::common::StreamAddress* unsafe_arena_release_dest_push_addr();

  // .common.StreamAddress dest_pull_addr = 24;
  bool has_dest_pull_addr() const;
  private:
  bool _internal_has_dest_pull_addr() const;
  public:
  void clear_dest_pull_addr();
  const ::common::StreamAddress& dest_pull_addr() const;
  ::common::StreamAddress* release_dest_pull_addr();
  ::common::StreamAddress* mutable_dest_pull_addr();
  void set_allocated_dest_pull_addr(::common::StreamAddress* dest_pull_addr);
  private:
  const ::common::StreamAddress& _internal_dest_pull_addr() const;
  ::common::StreamAddress* _internal_mutable_dest_pull_addr();
  public:
  void unsafe_arena_set_allocated_dest_pull_addr(
      ::common::StreamAddress* dest_pull_addr);
  ::common::StreamAddress* unsafe_arena_release_dest_pull_addr();

  // string dest_file_path = 25;
  private:
  bool _internal_has_dest_file_path() const;
  public:
  void clear_dest_file_path();
  const std::string& dest_file_path() const;
  void set_dest_file_path(const std::string& value);
  void set_dest_file_path(std::string&& value);
  void set_dest_file_path(const char* value);
  void set_dest_file_path(const char* value, size_t size);
  std::string* mutable_dest_file_path();
  std::string* release_dest_file_path();
  void set_allocated_dest_file_path(std::string* dest_file_path);
  private:
  const std::string& _internal_dest_file_path() const;
  void _internal_set_dest_file_path(const std::string& value);
  std::string* _internal_mutable_dest_file_path();
  public:

  void clear_src();
  SrcCase src_case() const;
  void clear_dest();
  DestCase dest_case() const;
  // @@protoc_insertion_point(class_scope:u727.StartStreamReq)
 private:
  class _Internal;
  void set_has_src_sock();
  void set_has_src_dev_sn();
  void set_has_src_pull_addr();
  void set_has_src_push_addr();
  void set_has_src_file_path();
  void set_has_dest_sock();
  void set_has_dest_push_addr();
  void set_has_dest_pull_addr();
  void set_has_dest_file_path();

  inline bool has_src() const;
  inline void clear_has_src();

  inline bool has_dest() const;
  inline void clear_has_dest();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_ms_;
  union SrcUnion {
    SrcUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_sock_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_dev_sn_;
    ::common::StreamAddress* src_pull_addr_;
    ::common::StreamAddress* src_push_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_file_path_;
  } src_;
  union DestUnion {
    DestUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_sock_;
    ::common::StreamAddress* dest_push_addr_;
    ::common::StreamAddress* dest_pull_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_file_path_;
  } dest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class StartStreamReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.StartStreamReply) */ {
 public:
  inline StartStreamReply() : StartStreamReply(nullptr) {}
  virtual ~StartStreamReply();

  StartStreamReply(const StartStreamReply& from);
  StartStreamReply(StartStreamReply&& from) noexcept
    : StartStreamReply() {
    *this = ::std::move(from);
  }

  inline StartStreamReply& operator=(const StartStreamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartStreamReply& operator=(StartStreamReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartStreamReply& default_instance();

  static inline const StartStreamReply* internal_default_instance() {
    return reinterpret_cast<const StartStreamReply*>(
               &_StartStreamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartStreamReply& a, StartStreamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StartStreamReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartStreamReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartStreamReply* New() const final {
    return CreateMaybeMessage<StartStreamReply>(nullptr);
  }

  StartStreamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartStreamReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartStreamReply& from);
  void MergeFrom(const StartStreamReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartStreamReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.StartStreamReply";
  }
  protected:
  explicit StartStreamReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kDescripFieldNumber = 3,
    kResultFieldNumber = 2,
  };
  // string stream_id = 1;
  void clear_stream_id();
  const std::string& stream_id() const;
  void set_stream_id(const std::string& value);
  void set_stream_id(std::string&& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  std::string* mutable_stream_id();
  std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // string descrip = 3;
  void clear_descrip();
  const std::string& descrip() const;
  void set_descrip(const std::string& value);
  void set_descrip(std::string&& value);
  void set_descrip(const char* value);
  void set_descrip(const char* value, size_t size);
  std::string* mutable_descrip();
  std::string* release_descrip();
  void set_allocated_descrip(std::string* descrip);
  private:
  const std::string& _internal_descrip() const;
  void _internal_set_descrip(const std::string& value);
  std::string* _internal_mutable_descrip();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.StartStreamReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descrip_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class StopStreamReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.StopStreamReq) */ {
 public:
  inline StopStreamReq() : StopStreamReq(nullptr) {}
  virtual ~StopStreamReq();

  StopStreamReq(const StopStreamReq& from);
  StopStreamReq(StopStreamReq&& from) noexcept
    : StopStreamReq() {
    *this = ::std::move(from);
  }

  inline StopStreamReq& operator=(const StopStreamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopStreamReq& operator=(StopStreamReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopStreamReq& default_instance();

  static inline const StopStreamReq* internal_default_instance() {
    return reinterpret_cast<const StopStreamReq*>(
               &_StopStreamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopStreamReq& a, StopStreamReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StopStreamReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopStreamReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopStreamReq* New() const final {
    return CreateMaybeMessage<StopStreamReq>(nullptr);
  }

  StopStreamReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopStreamReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopStreamReq& from);
  void MergeFrom(const StopStreamReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopStreamReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.StopStreamReq";
  }
  protected:
  explicit StopStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
  };
  // string stream_id = 1;
  void clear_stream_id();
  const std::string& stream_id() const;
  void set_stream_id(const std::string& value);
  void set_stream_id(std::string&& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  std::string* mutable_stream_id();
  std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // @@protoc_insertion_point(class_scope:u727.StopStreamReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class MgwDevOnlineNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.MgwDevOnlineNotify) */ {
 public:
  inline MgwDevOnlineNotify() : MgwDevOnlineNotify(nullptr) {}
  virtual ~MgwDevOnlineNotify();

  MgwDevOnlineNotify(const MgwDevOnlineNotify& from);
  MgwDevOnlineNotify(MgwDevOnlineNotify&& from) noexcept
    : MgwDevOnlineNotify() {
    *this = ::std::move(from);
  }

  inline MgwDevOnlineNotify& operator=(const MgwDevOnlineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline MgwDevOnlineNotify& operator=(MgwDevOnlineNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MgwDevOnlineNotify& default_instance();

  static inline const MgwDevOnlineNotify* internal_default_instance() {
    return reinterpret_cast<const MgwDevOnlineNotify*>(
               &_MgwDevOnlineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MgwDevOnlineNotify& a, MgwDevOnlineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(MgwDevOnlineNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MgwDevOnlineNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MgwDevOnlineNotify* New() const final {
    return CreateMaybeMessage<MgwDevOnlineNotify>(nullptr);
  }

  MgwDevOnlineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MgwDevOnlineNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MgwDevOnlineNotify& from);
  void MergeFrom(const MgwDevOnlineNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MgwDevOnlineNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.MgwDevOnlineNotify";
  }
  protected:
  explicit MgwDevOnlineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 20,
  };
  // .u727.MgwDevInfo device = 20;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::u727::MgwDevInfo& device() const;
  ::u727::MgwDevInfo* release_device();
  ::u727::MgwDevInfo* mutable_device();
  void set_allocated_device(::u727::MgwDevInfo* device);
  private:
  const ::u727::MgwDevInfo& _internal_device() const;
  ::u727::MgwDevInfo* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::u727::MgwDevInfo* device);
  ::u727::MgwDevInfo* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:u727.MgwDevOnlineNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::u727::MgwDevInfo* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class MgwDevOfflineNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.MgwDevOfflineNotify) */ {
 public:
  inline MgwDevOfflineNotify() : MgwDevOfflineNotify(nullptr) {}
  virtual ~MgwDevOfflineNotify();

  MgwDevOfflineNotify(const MgwDevOfflineNotify& from);
  MgwDevOfflineNotify(MgwDevOfflineNotify&& from) noexcept
    : MgwDevOfflineNotify() {
    *this = ::std::move(from);
  }

  inline MgwDevOfflineNotify& operator=(const MgwDevOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline MgwDevOfflineNotify& operator=(MgwDevOfflineNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MgwDevOfflineNotify& default_instance();

  static inline const MgwDevOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const MgwDevOfflineNotify*>(
               &_MgwDevOfflineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MgwDevOfflineNotify& a, MgwDevOfflineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(MgwDevOfflineNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MgwDevOfflineNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MgwDevOfflineNotify* New() const final {
    return CreateMaybeMessage<MgwDevOfflineNotify>(nullptr);
  }

  MgwDevOfflineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MgwDevOfflineNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MgwDevOfflineNotify& from);
  void MergeFrom(const MgwDevOfflineNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MgwDevOfflineNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.MgwDevOfflineNotify";
  }
  protected:
  explicit MgwDevOfflineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevSnFieldNumber = 1,
  };
  // string dev_sn = 1;
  void clear_dev_sn();
  const std::string& dev_sn() const;
  void set_dev_sn(const std::string& value);
  void set_dev_sn(std::string&& value);
  void set_dev_sn(const char* value);
  void set_dev_sn(const char* value, size_t size);
  std::string* mutable_dev_sn();
  std::string* release_dev_sn();
  void set_allocated_dev_sn(std::string* dev_sn);
  private:
  const std::string& _internal_dev_sn() const;
  void _internal_set_dev_sn(const std::string& value);
  std::string* _internal_mutable_dev_sn();
  public:

  // @@protoc_insertion_point(class_scope:u727.MgwDevOfflineNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class SetLocalSvcPortReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.SetLocalSvcPortReq) */ {
 public:
  inline SetLocalSvcPortReq() : SetLocalSvcPortReq(nullptr) {}
  virtual ~SetLocalSvcPortReq();

  SetLocalSvcPortReq(const SetLocalSvcPortReq& from);
  SetLocalSvcPortReq(SetLocalSvcPortReq&& from) noexcept
    : SetLocalSvcPortReq() {
    *this = ::std::move(from);
  }

  inline SetLocalSvcPortReq& operator=(const SetLocalSvcPortReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocalSvcPortReq& operator=(SetLocalSvcPortReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLocalSvcPortReq& default_instance();

  static inline const SetLocalSvcPortReq* internal_default_instance() {
    return reinterpret_cast<const SetLocalSvcPortReq*>(
               &_SetLocalSvcPortReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetLocalSvcPortReq& a, SetLocalSvcPortReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocalSvcPortReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocalSvcPortReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLocalSvcPortReq* New() const final {
    return CreateMaybeMessage<SetLocalSvcPortReq>(nullptr);
  }

  SetLocalSvcPortReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLocalSvcPortReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLocalSvcPortReq& from);
  void MergeFrom(const SetLocalSvcPortReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocalSvcPortReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.SetLocalSvcPortReq";
  }
  protected:
  explicit SetLocalSvcPortReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtmpPortFieldNumber = 1,
    kSrtPortFieldNumber = 2,
    kHttpPortFieldNumber = 3,
  };
  // uint32 rtmp_port = 1;
  void clear_rtmp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtmp_port() const;
  void set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtmp_port() const;
  void _internal_set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 srt_port = 2;
  void clear_srt_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 srt_port() const;
  void set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srt_port() const;
  void _internal_set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 http_port = 3;
  void clear_http_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 http_port() const;
  void set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_http_port() const;
  void _internal_set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.SetLocalSvcPortReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtmp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srt_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 http_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class SetLocalSvcPortReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.SetLocalSvcPortReply) */ {
 public:
  inline SetLocalSvcPortReply() : SetLocalSvcPortReply(nullptr) {}
  virtual ~SetLocalSvcPortReply();

  SetLocalSvcPortReply(const SetLocalSvcPortReply& from);
  SetLocalSvcPortReply(SetLocalSvcPortReply&& from) noexcept
    : SetLocalSvcPortReply() {
    *this = ::std::move(from);
  }

  inline SetLocalSvcPortReply& operator=(const SetLocalSvcPortReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocalSvcPortReply& operator=(SetLocalSvcPortReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLocalSvcPortReply& default_instance();

  static inline const SetLocalSvcPortReply* internal_default_instance() {
    return reinterpret_cast<const SetLocalSvcPortReply*>(
               &_SetLocalSvcPortReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetLocalSvcPortReply& a, SetLocalSvcPortReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocalSvcPortReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocalSvcPortReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLocalSvcPortReply* New() const final {
    return CreateMaybeMessage<SetLocalSvcPortReply>(nullptr);
  }

  SetLocalSvcPortReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLocalSvcPortReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLocalSvcPortReply& from);
  void MergeFrom(const SetLocalSvcPortReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocalSvcPortReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.SetLocalSvcPortReply";
  }
  protected:
  explicit SetLocalSvcPortReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescripFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string descrip = 2;
  void clear_descrip();
  const std::string& descrip() const;
  void set_descrip(const std::string& value);
  void set_descrip(std::string&& value);
  void set_descrip(const char* value);
  void set_descrip(const char* value, size_t size);
  std::string* mutable_descrip();
  std::string* release_descrip();
  void set_allocated_descrip(std::string* descrip);
  private:
  const std::string& _internal_descrip() const;
  void _internal_set_descrip(const std::string& value);
  std::string* _internal_mutable_descrip();
  public:

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.SetLocalSvcPortReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descrip_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class GetLocalSvcPortReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.GetLocalSvcPortReq) */ {
 public:
  inline GetLocalSvcPortReq() : GetLocalSvcPortReq(nullptr) {}
  virtual ~GetLocalSvcPortReq();

  GetLocalSvcPortReq(const GetLocalSvcPortReq& from);
  GetLocalSvcPortReq(GetLocalSvcPortReq&& from) noexcept
    : GetLocalSvcPortReq() {
    *this = ::std::move(from);
  }

  inline GetLocalSvcPortReq& operator=(const GetLocalSvcPortReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalSvcPortReq& operator=(GetLocalSvcPortReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocalSvcPortReq& default_instance();

  static inline const GetLocalSvcPortReq* internal_default_instance() {
    return reinterpret_cast<const GetLocalSvcPortReq*>(
               &_GetLocalSvcPortReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetLocalSvcPortReq& a, GetLocalSvcPortReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalSvcPortReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalSvcPortReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocalSvcPortReq* New() const final {
    return CreateMaybeMessage<GetLocalSvcPortReq>(nullptr);
  }

  GetLocalSvcPortReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocalSvcPortReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocalSvcPortReq& from);
  void MergeFrom(const GetLocalSvcPortReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalSvcPortReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.GetLocalSvcPortReq";
  }
  protected:
  explicit GetLocalSvcPortReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:u727.GetLocalSvcPortReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class GetLocalSvcPortReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.GetLocalSvcPortReply) */ {
 public:
  inline GetLocalSvcPortReply() : GetLocalSvcPortReply(nullptr) {}
  virtual ~GetLocalSvcPortReply();

  GetLocalSvcPortReply(const GetLocalSvcPortReply& from);
  GetLocalSvcPortReply(GetLocalSvcPortReply&& from) noexcept
    : GetLocalSvcPortReply() {
    *this = ::std::move(from);
  }

  inline GetLocalSvcPortReply& operator=(const GetLocalSvcPortReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalSvcPortReply& operator=(GetLocalSvcPortReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocalSvcPortReply& default_instance();

  static inline const GetLocalSvcPortReply* internal_default_instance() {
    return reinterpret_cast<const GetLocalSvcPortReply*>(
               &_GetLocalSvcPortReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetLocalSvcPortReply& a, GetLocalSvcPortReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalSvcPortReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalSvcPortReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocalSvcPortReply* New() const final {
    return CreateMaybeMessage<GetLocalSvcPortReply>(nullptr);
  }

  GetLocalSvcPortReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocalSvcPortReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocalSvcPortReply& from);
  void MergeFrom(const GetLocalSvcPortReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalSvcPortReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.GetLocalSvcPortReply";
  }
  protected:
  explicit GetLocalSvcPortReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtmpPortFieldNumber = 1,
    kSrtPortFieldNumber = 2,
    kHttpPortFieldNumber = 3,
  };
  // uint32 rtmp_port = 1;
  void clear_rtmp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtmp_port() const;
  void set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtmp_port() const;
  void _internal_set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 srt_port = 2;
  void clear_srt_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 srt_port() const;
  void set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srt_port() const;
  void _internal_set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 http_port = 3;
  void clear_http_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 http_port() const;
  void set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_http_port() const;
  void _internal_set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.GetLocalSvcPortReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtmp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srt_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 http_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class StreamStatusNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.StreamStatusNotify) */ {
 public:
  inline StreamStatusNotify() : StreamStatusNotify(nullptr) {}
  virtual ~StreamStatusNotify();

  StreamStatusNotify(const StreamStatusNotify& from);
  StreamStatusNotify(StreamStatusNotify&& from) noexcept
    : StreamStatusNotify() {
    *this = ::std::move(from);
  }

  inline StreamStatusNotify& operator=(const StreamStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatusNotify& operator=(StreamStatusNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStatusNotify& default_instance();

  static inline const StreamStatusNotify* internal_default_instance() {
    return reinterpret_cast<const StreamStatusNotify*>(
               &_StreamStatusNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamStatusNotify& a, StreamStatusNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatusNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatusNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStatusNotify* New() const final {
    return CreateMaybeMessage<StreamStatusNotify>(nullptr);
  }

  StreamStatusNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStatusNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStatusNotify& from);
  void MergeFrom(const StreamStatusNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatusNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.StreamStatusNotify";
  }
  protected:
  explicit StreamStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kStatusFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kLastErrCodeFieldNumber = 5,
  };
  // string stream_id = 1;
  void clear_stream_id();
  const std::string& stream_id() const;
  void set_stream_id(const std::string& value);
  void set_stream_id(std::string&& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  std::string* mutable_stream_id();
  std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 startTime = 4;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastErrCode = 5;
  void clear_lasterrcode();
  ::PROTOBUF_NAMESPACE_ID::int32 lasterrcode() const;
  void set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lasterrcode() const;
  void _internal_set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.StreamStatusNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 lasterrcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class DevStartStreamNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.DevStartStreamNotify) */ {
 public:
  inline DevStartStreamNotify() : DevStartStreamNotify(nullptr) {}
  virtual ~DevStartStreamNotify();

  DevStartStreamNotify(const DevStartStreamNotify& from);
  DevStartStreamNotify(DevStartStreamNotify&& from) noexcept
    : DevStartStreamNotify() {
    *this = ::std::move(from);
  }

  inline DevStartStreamNotify& operator=(const DevStartStreamNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevStartStreamNotify& operator=(DevStartStreamNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevStartStreamNotify& default_instance();

  static inline const DevStartStreamNotify* internal_default_instance() {
    return reinterpret_cast<const DevStartStreamNotify*>(
               &_DevStartStreamNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DevStartStreamNotify& a, DevStartStreamNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(DevStartStreamNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevStartStreamNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevStartStreamNotify* New() const final {
    return CreateMaybeMessage<DevStartStreamNotify>(nullptr);
  }

  DevStartStreamNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevStartStreamNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevStartStreamNotify& from);
  void MergeFrom(const DevStartStreamNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevStartStreamNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.DevStartStreamNotify";
  }
  protected:
  explicit DevStartStreamNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevSnFieldNumber = 1,
    kDestAddrFieldNumber = 3,
    kChannelFieldNumber = 2,
  };
  // string dev_sn = 1;
  void clear_dev_sn();
  const std::string& dev_sn() const;
  void set_dev_sn(const std::string& value);
  void set_dev_sn(std::string&& value);
  void set_dev_sn(const char* value);
  void set_dev_sn(const char* value, size_t size);
  std::string* mutable_dev_sn();
  std::string* release_dev_sn();
  void set_allocated_dev_sn(std::string* dev_sn);
  private:
  const std::string& _internal_dev_sn() const;
  void _internal_set_dev_sn(const std::string& value);
  std::string* _internal_mutable_dev_sn();
  public:

  // .common.StreamAddress dest_addr = 3;
  bool has_dest_addr() const;
  private:
  bool _internal_has_dest_addr() const;
  public:
  void clear_dest_addr();
  const ::common::StreamAddress& dest_addr() const;
  ::common::StreamAddress* release_dest_addr();
  ::common::StreamAddress* mutable_dest_addr();
  void set_allocated_dest_addr(::common::StreamAddress* dest_addr);
  private:
  const ::common::StreamAddress& _internal_dest_addr() const;
  ::common::StreamAddress* _internal_mutable_dest_addr();
  public:
  void unsafe_arena_set_allocated_dest_addr(
      ::common::StreamAddress* dest_addr);
  ::common::StreamAddress* unsafe_arena_release_dest_addr();

  // uint32 channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.DevStartStreamNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_sn_;
  ::common::StreamAddress* dest_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class DevStopStreamNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.DevStopStreamNotify) */ {
 public:
  inline DevStopStreamNotify() : DevStopStreamNotify(nullptr) {}
  virtual ~DevStopStreamNotify();

  DevStopStreamNotify(const DevStopStreamNotify& from);
  DevStopStreamNotify(DevStopStreamNotify&& from) noexcept
    : DevStopStreamNotify() {
    *this = ::std::move(from);
  }

  inline DevStopStreamNotify& operator=(const DevStopStreamNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevStopStreamNotify& operator=(DevStopStreamNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevStopStreamNotify& default_instance();

  static inline const DevStopStreamNotify* internal_default_instance() {
    return reinterpret_cast<const DevStopStreamNotify*>(
               &_DevStopStreamNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DevStopStreamNotify& a, DevStopStreamNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(DevStopStreamNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevStopStreamNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevStopStreamNotify* New() const final {
    return CreateMaybeMessage<DevStopStreamNotify>(nullptr);
  }

  DevStopStreamNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevStopStreamNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevStopStreamNotify& from);
  void MergeFrom(const DevStopStreamNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevStopStreamNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.DevStopStreamNotify";
  }
  protected:
  explicit DevStopStreamNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevSnFieldNumber = 1,
    kDestAddrFieldNumber = 3,
    kChannelFieldNumber = 2,
  };
  // string dev_sn = 1;
  void clear_dev_sn();
  const std::string& dev_sn() const;
  void set_dev_sn(const std::string& value);
  void set_dev_sn(std::string&& value);
  void set_dev_sn(const char* value);
  void set_dev_sn(const char* value, size_t size);
  std::string* mutable_dev_sn();
  std::string* release_dev_sn();
  void set_allocated_dev_sn(std::string* dev_sn);
  private:
  const std::string& _internal_dev_sn() const;
  void _internal_set_dev_sn(const std::string& value);
  std::string* _internal_mutable_dev_sn();
  public:

  // .common.StreamAddress dest_addr = 3;
  bool has_dest_addr() const;
  private:
  bool _internal_has_dest_addr() const;
  public:
  void clear_dest_addr();
  const ::common::StreamAddress& dest_addr() const;
  ::common::StreamAddress* release_dest_addr();
  ::common::StreamAddress* mutable_dest_addr();
  void set_allocated_dest_addr(::common::StreamAddress* dest_addr);
  private:
  const ::common::StreamAddress& _internal_dest_addr() const;
  ::common::StreamAddress* _internal_mutable_dest_addr();
  public:
  void unsafe_arena_set_allocated_dest_addr(
      ::common::StreamAddress* dest_addr);
  ::common::StreamAddress* unsafe_arena_release_dest_addr();

  // uint32 channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:u727.DevStopStreamNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_sn_;
  ::common::StreamAddress* dest_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class KeepAlive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.KeepAlive) */ {
 public:
  inline KeepAlive() : KeepAlive(nullptr) {}
  virtual ~KeepAlive();

  KeepAlive(const KeepAlive& from);
  KeepAlive(KeepAlive&& from) noexcept
    : KeepAlive() {
    *this = ::std::move(from);
  }

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAlive& operator=(KeepAlive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeepAlive& default_instance();

  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KeepAlive& a, KeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAlive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepAlive* New() const final {
    return CreateMaybeMessage<KeepAlive>(nullptr);
  }

  KeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepAlive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAlive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.KeepAlive";
  }
  protected:
  explicit KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:u727.KeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class QueryOnlineDevReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.QueryOnlineDevReq) */ {
 public:
  inline QueryOnlineDevReq() : QueryOnlineDevReq(nullptr) {}
  virtual ~QueryOnlineDevReq();

  QueryOnlineDevReq(const QueryOnlineDevReq& from);
  QueryOnlineDevReq(QueryOnlineDevReq&& from) noexcept
    : QueryOnlineDevReq() {
    *this = ::std::move(from);
  }

  inline QueryOnlineDevReq& operator=(const QueryOnlineDevReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOnlineDevReq& operator=(QueryOnlineDevReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryOnlineDevReq& default_instance();

  static inline const QueryOnlineDevReq* internal_default_instance() {
    return reinterpret_cast<const QueryOnlineDevReq*>(
               &_QueryOnlineDevReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryOnlineDevReq& a, QueryOnlineDevReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOnlineDevReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOnlineDevReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryOnlineDevReq* New() const final {
    return CreateMaybeMessage<QueryOnlineDevReq>(nullptr);
  }

  QueryOnlineDevReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryOnlineDevReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryOnlineDevReq& from);
  void MergeFrom(const QueryOnlineDevReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOnlineDevReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.QueryOnlineDevReq";
  }
  protected:
  explicit QueryOnlineDevReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:u727.QueryOnlineDevReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// -------------------------------------------------------------------

class QueryOnlineDevReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:u727.QueryOnlineDevReply) */ {
 public:
  inline QueryOnlineDevReply() : QueryOnlineDevReply(nullptr) {}
  virtual ~QueryOnlineDevReply();

  QueryOnlineDevReply(const QueryOnlineDevReply& from);
  QueryOnlineDevReply(QueryOnlineDevReply&& from) noexcept
    : QueryOnlineDevReply() {
    *this = ::std::move(from);
  }

  inline QueryOnlineDevReply& operator=(const QueryOnlineDevReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOnlineDevReply& operator=(QueryOnlineDevReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryOnlineDevReply& default_instance();

  static inline const QueryOnlineDevReply* internal_default_instance() {
    return reinterpret_cast<const QueryOnlineDevReply*>(
               &_QueryOnlineDevReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryOnlineDevReply& a, QueryOnlineDevReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOnlineDevReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOnlineDevReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryOnlineDevReply* New() const final {
    return CreateMaybeMessage<QueryOnlineDevReply>(nullptr);
  }

  QueryOnlineDevReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryOnlineDevReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryOnlineDevReply& from);
  void MergeFrom(const QueryOnlineDevReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOnlineDevReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "u727.QueryOnlineDevReply";
  }
  protected:
  explicit QueryOnlineDevReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_u727_2eproto);
    return ::descriptor_table_u727_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 20,
  };
  // repeated .u727.MgwDevInfo devices = 20;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::u727::MgwDevInfo* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::u727::MgwDevInfo >*
      mutable_devices();
  private:
  const ::u727::MgwDevInfo& _internal_devices(int index) const;
  ::u727::MgwDevInfo* _internal_add_devices();
  public:
  const ::u727::MgwDevInfo& devices(int index) const;
  ::u727::MgwDevInfo* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::u727::MgwDevInfo >&
      devices() const;

  // @@protoc_insertion_point(class_scope:u727.QueryOnlineDevReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::u727::MgwDevInfo > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_u727_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MgwDevInfo

// string dev_sn = 1;
inline void MgwDevInfo::clear_dev_sn() {
  dev_sn_.ClearToEmpty();
}
inline const std::string& MgwDevInfo::dev_sn() const {
  // @@protoc_insertion_point(field_get:u727.MgwDevInfo.dev_sn)
  return _internal_dev_sn();
}
inline void MgwDevInfo::set_dev_sn(const std::string& value) {
  _internal_set_dev_sn(value);
  // @@protoc_insertion_point(field_set:u727.MgwDevInfo.dev_sn)
}
inline std::string* MgwDevInfo::mutable_dev_sn() {
  // @@protoc_insertion_point(field_mutable:u727.MgwDevInfo.dev_sn)
  return _internal_mutable_dev_sn();
}
inline const std::string& MgwDevInfo::_internal_dev_sn() const {
  return dev_sn_.Get();
}
inline void MgwDevInfo::_internal_set_dev_sn(const std::string& value) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MgwDevInfo::set_dev_sn(std::string&& value) {
  
  dev_sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.MgwDevInfo.dev_sn)
}
inline void MgwDevInfo::set_dev_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.MgwDevInfo.dev_sn)
}
inline void MgwDevInfo::set_dev_sn(const char* value,
    size_t size) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.MgwDevInfo.dev_sn)
}
inline std::string* MgwDevInfo::_internal_mutable_dev_sn() {
  
  return dev_sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MgwDevInfo::release_dev_sn() {
  // @@protoc_insertion_point(field_release:u727.MgwDevInfo.dev_sn)
  return dev_sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MgwDevInfo::set_allocated_dev_sn(std::string* dev_sn) {
  if (dev_sn != nullptr) {
    
  } else {
    
  }
  dev_sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.MgwDevInfo.dev_sn)
}

// string type = 2;
inline void MgwDevInfo::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& MgwDevInfo::type() const {
  // @@protoc_insertion_point(field_get:u727.MgwDevInfo.type)
  return _internal_type();
}
inline void MgwDevInfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:u727.MgwDevInfo.type)
}
inline std::string* MgwDevInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:u727.MgwDevInfo.type)
  return _internal_mutable_type();
}
inline const std::string& MgwDevInfo::_internal_type() const {
  return type_.Get();
}
inline void MgwDevInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MgwDevInfo::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.MgwDevInfo.type)
}
inline void MgwDevInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.MgwDevInfo.type)
}
inline void MgwDevInfo::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.MgwDevInfo.type)
}
inline std::string* MgwDevInfo::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MgwDevInfo::release_type() {
  // @@protoc_insertion_point(field_release:u727.MgwDevInfo.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MgwDevInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.MgwDevInfo.type)
}

// string version = 3;
inline void MgwDevInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& MgwDevInfo::version() const {
  // @@protoc_insertion_point(field_get:u727.MgwDevInfo.version)
  return _internal_version();
}
inline void MgwDevInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:u727.MgwDevInfo.version)
}
inline std::string* MgwDevInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:u727.MgwDevInfo.version)
  return _internal_mutable_version();
}
inline const std::string& MgwDevInfo::_internal_version() const {
  return version_.Get();
}
inline void MgwDevInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MgwDevInfo::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.MgwDevInfo.version)
}
inline void MgwDevInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.MgwDevInfo.version)
}
inline void MgwDevInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.MgwDevInfo.version)
}
inline std::string* MgwDevInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MgwDevInfo::release_version() {
  // @@protoc_insertion_point(field_release:u727.MgwDevInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MgwDevInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.MgwDevInfo.version)
}

// string vendor = 4;
inline void MgwDevInfo::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& MgwDevInfo::vendor() const {
  // @@protoc_insertion_point(field_get:u727.MgwDevInfo.vendor)
  return _internal_vendor();
}
inline void MgwDevInfo::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:u727.MgwDevInfo.vendor)
}
inline std::string* MgwDevInfo::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:u727.MgwDevInfo.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& MgwDevInfo::_internal_vendor() const {
  return vendor_.Get();
}
inline void MgwDevInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MgwDevInfo::set_vendor(std::string&& value) {
  
  vendor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.MgwDevInfo.vendor)
}
inline void MgwDevInfo::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.MgwDevInfo.vendor)
}
inline void MgwDevInfo::set_vendor(const char* value,
    size_t size) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.MgwDevInfo.vendor)
}
inline std::string* MgwDevInfo::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MgwDevInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:u727.MgwDevInfo.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MgwDevInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.MgwDevInfo.vendor)
}

// -------------------------------------------------------------------

// SetDevBlacklist

// repeated string dev_sn_list = 1;
inline int SetDevBlacklist::_internal_dev_sn_list_size() const {
  return dev_sn_list_.size();
}
inline int SetDevBlacklist::dev_sn_list_size() const {
  return _internal_dev_sn_list_size();
}
inline void SetDevBlacklist::clear_dev_sn_list() {
  dev_sn_list_.Clear();
}
inline std::string* SetDevBlacklist::add_dev_sn_list() {
  // @@protoc_insertion_point(field_add_mutable:u727.SetDevBlacklist.dev_sn_list)
  return _internal_add_dev_sn_list();
}
inline const std::string& SetDevBlacklist::_internal_dev_sn_list(int index) const {
  return dev_sn_list_.Get(index);
}
inline const std::string& SetDevBlacklist::dev_sn_list(int index) const {
  // @@protoc_insertion_point(field_get:u727.SetDevBlacklist.dev_sn_list)
  return _internal_dev_sn_list(index);
}
inline std::string* SetDevBlacklist::mutable_dev_sn_list(int index) {
  // @@protoc_insertion_point(field_mutable:u727.SetDevBlacklist.dev_sn_list)
  return dev_sn_list_.Mutable(index);
}
inline void SetDevBlacklist::set_dev_sn_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:u727.SetDevBlacklist.dev_sn_list)
  dev_sn_list_.Mutable(index)->assign(value);
}
inline void SetDevBlacklist::set_dev_sn_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:u727.SetDevBlacklist.dev_sn_list)
  dev_sn_list_.Mutable(index)->assign(std::move(value));
}
inline void SetDevBlacklist::set_dev_sn_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dev_sn_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:u727.SetDevBlacklist.dev_sn_list)
}
inline void SetDevBlacklist::set_dev_sn_list(int index, const char* value, size_t size) {
  dev_sn_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:u727.SetDevBlacklist.dev_sn_list)
}
inline std::string* SetDevBlacklist::_internal_add_dev_sn_list() {
  return dev_sn_list_.Add();
}
inline void SetDevBlacklist::add_dev_sn_list(const std::string& value) {
  dev_sn_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:u727.SetDevBlacklist.dev_sn_list)
}
inline void SetDevBlacklist::add_dev_sn_list(std::string&& value) {
  dev_sn_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:u727.SetDevBlacklist.dev_sn_list)
}
inline void SetDevBlacklist::add_dev_sn_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dev_sn_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:u727.SetDevBlacklist.dev_sn_list)
}
inline void SetDevBlacklist::add_dev_sn_list(const char* value, size_t size) {
  dev_sn_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:u727.SetDevBlacklist.dev_sn_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetDevBlacklist::dev_sn_list() const {
  // @@protoc_insertion_point(field_list:u727.SetDevBlacklist.dev_sn_list)
  return dev_sn_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetDevBlacklist::mutable_dev_sn_list() {
  // @@protoc_insertion_point(field_mutable_list:u727.SetDevBlacklist.dev_sn_list)
  return &dev_sn_list_;
}

// -------------------------------------------------------------------

// StartStreamReq

// string stream_id = 1;
inline void StartStreamReq::clear_stream_id() {
  stream_id_.ClearToEmpty();
}
inline const std::string& StartStreamReq::stream_id() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.stream_id)
  return _internal_stream_id();
}
inline void StartStreamReq::set_stream_id(const std::string& value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.stream_id)
}
inline std::string* StartStreamReq::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.stream_id)
  return _internal_mutable_stream_id();
}
inline const std::string& StartStreamReq::_internal_stream_id() const {
  return stream_id_.Get();
}
inline void StartStreamReq::_internal_set_stream_id(const std::string& value) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReq::set_stream_id(std::string&& value) {
  
  stream_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReq.stream_id)
}
inline void StartStreamReq::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReq.stream_id)
}
inline void StartStreamReq::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReq.stream_id)
}
inline std::string* StartStreamReq::_internal_mutable_stream_id() {
  
  return stream_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReq::release_stream_id() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.stream_id)
  return stream_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartStreamReq::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReq.stream_id)
}

// string src_sock = 11;
inline bool StartStreamReq::_internal_has_src_sock() const {
  return src_case() == kSrcSock;
}
inline void StartStreamReq::set_has_src_sock() {
  _oneof_case_[0] = kSrcSock;
}
inline void StartStreamReq::clear_src_sock() {
  if (_internal_has_src_sock()) {
    src_.src_sock_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_src();
  }
}
inline const std::string& StartStreamReq::src_sock() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.src_sock)
  return _internal_src_sock();
}
inline void StartStreamReq::set_src_sock(const std::string& value) {
  _internal_set_src_sock(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.src_sock)
}
inline std::string* StartStreamReq::mutable_src_sock() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.src_sock)
  return _internal_mutable_src_sock();
}
inline const std::string& StartStreamReq::_internal_src_sock() const {
  if (_internal_has_src_sock()) {
    return src_.src_sock_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StartStreamReq::_internal_set_src_sock(const std::string& value) {
  if (!_internal_has_src_sock()) {
    clear_src();
    set_has_src_sock();
    src_.src_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_sock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReq::set_src_sock(std::string&& value) {
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.src_sock)
  if (!_internal_has_src_sock()) {
    clear_src();
    set_has_src_sock();
    src_.src_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_sock_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReq.src_sock)
}
inline void StartStreamReq::set_src_sock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_src_sock()) {
    clear_src();
    set_has_src_sock();
    src_.src_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_sock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReq.src_sock)
}
inline void StartStreamReq::set_src_sock(const char* value,
                             size_t size) {
  if (!_internal_has_src_sock()) {
    clear_src();
    set_has_src_sock();
    src_.src_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_sock_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReq.src_sock)
}
inline std::string* StartStreamReq::_internal_mutable_src_sock() {
  if (!_internal_has_src_sock()) {
    clear_src();
    set_has_src_sock();
    src_.src_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return src_.src_sock_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReq::release_src_sock() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.src_sock)
  if (_internal_has_src_sock()) {
    clear_has_src();
    return src_.src_sock_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::set_allocated_src_sock(std::string* src_sock) {
  if (has_src()) {
    clear_src();
  }
  if (src_sock != nullptr) {
    set_has_src_sock();
    src_.src_sock_.UnsafeSetDefault(src_sock);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(src_sock);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReq.src_sock)
}

// string src_dev_sn = 12;
inline bool StartStreamReq::_internal_has_src_dev_sn() const {
  return src_case() == kSrcDevSn;
}
inline void StartStreamReq::set_has_src_dev_sn() {
  _oneof_case_[0] = kSrcDevSn;
}
inline void StartStreamReq::clear_src_dev_sn() {
  if (_internal_has_src_dev_sn()) {
    src_.src_dev_sn_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_src();
  }
}
inline const std::string& StartStreamReq::src_dev_sn() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.src_dev_sn)
  return _internal_src_dev_sn();
}
inline void StartStreamReq::set_src_dev_sn(const std::string& value) {
  _internal_set_src_dev_sn(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.src_dev_sn)
}
inline std::string* StartStreamReq::mutable_src_dev_sn() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.src_dev_sn)
  return _internal_mutable_src_dev_sn();
}
inline const std::string& StartStreamReq::_internal_src_dev_sn() const {
  if (_internal_has_src_dev_sn()) {
    return src_.src_dev_sn_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StartStreamReq::_internal_set_src_dev_sn(const std::string& value) {
  if (!_internal_has_src_dev_sn()) {
    clear_src();
    set_has_src_dev_sn();
    src_.src_dev_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReq::set_src_dev_sn(std::string&& value) {
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.src_dev_sn)
  if (!_internal_has_src_dev_sn()) {
    clear_src();
    set_has_src_dev_sn();
    src_.src_dev_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_dev_sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReq.src_dev_sn)
}
inline void StartStreamReq::set_src_dev_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_src_dev_sn()) {
    clear_src();
    set_has_src_dev_sn();
    src_.src_dev_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReq.src_dev_sn)
}
inline void StartStreamReq::set_src_dev_sn(const char* value,
                             size_t size) {
  if (!_internal_has_src_dev_sn()) {
    clear_src();
    set_has_src_dev_sn();
    src_.src_dev_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_dev_sn_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReq.src_dev_sn)
}
inline std::string* StartStreamReq::_internal_mutable_src_dev_sn() {
  if (!_internal_has_src_dev_sn()) {
    clear_src();
    set_has_src_dev_sn();
    src_.src_dev_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return src_.src_dev_sn_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReq::release_src_dev_sn() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.src_dev_sn)
  if (_internal_has_src_dev_sn()) {
    clear_has_src();
    return src_.src_dev_sn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::set_allocated_src_dev_sn(std::string* src_dev_sn) {
  if (has_src()) {
    clear_src();
  }
  if (src_dev_sn != nullptr) {
    set_has_src_dev_sn();
    src_.src_dev_sn_.UnsafeSetDefault(src_dev_sn);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(src_dev_sn);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReq.src_dev_sn)
}

// .common.StreamAddress src_pull_addr = 13;
inline bool StartStreamReq::_internal_has_src_pull_addr() const {
  return src_case() == kSrcPullAddr;
}
inline bool StartStreamReq::has_src_pull_addr() const {
  return _internal_has_src_pull_addr();
}
inline void StartStreamReq::set_has_src_pull_addr() {
  _oneof_case_[0] = kSrcPullAddr;
}
inline ::common::StreamAddress* StartStreamReq::release_src_pull_addr() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.src_pull_addr)
  if (_internal_has_src_pull_addr()) {
    clear_has_src();
      ::common::StreamAddress* temp = src_.src_pull_addr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    src_.src_pull_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::StreamAddress& StartStreamReq::_internal_src_pull_addr() const {
  return _internal_has_src_pull_addr()
      ? *src_.src_pull_addr_
      : reinterpret_cast< ::common::StreamAddress&>(::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& StartStreamReq::src_pull_addr() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.src_pull_addr)
  return _internal_src_pull_addr();
}
inline ::common::StreamAddress* StartStreamReq::unsafe_arena_release_src_pull_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:u727.StartStreamReq.src_pull_addr)
  if (_internal_has_src_pull_addr()) {
    clear_has_src();
    ::common::StreamAddress* temp = src_.src_pull_addr_;
    src_.src_pull_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::unsafe_arena_set_allocated_src_pull_addr(::common::StreamAddress* src_pull_addr) {
  clear_src();
  if (src_pull_addr) {
    set_has_src_pull_addr();
    src_.src_pull_addr_ = src_pull_addr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.StartStreamReq.src_pull_addr)
}
inline ::common::StreamAddress* StartStreamReq::_internal_mutable_src_pull_addr() {
  if (!_internal_has_src_pull_addr()) {
    clear_src();
    set_has_src_pull_addr();
    src_.src_pull_addr_ = CreateMaybeMessage< ::common::StreamAddress >(GetArena());
  }
  return src_.src_pull_addr_;
}
inline ::common::StreamAddress* StartStreamReq::mutable_src_pull_addr() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.src_pull_addr)
  return _internal_mutable_src_pull_addr();
}

// .common.StreamAddress src_push_addr = 14;
inline bool StartStreamReq::_internal_has_src_push_addr() const {
  return src_case() == kSrcPushAddr;
}
inline bool StartStreamReq::has_src_push_addr() const {
  return _internal_has_src_push_addr();
}
inline void StartStreamReq::set_has_src_push_addr() {
  _oneof_case_[0] = kSrcPushAddr;
}
inline ::common::StreamAddress* StartStreamReq::release_src_push_addr() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.src_push_addr)
  if (_internal_has_src_push_addr()) {
    clear_has_src();
      ::common::StreamAddress* temp = src_.src_push_addr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    src_.src_push_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::StreamAddress& StartStreamReq::_internal_src_push_addr() const {
  return _internal_has_src_push_addr()
      ? *src_.src_push_addr_
      : reinterpret_cast< ::common::StreamAddress&>(::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& StartStreamReq::src_push_addr() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.src_push_addr)
  return _internal_src_push_addr();
}
inline ::common::StreamAddress* StartStreamReq::unsafe_arena_release_src_push_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:u727.StartStreamReq.src_push_addr)
  if (_internal_has_src_push_addr()) {
    clear_has_src();
    ::common::StreamAddress* temp = src_.src_push_addr_;
    src_.src_push_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::unsafe_arena_set_allocated_src_push_addr(::common::StreamAddress* src_push_addr) {
  clear_src();
  if (src_push_addr) {
    set_has_src_push_addr();
    src_.src_push_addr_ = src_push_addr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.StartStreamReq.src_push_addr)
}
inline ::common::StreamAddress* StartStreamReq::_internal_mutable_src_push_addr() {
  if (!_internal_has_src_push_addr()) {
    clear_src();
    set_has_src_push_addr();
    src_.src_push_addr_ = CreateMaybeMessage< ::common::StreamAddress >(GetArena());
  }
  return src_.src_push_addr_;
}
inline ::common::StreamAddress* StartStreamReq::mutable_src_push_addr() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.src_push_addr)
  return _internal_mutable_src_push_addr();
}

// string src_file_path = 15;
inline bool StartStreamReq::_internal_has_src_file_path() const {
  return src_case() == kSrcFilePath;
}
inline void StartStreamReq::set_has_src_file_path() {
  _oneof_case_[0] = kSrcFilePath;
}
inline void StartStreamReq::clear_src_file_path() {
  if (_internal_has_src_file_path()) {
    src_.src_file_path_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_src();
  }
}
inline const std::string& StartStreamReq::src_file_path() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.src_file_path)
  return _internal_src_file_path();
}
inline void StartStreamReq::set_src_file_path(const std::string& value) {
  _internal_set_src_file_path(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.src_file_path)
}
inline std::string* StartStreamReq::mutable_src_file_path() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.src_file_path)
  return _internal_mutable_src_file_path();
}
inline const std::string& StartStreamReq::_internal_src_file_path() const {
  if (_internal_has_src_file_path()) {
    return src_.src_file_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StartStreamReq::_internal_set_src_file_path(const std::string& value) {
  if (!_internal_has_src_file_path()) {
    clear_src();
    set_has_src_file_path();
    src_.src_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReq::set_src_file_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.src_file_path)
  if (!_internal_has_src_file_path()) {
    clear_src();
    set_has_src_file_path();
    src_.src_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReq.src_file_path)
}
inline void StartStreamReq::set_src_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_src_file_path()) {
    clear_src();
    set_has_src_file_path();
    src_.src_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReq.src_file_path)
}
inline void StartStreamReq::set_src_file_path(const char* value,
                             size_t size) {
  if (!_internal_has_src_file_path()) {
    clear_src();
    set_has_src_file_path();
    src_.src_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  src_.src_file_path_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReq.src_file_path)
}
inline std::string* StartStreamReq::_internal_mutable_src_file_path() {
  if (!_internal_has_src_file_path()) {
    clear_src();
    set_has_src_file_path();
    src_.src_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return src_.src_file_path_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReq::release_src_file_path() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.src_file_path)
  if (_internal_has_src_file_path()) {
    clear_has_src();
    return src_.src_file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::set_allocated_src_file_path(std::string* src_file_path) {
  if (has_src()) {
    clear_src();
  }
  if (src_file_path != nullptr) {
    set_has_src_file_path();
    src_.src_file_path_.UnsafeSetDefault(src_file_path);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(src_file_path);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReq.src_file_path)
}

// string dest_sock = 21;
inline bool StartStreamReq::_internal_has_dest_sock() const {
  return dest_case() == kDestSock;
}
inline void StartStreamReq::set_has_dest_sock() {
  _oneof_case_[1] = kDestSock;
}
inline void StartStreamReq::clear_dest_sock() {
  if (_internal_has_dest_sock()) {
    dest_.dest_sock_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_dest();
  }
}
inline const std::string& StartStreamReq::dest_sock() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.dest_sock)
  return _internal_dest_sock();
}
inline void StartStreamReq::set_dest_sock(const std::string& value) {
  _internal_set_dest_sock(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.dest_sock)
}
inline std::string* StartStreamReq::mutable_dest_sock() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.dest_sock)
  return _internal_mutable_dest_sock();
}
inline const std::string& StartStreamReq::_internal_dest_sock() const {
  if (_internal_has_dest_sock()) {
    return dest_.dest_sock_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StartStreamReq::_internal_set_dest_sock(const std::string& value) {
  if (!_internal_has_dest_sock()) {
    clear_dest();
    set_has_dest_sock();
    dest_.dest_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_sock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReq::set_dest_sock(std::string&& value) {
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.dest_sock)
  if (!_internal_has_dest_sock()) {
    clear_dest();
    set_has_dest_sock();
    dest_.dest_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_sock_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReq.dest_sock)
}
inline void StartStreamReq::set_dest_sock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_dest_sock()) {
    clear_dest();
    set_has_dest_sock();
    dest_.dest_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_sock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReq.dest_sock)
}
inline void StartStreamReq::set_dest_sock(const char* value,
                             size_t size) {
  if (!_internal_has_dest_sock()) {
    clear_dest();
    set_has_dest_sock();
    dest_.dest_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_sock_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReq.dest_sock)
}
inline std::string* StartStreamReq::_internal_mutable_dest_sock() {
  if (!_internal_has_dest_sock()) {
    clear_dest();
    set_has_dest_sock();
    dest_.dest_sock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return dest_.dest_sock_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReq::release_dest_sock() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.dest_sock)
  if (_internal_has_dest_sock()) {
    clear_has_dest();
    return dest_.dest_sock_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::set_allocated_dest_sock(std::string* dest_sock) {
  if (has_dest()) {
    clear_dest();
  }
  if (dest_sock != nullptr) {
    set_has_dest_sock();
    dest_.dest_sock_.UnsafeSetDefault(dest_sock);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(dest_sock);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReq.dest_sock)
}

// .common.StreamAddress dest_push_addr = 23;
inline bool StartStreamReq::_internal_has_dest_push_addr() const {
  return dest_case() == kDestPushAddr;
}
inline bool StartStreamReq::has_dest_push_addr() const {
  return _internal_has_dest_push_addr();
}
inline void StartStreamReq::set_has_dest_push_addr() {
  _oneof_case_[1] = kDestPushAddr;
}
inline ::common::StreamAddress* StartStreamReq::release_dest_push_addr() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.dest_push_addr)
  if (_internal_has_dest_push_addr()) {
    clear_has_dest();
      ::common::StreamAddress* temp = dest_.dest_push_addr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dest_.dest_push_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::StreamAddress& StartStreamReq::_internal_dest_push_addr() const {
  return _internal_has_dest_push_addr()
      ? *dest_.dest_push_addr_
      : reinterpret_cast< ::common::StreamAddress&>(::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& StartStreamReq::dest_push_addr() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.dest_push_addr)
  return _internal_dest_push_addr();
}
inline ::common::StreamAddress* StartStreamReq::unsafe_arena_release_dest_push_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:u727.StartStreamReq.dest_push_addr)
  if (_internal_has_dest_push_addr()) {
    clear_has_dest();
    ::common::StreamAddress* temp = dest_.dest_push_addr_;
    dest_.dest_push_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::unsafe_arena_set_allocated_dest_push_addr(::common::StreamAddress* dest_push_addr) {
  clear_dest();
  if (dest_push_addr) {
    set_has_dest_push_addr();
    dest_.dest_push_addr_ = dest_push_addr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.StartStreamReq.dest_push_addr)
}
inline ::common::StreamAddress* StartStreamReq::_internal_mutable_dest_push_addr() {
  if (!_internal_has_dest_push_addr()) {
    clear_dest();
    set_has_dest_push_addr();
    dest_.dest_push_addr_ = CreateMaybeMessage< ::common::StreamAddress >(GetArena());
  }
  return dest_.dest_push_addr_;
}
inline ::common::StreamAddress* StartStreamReq::mutable_dest_push_addr() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.dest_push_addr)
  return _internal_mutable_dest_push_addr();
}

// .common.StreamAddress dest_pull_addr = 24;
inline bool StartStreamReq::_internal_has_dest_pull_addr() const {
  return dest_case() == kDestPullAddr;
}
inline bool StartStreamReq::has_dest_pull_addr() const {
  return _internal_has_dest_pull_addr();
}
inline void StartStreamReq::set_has_dest_pull_addr() {
  _oneof_case_[1] = kDestPullAddr;
}
inline ::common::StreamAddress* StartStreamReq::release_dest_pull_addr() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.dest_pull_addr)
  if (_internal_has_dest_pull_addr()) {
    clear_has_dest();
      ::common::StreamAddress* temp = dest_.dest_pull_addr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dest_.dest_pull_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::StreamAddress& StartStreamReq::_internal_dest_pull_addr() const {
  return _internal_has_dest_pull_addr()
      ? *dest_.dest_pull_addr_
      : reinterpret_cast< ::common::StreamAddress&>(::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& StartStreamReq::dest_pull_addr() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.dest_pull_addr)
  return _internal_dest_pull_addr();
}
inline ::common::StreamAddress* StartStreamReq::unsafe_arena_release_dest_pull_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:u727.StartStreamReq.dest_pull_addr)
  if (_internal_has_dest_pull_addr()) {
    clear_has_dest();
    ::common::StreamAddress* temp = dest_.dest_pull_addr_;
    dest_.dest_pull_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::unsafe_arena_set_allocated_dest_pull_addr(::common::StreamAddress* dest_pull_addr) {
  clear_dest();
  if (dest_pull_addr) {
    set_has_dest_pull_addr();
    dest_.dest_pull_addr_ = dest_pull_addr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.StartStreamReq.dest_pull_addr)
}
inline ::common::StreamAddress* StartStreamReq::_internal_mutable_dest_pull_addr() {
  if (!_internal_has_dest_pull_addr()) {
    clear_dest();
    set_has_dest_pull_addr();
    dest_.dest_pull_addr_ = CreateMaybeMessage< ::common::StreamAddress >(GetArena());
  }
  return dest_.dest_pull_addr_;
}
inline ::common::StreamAddress* StartStreamReq::mutable_dest_pull_addr() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.dest_pull_addr)
  return _internal_mutable_dest_pull_addr();
}

// string dest_file_path = 25;
inline bool StartStreamReq::_internal_has_dest_file_path() const {
  return dest_case() == kDestFilePath;
}
inline void StartStreamReq::set_has_dest_file_path() {
  _oneof_case_[1] = kDestFilePath;
}
inline void StartStreamReq::clear_dest_file_path() {
  if (_internal_has_dest_file_path()) {
    dest_.dest_file_path_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_dest();
  }
}
inline const std::string& StartStreamReq::dest_file_path() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.dest_file_path)
  return _internal_dest_file_path();
}
inline void StartStreamReq::set_dest_file_path(const std::string& value) {
  _internal_set_dest_file_path(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.dest_file_path)
}
inline std::string* StartStreamReq::mutable_dest_file_path() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReq.dest_file_path)
  return _internal_mutable_dest_file_path();
}
inline const std::string& StartStreamReq::_internal_dest_file_path() const {
  if (_internal_has_dest_file_path()) {
    return dest_.dest_file_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StartStreamReq::_internal_set_dest_file_path(const std::string& value) {
  if (!_internal_has_dest_file_path()) {
    clear_dest();
    set_has_dest_file_path();
    dest_.dest_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReq::set_dest_file_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.dest_file_path)
  if (!_internal_has_dest_file_path()) {
    clear_dest();
    set_has_dest_file_path();
    dest_.dest_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReq.dest_file_path)
}
inline void StartStreamReq::set_dest_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_dest_file_path()) {
    clear_dest();
    set_has_dest_file_path();
    dest_.dest_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReq.dest_file_path)
}
inline void StartStreamReq::set_dest_file_path(const char* value,
                             size_t size) {
  if (!_internal_has_dest_file_path()) {
    clear_dest();
    set_has_dest_file_path();
    dest_.dest_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  dest_.dest_file_path_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReq.dest_file_path)
}
inline std::string* StartStreamReq::_internal_mutable_dest_file_path() {
  if (!_internal_has_dest_file_path()) {
    clear_dest();
    set_has_dest_file_path();
    dest_.dest_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return dest_.dest_file_path_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReq::release_dest_file_path() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReq.dest_file_path)
  if (_internal_has_dest_file_path()) {
    clear_has_dest();
    return dest_.dest_file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StartStreamReq::set_allocated_dest_file_path(std::string* dest_file_path) {
  if (has_dest()) {
    clear_dest();
  }
  if (dest_file_path != nullptr) {
    set_has_dest_file_path();
    dest_.dest_file_path_.UnsafeSetDefault(dest_file_path);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(dest_file_path);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReq.dest_file_path)
}

// uint32 delay_ms = 31;
inline void StartStreamReq::clear_delay_ms() {
  delay_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartStreamReq::_internal_delay_ms() const {
  return delay_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartStreamReq::delay_ms() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReq.delay_ms)
  return _internal_delay_ms();
}
inline void StartStreamReq::_internal_set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  delay_ms_ = value;
}
inline void StartStreamReq::set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay_ms(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReq.delay_ms)
}

inline bool StartStreamReq::has_src() const {
  return src_case() != SRC_NOT_SET;
}
inline void StartStreamReq::clear_has_src() {
  _oneof_case_[0] = SRC_NOT_SET;
}
inline bool StartStreamReq::has_dest() const {
  return dest_case() != DEST_NOT_SET;
}
inline void StartStreamReq::clear_has_dest() {
  _oneof_case_[1] = DEST_NOT_SET;
}
inline StartStreamReq::SrcCase StartStreamReq::src_case() const {
  return StartStreamReq::SrcCase(_oneof_case_[0]);
}
inline StartStreamReq::DestCase StartStreamReq::dest_case() const {
  return StartStreamReq::DestCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// StartStreamReply

// string stream_id = 1;
inline void StartStreamReply::clear_stream_id() {
  stream_id_.ClearToEmpty();
}
inline const std::string& StartStreamReply::stream_id() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReply.stream_id)
  return _internal_stream_id();
}
inline void StartStreamReply::set_stream_id(const std::string& value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReply.stream_id)
}
inline std::string* StartStreamReply::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReply.stream_id)
  return _internal_mutable_stream_id();
}
inline const std::string& StartStreamReply::_internal_stream_id() const {
  return stream_id_.Get();
}
inline void StartStreamReply::_internal_set_stream_id(const std::string& value) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReply::set_stream_id(std::string&& value) {
  
  stream_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReply.stream_id)
}
inline void StartStreamReply::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReply.stream_id)
}
inline void StartStreamReply::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReply.stream_id)
}
inline std::string* StartStreamReply::_internal_mutable_stream_id() {
  
  return stream_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReply::release_stream_id() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReply.stream_id)
  return stream_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartStreamReply::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReply.stream_id)
}

// int32 result = 2;
inline void StartStreamReply::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartStreamReply::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartStreamReply::result() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReply.result)
  return _internal_result();
}
inline void StartStreamReply::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void StartStreamReply::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReply.result)
}

// string descrip = 3;
inline void StartStreamReply::clear_descrip() {
  descrip_.ClearToEmpty();
}
inline const std::string& StartStreamReply::descrip() const {
  // @@protoc_insertion_point(field_get:u727.StartStreamReply.descrip)
  return _internal_descrip();
}
inline void StartStreamReply::set_descrip(const std::string& value) {
  _internal_set_descrip(value);
  // @@protoc_insertion_point(field_set:u727.StartStreamReply.descrip)
}
inline std::string* StartStreamReply::mutable_descrip() {
  // @@protoc_insertion_point(field_mutable:u727.StartStreamReply.descrip)
  return _internal_mutable_descrip();
}
inline const std::string& StartStreamReply::_internal_descrip() const {
  return descrip_.Get();
}
inline void StartStreamReply::_internal_set_descrip(const std::string& value) {
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartStreamReply::set_descrip(std::string&& value) {
  
  descrip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StartStreamReply.descrip)
}
inline void StartStreamReply::set_descrip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StartStreamReply.descrip)
}
inline void StartStreamReply::set_descrip(const char* value,
    size_t size) {
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StartStreamReply.descrip)
}
inline std::string* StartStreamReply::_internal_mutable_descrip() {
  
  return descrip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartStreamReply::release_descrip() {
  // @@protoc_insertion_point(field_release:u727.StartStreamReply.descrip)
  return descrip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartStreamReply::set_allocated_descrip(std::string* descrip) {
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descrip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.StartStreamReply.descrip)
}

// -------------------------------------------------------------------

// StopStreamReq

// string stream_id = 1;
inline void StopStreamReq::clear_stream_id() {
  stream_id_.ClearToEmpty();
}
inline const std::string& StopStreamReq::stream_id() const {
  // @@protoc_insertion_point(field_get:u727.StopStreamReq.stream_id)
  return _internal_stream_id();
}
inline void StopStreamReq::set_stream_id(const std::string& value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:u727.StopStreamReq.stream_id)
}
inline std::string* StopStreamReq::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable:u727.StopStreamReq.stream_id)
  return _internal_mutable_stream_id();
}
inline const std::string& StopStreamReq::_internal_stream_id() const {
  return stream_id_.Get();
}
inline void StopStreamReq::_internal_set_stream_id(const std::string& value) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopStreamReq::set_stream_id(std::string&& value) {
  
  stream_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StopStreamReq.stream_id)
}
inline void StopStreamReq::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StopStreamReq.stream_id)
}
inline void StopStreamReq::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StopStreamReq.stream_id)
}
inline std::string* StopStreamReq::_internal_mutable_stream_id() {
  
  return stream_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopStreamReq::release_stream_id() {
  // @@protoc_insertion_point(field_release:u727.StopStreamReq.stream_id)
  return stream_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopStreamReq::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.StopStreamReq.stream_id)
}

// -------------------------------------------------------------------

// MgwDevOnlineNotify

// .u727.MgwDevInfo device = 20;
inline bool MgwDevOnlineNotify::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool MgwDevOnlineNotify::has_device() const {
  return _internal_has_device();
}
inline void MgwDevOnlineNotify::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::u727::MgwDevInfo& MgwDevOnlineNotify::_internal_device() const {
  const ::u727::MgwDevInfo* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::u727::MgwDevInfo&>(
      ::u727::_MgwDevInfo_default_instance_);
}
inline const ::u727::MgwDevInfo& MgwDevOnlineNotify::device() const {
  // @@protoc_insertion_point(field_get:u727.MgwDevOnlineNotify.device)
  return _internal_device();
}
inline void MgwDevOnlineNotify::unsafe_arena_set_allocated_device(
    ::u727::MgwDevInfo* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.MgwDevOnlineNotify.device)
}
inline ::u727::MgwDevInfo* MgwDevOnlineNotify::release_device() {
  
  ::u727::MgwDevInfo* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::u727::MgwDevInfo* MgwDevOnlineNotify::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:u727.MgwDevOnlineNotify.device)
  
  ::u727::MgwDevInfo* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::u727::MgwDevInfo* MgwDevOnlineNotify::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::u727::MgwDevInfo>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::u727::MgwDevInfo* MgwDevOnlineNotify::mutable_device() {
  // @@protoc_insertion_point(field_mutable:u727.MgwDevOnlineNotify.device)
  return _internal_mutable_device();
}
inline void MgwDevOnlineNotify::set_allocated_device(::u727::MgwDevInfo* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:u727.MgwDevOnlineNotify.device)
}

// -------------------------------------------------------------------

// MgwDevOfflineNotify

// string dev_sn = 1;
inline void MgwDevOfflineNotify::clear_dev_sn() {
  dev_sn_.ClearToEmpty();
}
inline const std::string& MgwDevOfflineNotify::dev_sn() const {
  // @@protoc_insertion_point(field_get:u727.MgwDevOfflineNotify.dev_sn)
  return _internal_dev_sn();
}
inline void MgwDevOfflineNotify::set_dev_sn(const std::string& value) {
  _internal_set_dev_sn(value);
  // @@protoc_insertion_point(field_set:u727.MgwDevOfflineNotify.dev_sn)
}
inline std::string* MgwDevOfflineNotify::mutable_dev_sn() {
  // @@protoc_insertion_point(field_mutable:u727.MgwDevOfflineNotify.dev_sn)
  return _internal_mutable_dev_sn();
}
inline const std::string& MgwDevOfflineNotify::_internal_dev_sn() const {
  return dev_sn_.Get();
}
inline void MgwDevOfflineNotify::_internal_set_dev_sn(const std::string& value) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MgwDevOfflineNotify::set_dev_sn(std::string&& value) {
  
  dev_sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.MgwDevOfflineNotify.dev_sn)
}
inline void MgwDevOfflineNotify::set_dev_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.MgwDevOfflineNotify.dev_sn)
}
inline void MgwDevOfflineNotify::set_dev_sn(const char* value,
    size_t size) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.MgwDevOfflineNotify.dev_sn)
}
inline std::string* MgwDevOfflineNotify::_internal_mutable_dev_sn() {
  
  return dev_sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MgwDevOfflineNotify::release_dev_sn() {
  // @@protoc_insertion_point(field_release:u727.MgwDevOfflineNotify.dev_sn)
  return dev_sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MgwDevOfflineNotify::set_allocated_dev_sn(std::string* dev_sn) {
  if (dev_sn != nullptr) {
    
  } else {
    
  }
  dev_sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.MgwDevOfflineNotify.dev_sn)
}

// -------------------------------------------------------------------

// SetLocalSvcPortReq

// uint32 rtmp_port = 1;
inline void SetLocalSvcPortReq::clear_rtmp_port() {
  rtmp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetLocalSvcPortReq::_internal_rtmp_port() const {
  return rtmp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetLocalSvcPortReq::rtmp_port() const {
  // @@protoc_insertion_point(field_get:u727.SetLocalSvcPortReq.rtmp_port)
  return _internal_rtmp_port();
}
inline void SetLocalSvcPortReq::_internal_set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rtmp_port_ = value;
}
inline void SetLocalSvcPortReq::set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtmp_port(value);
  // @@protoc_insertion_point(field_set:u727.SetLocalSvcPortReq.rtmp_port)
}

// uint32 srt_port = 2;
inline void SetLocalSvcPortReq::clear_srt_port() {
  srt_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetLocalSvcPortReq::_internal_srt_port() const {
  return srt_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetLocalSvcPortReq::srt_port() const {
  // @@protoc_insertion_point(field_get:u727.SetLocalSvcPortReq.srt_port)
  return _internal_srt_port();
}
inline void SetLocalSvcPortReq::_internal_set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srt_port_ = value;
}
inline void SetLocalSvcPortReq::set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srt_port(value);
  // @@protoc_insertion_point(field_set:u727.SetLocalSvcPortReq.srt_port)
}

// uint32 http_port = 3;
inline void SetLocalSvcPortReq::clear_http_port() {
  http_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetLocalSvcPortReq::_internal_http_port() const {
  return http_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetLocalSvcPortReq::http_port() const {
  // @@protoc_insertion_point(field_get:u727.SetLocalSvcPortReq.http_port)
  return _internal_http_port();
}
inline void SetLocalSvcPortReq::_internal_set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  http_port_ = value;
}
inline void SetLocalSvcPortReq::set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_http_port(value);
  // @@protoc_insertion_point(field_set:u727.SetLocalSvcPortReq.http_port)
}

// -------------------------------------------------------------------

// SetLocalSvcPortReply

// int32 result = 1;
inline void SetLocalSvcPortReply::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLocalSvcPortReply::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLocalSvcPortReply::result() const {
  // @@protoc_insertion_point(field_get:u727.SetLocalSvcPortReply.result)
  return _internal_result();
}
inline void SetLocalSvcPortReply::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SetLocalSvcPortReply::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:u727.SetLocalSvcPortReply.result)
}

// string descrip = 2;
inline void SetLocalSvcPortReply::clear_descrip() {
  descrip_.ClearToEmpty();
}
inline const std::string& SetLocalSvcPortReply::descrip() const {
  // @@protoc_insertion_point(field_get:u727.SetLocalSvcPortReply.descrip)
  return _internal_descrip();
}
inline void SetLocalSvcPortReply::set_descrip(const std::string& value) {
  _internal_set_descrip(value);
  // @@protoc_insertion_point(field_set:u727.SetLocalSvcPortReply.descrip)
}
inline std::string* SetLocalSvcPortReply::mutable_descrip() {
  // @@protoc_insertion_point(field_mutable:u727.SetLocalSvcPortReply.descrip)
  return _internal_mutable_descrip();
}
inline const std::string& SetLocalSvcPortReply::_internal_descrip() const {
  return descrip_.Get();
}
inline void SetLocalSvcPortReply::_internal_set_descrip(const std::string& value) {
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLocalSvcPortReply::set_descrip(std::string&& value) {
  
  descrip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.SetLocalSvcPortReply.descrip)
}
inline void SetLocalSvcPortReply::set_descrip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.SetLocalSvcPortReply.descrip)
}
inline void SetLocalSvcPortReply::set_descrip(const char* value,
    size_t size) {
  
  descrip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.SetLocalSvcPortReply.descrip)
}
inline std::string* SetLocalSvcPortReply::_internal_mutable_descrip() {
  
  return descrip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLocalSvcPortReply::release_descrip() {
  // @@protoc_insertion_point(field_release:u727.SetLocalSvcPortReply.descrip)
  return descrip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLocalSvcPortReply::set_allocated_descrip(std::string* descrip) {
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descrip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.SetLocalSvcPortReply.descrip)
}

// -------------------------------------------------------------------

// GetLocalSvcPortReq

// -------------------------------------------------------------------

// GetLocalSvcPortReply

// uint32 rtmp_port = 1;
inline void GetLocalSvcPortReply::clear_rtmp_port() {
  rtmp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLocalSvcPortReply::_internal_rtmp_port() const {
  return rtmp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLocalSvcPortReply::rtmp_port() const {
  // @@protoc_insertion_point(field_get:u727.GetLocalSvcPortReply.rtmp_port)
  return _internal_rtmp_port();
}
inline void GetLocalSvcPortReply::_internal_set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rtmp_port_ = value;
}
inline void GetLocalSvcPortReply::set_rtmp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtmp_port(value);
  // @@protoc_insertion_point(field_set:u727.GetLocalSvcPortReply.rtmp_port)
}

// uint32 srt_port = 2;
inline void GetLocalSvcPortReply::clear_srt_port() {
  srt_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLocalSvcPortReply::_internal_srt_port() const {
  return srt_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLocalSvcPortReply::srt_port() const {
  // @@protoc_insertion_point(field_get:u727.GetLocalSvcPortReply.srt_port)
  return _internal_srt_port();
}
inline void GetLocalSvcPortReply::_internal_set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srt_port_ = value;
}
inline void GetLocalSvcPortReply::set_srt_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srt_port(value);
  // @@protoc_insertion_point(field_set:u727.GetLocalSvcPortReply.srt_port)
}

// uint32 http_port = 3;
inline void GetLocalSvcPortReply::clear_http_port() {
  http_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLocalSvcPortReply::_internal_http_port() const {
  return http_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLocalSvcPortReply::http_port() const {
  // @@protoc_insertion_point(field_get:u727.GetLocalSvcPortReply.http_port)
  return _internal_http_port();
}
inline void GetLocalSvcPortReply::_internal_set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  http_port_ = value;
}
inline void GetLocalSvcPortReply::set_http_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_http_port(value);
  // @@protoc_insertion_point(field_set:u727.GetLocalSvcPortReply.http_port)
}

// -------------------------------------------------------------------

// StreamStatusNotify

// string stream_id = 1;
inline void StreamStatusNotify::clear_stream_id() {
  stream_id_.ClearToEmpty();
}
inline const std::string& StreamStatusNotify::stream_id() const {
  // @@protoc_insertion_point(field_get:u727.StreamStatusNotify.stream_id)
  return _internal_stream_id();
}
inline void StreamStatusNotify::set_stream_id(const std::string& value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:u727.StreamStatusNotify.stream_id)
}
inline std::string* StreamStatusNotify::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable:u727.StreamStatusNotify.stream_id)
  return _internal_mutable_stream_id();
}
inline const std::string& StreamStatusNotify::_internal_stream_id() const {
  return stream_id_.Get();
}
inline void StreamStatusNotify::_internal_set_stream_id(const std::string& value) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamStatusNotify::set_stream_id(std::string&& value) {
  
  stream_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.StreamStatusNotify.stream_id)
}
inline void StreamStatusNotify::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.StreamStatusNotify.stream_id)
}
inline void StreamStatusNotify::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.StreamStatusNotify.stream_id)
}
inline std::string* StreamStatusNotify::_internal_mutable_stream_id() {
  
  return stream_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamStatusNotify::release_stream_id() {
  // @@protoc_insertion_point(field_release:u727.StreamStatusNotify.stream_id)
  return stream_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamStatusNotify::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.StreamStatusNotify.stream_id)
}

// int32 status = 3;
inline void StreamStatusNotify::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamStatusNotify::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamStatusNotify::status() const {
  // @@protoc_insertion_point(field_get:u727.StreamStatusNotify.status)
  return _internal_status();
}
inline void StreamStatusNotify::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void StreamStatusNotify::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:u727.StreamStatusNotify.status)
}

// int32 startTime = 4;
inline void StreamStatusNotify::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamStatusNotify::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamStatusNotify::starttime() const {
  // @@protoc_insertion_point(field_get:u727.StreamStatusNotify.startTime)
  return _internal_starttime();
}
inline void StreamStatusNotify::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void StreamStatusNotify::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:u727.StreamStatusNotify.startTime)
}

// int32 lastErrCode = 5;
inline void StreamStatusNotify::clear_lasterrcode() {
  lasterrcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamStatusNotify::_internal_lasterrcode() const {
  return lasterrcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamStatusNotify::lasterrcode() const {
  // @@protoc_insertion_point(field_get:u727.StreamStatusNotify.lastErrCode)
  return _internal_lasterrcode();
}
inline void StreamStatusNotify::_internal_set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lasterrcode_ = value;
}
inline void StreamStatusNotify::set_lasterrcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lasterrcode(value);
  // @@protoc_insertion_point(field_set:u727.StreamStatusNotify.lastErrCode)
}

// -------------------------------------------------------------------

// DevStartStreamNotify

// string dev_sn = 1;
inline void DevStartStreamNotify::clear_dev_sn() {
  dev_sn_.ClearToEmpty();
}
inline const std::string& DevStartStreamNotify::dev_sn() const {
  // @@protoc_insertion_point(field_get:u727.DevStartStreamNotify.dev_sn)
  return _internal_dev_sn();
}
inline void DevStartStreamNotify::set_dev_sn(const std::string& value) {
  _internal_set_dev_sn(value);
  // @@protoc_insertion_point(field_set:u727.DevStartStreamNotify.dev_sn)
}
inline std::string* DevStartStreamNotify::mutable_dev_sn() {
  // @@protoc_insertion_point(field_mutable:u727.DevStartStreamNotify.dev_sn)
  return _internal_mutable_dev_sn();
}
inline const std::string& DevStartStreamNotify::_internal_dev_sn() const {
  return dev_sn_.Get();
}
inline void DevStartStreamNotify::_internal_set_dev_sn(const std::string& value) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DevStartStreamNotify::set_dev_sn(std::string&& value) {
  
  dev_sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.DevStartStreamNotify.dev_sn)
}
inline void DevStartStreamNotify::set_dev_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.DevStartStreamNotify.dev_sn)
}
inline void DevStartStreamNotify::set_dev_sn(const char* value,
    size_t size) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.DevStartStreamNotify.dev_sn)
}
inline std::string* DevStartStreamNotify::_internal_mutable_dev_sn() {
  
  return dev_sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DevStartStreamNotify::release_dev_sn() {
  // @@protoc_insertion_point(field_release:u727.DevStartStreamNotify.dev_sn)
  return dev_sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DevStartStreamNotify::set_allocated_dev_sn(std::string* dev_sn) {
  if (dev_sn != nullptr) {
    
  } else {
    
  }
  dev_sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.DevStartStreamNotify.dev_sn)
}

// uint32 channel = 2;
inline void DevStartStreamNotify::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DevStartStreamNotify::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DevStartStreamNotify::channel() const {
  // @@protoc_insertion_point(field_get:u727.DevStartStreamNotify.channel)
  return _internal_channel();
}
inline void DevStartStreamNotify::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void DevStartStreamNotify::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:u727.DevStartStreamNotify.channel)
}

// .common.StreamAddress dest_addr = 3;
inline bool DevStartStreamNotify::_internal_has_dest_addr() const {
  return this != internal_default_instance() && dest_addr_ != nullptr;
}
inline bool DevStartStreamNotify::has_dest_addr() const {
  return _internal_has_dest_addr();
}
inline const ::common::StreamAddress& DevStartStreamNotify::_internal_dest_addr() const {
  const ::common::StreamAddress* p = dest_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::StreamAddress&>(
      ::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& DevStartStreamNotify::dest_addr() const {
  // @@protoc_insertion_point(field_get:u727.DevStartStreamNotify.dest_addr)
  return _internal_dest_addr();
}
inline void DevStartStreamNotify::unsafe_arena_set_allocated_dest_addr(
    ::common::StreamAddress* dest_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_addr_);
  }
  dest_addr_ = dest_addr;
  if (dest_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.DevStartStreamNotify.dest_addr)
}
inline ::common::StreamAddress* DevStartStreamNotify::release_dest_addr() {
  
  ::common::StreamAddress* temp = dest_addr_;
  dest_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::StreamAddress* DevStartStreamNotify::unsafe_arena_release_dest_addr() {
  // @@protoc_insertion_point(field_release:u727.DevStartStreamNotify.dest_addr)
  
  ::common::StreamAddress* temp = dest_addr_;
  dest_addr_ = nullptr;
  return temp;
}
inline ::common::StreamAddress* DevStartStreamNotify::_internal_mutable_dest_addr() {
  
  if (dest_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::StreamAddress>(GetArena());
    dest_addr_ = p;
  }
  return dest_addr_;
}
inline ::common::StreamAddress* DevStartStreamNotify::mutable_dest_addr() {
  // @@protoc_insertion_point(field_mutable:u727.DevStartStreamNotify.dest_addr)
  return _internal_mutable_dest_addr();
}
inline void DevStartStreamNotify::set_allocated_dest_addr(::common::StreamAddress* dest_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_addr_);
  }
  if (dest_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dest_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_addr, submessage_arena);
    }
    
  } else {
    
  }
  dest_addr_ = dest_addr;
  // @@protoc_insertion_point(field_set_allocated:u727.DevStartStreamNotify.dest_addr)
}

// -------------------------------------------------------------------

// DevStopStreamNotify

// string dev_sn = 1;
inline void DevStopStreamNotify::clear_dev_sn() {
  dev_sn_.ClearToEmpty();
}
inline const std::string& DevStopStreamNotify::dev_sn() const {
  // @@protoc_insertion_point(field_get:u727.DevStopStreamNotify.dev_sn)
  return _internal_dev_sn();
}
inline void DevStopStreamNotify::set_dev_sn(const std::string& value) {
  _internal_set_dev_sn(value);
  // @@protoc_insertion_point(field_set:u727.DevStopStreamNotify.dev_sn)
}
inline std::string* DevStopStreamNotify::mutable_dev_sn() {
  // @@protoc_insertion_point(field_mutable:u727.DevStopStreamNotify.dev_sn)
  return _internal_mutable_dev_sn();
}
inline const std::string& DevStopStreamNotify::_internal_dev_sn() const {
  return dev_sn_.Get();
}
inline void DevStopStreamNotify::_internal_set_dev_sn(const std::string& value) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DevStopStreamNotify::set_dev_sn(std::string&& value) {
  
  dev_sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:u727.DevStopStreamNotify.dev_sn)
}
inline void DevStopStreamNotify::set_dev_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:u727.DevStopStreamNotify.dev_sn)
}
inline void DevStopStreamNotify::set_dev_sn(const char* value,
    size_t size) {
  
  dev_sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:u727.DevStopStreamNotify.dev_sn)
}
inline std::string* DevStopStreamNotify::_internal_mutable_dev_sn() {
  
  return dev_sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DevStopStreamNotify::release_dev_sn() {
  // @@protoc_insertion_point(field_release:u727.DevStopStreamNotify.dev_sn)
  return dev_sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DevStopStreamNotify::set_allocated_dev_sn(std::string* dev_sn) {
  if (dev_sn != nullptr) {
    
  } else {
    
  }
  dev_sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:u727.DevStopStreamNotify.dev_sn)
}

// uint32 channel = 2;
inline void DevStopStreamNotify::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DevStopStreamNotify::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DevStopStreamNotify::channel() const {
  // @@protoc_insertion_point(field_get:u727.DevStopStreamNotify.channel)
  return _internal_channel();
}
inline void DevStopStreamNotify::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void DevStopStreamNotify::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:u727.DevStopStreamNotify.channel)
}

// .common.StreamAddress dest_addr = 3;
inline bool DevStopStreamNotify::_internal_has_dest_addr() const {
  return this != internal_default_instance() && dest_addr_ != nullptr;
}
inline bool DevStopStreamNotify::has_dest_addr() const {
  return _internal_has_dest_addr();
}
inline const ::common::StreamAddress& DevStopStreamNotify::_internal_dest_addr() const {
  const ::common::StreamAddress* p = dest_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::StreamAddress&>(
      ::common::_StreamAddress_default_instance_);
}
inline const ::common::StreamAddress& DevStopStreamNotify::dest_addr() const {
  // @@protoc_insertion_point(field_get:u727.DevStopStreamNotify.dest_addr)
  return _internal_dest_addr();
}
inline void DevStopStreamNotify::unsafe_arena_set_allocated_dest_addr(
    ::common::StreamAddress* dest_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_addr_);
  }
  dest_addr_ = dest_addr;
  if (dest_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:u727.DevStopStreamNotify.dest_addr)
}
inline ::common::StreamAddress* DevStopStreamNotify::release_dest_addr() {
  
  ::common::StreamAddress* temp = dest_addr_;
  dest_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::StreamAddress* DevStopStreamNotify::unsafe_arena_release_dest_addr() {
  // @@protoc_insertion_point(field_release:u727.DevStopStreamNotify.dest_addr)
  
  ::common::StreamAddress* temp = dest_addr_;
  dest_addr_ = nullptr;
  return temp;
}
inline ::common::StreamAddress* DevStopStreamNotify::_internal_mutable_dest_addr() {
  
  if (dest_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::StreamAddress>(GetArena());
    dest_addr_ = p;
  }
  return dest_addr_;
}
inline ::common::StreamAddress* DevStopStreamNotify::mutable_dest_addr() {
  // @@protoc_insertion_point(field_mutable:u727.DevStopStreamNotify.dest_addr)
  return _internal_mutable_dest_addr();
}
inline void DevStopStreamNotify::set_allocated_dest_addr(::common::StreamAddress* dest_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_addr_);
  }
  if (dest_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dest_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_addr, submessage_arena);
    }
    
  } else {
    
  }
  dest_addr_ = dest_addr;
  // @@protoc_insertion_point(field_set_allocated:u727.DevStopStreamNotify.dest_addr)
}

// -------------------------------------------------------------------

// KeepAlive

// -------------------------------------------------------------------

// QueryOnlineDevReq

// -------------------------------------------------------------------

// QueryOnlineDevReply

// repeated .u727.MgwDevInfo devices = 20;
inline int QueryOnlineDevReply::_internal_devices_size() const {
  return devices_.size();
}
inline int QueryOnlineDevReply::devices_size() const {
  return _internal_devices_size();
}
inline void QueryOnlineDevReply::clear_devices() {
  devices_.Clear();
}
inline ::u727::MgwDevInfo* QueryOnlineDevReply::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:u727.QueryOnlineDevReply.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::u727::MgwDevInfo >*
QueryOnlineDevReply::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:u727.QueryOnlineDevReply.devices)
  return &devices_;
}
inline const ::u727::MgwDevInfo& QueryOnlineDevReply::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::u727::MgwDevInfo& QueryOnlineDevReply::devices(int index) const {
  // @@protoc_insertion_point(field_get:u727.QueryOnlineDevReply.devices)
  return _internal_devices(index);
}
inline ::u727::MgwDevInfo* QueryOnlineDevReply::_internal_add_devices() {
  return devices_.Add();
}
inline ::u727::MgwDevInfo* QueryOnlineDevReply::add_devices() {
  // @@protoc_insertion_point(field_add:u727.QueryOnlineDevReply.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::u727::MgwDevInfo >&
QueryOnlineDevReply::devices() const {
  // @@protoc_insertion_point(field_list:u727.QueryOnlineDevReply.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace u727

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_u727_2eproto
